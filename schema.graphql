schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https:\/\/en.wikipedia.org\/wiki\/ISO_8601) standard."
scalar Date

"The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https:\/\/en.wikipedia.org\/wiki\/ISO_8601) standard."
scalar DateTime

"The `DateTimeOffset` scalar type represents a date, time and offset from UTC. `DateTimeOffset` expects timestamps to be formatted in accordance with the [ISO-8601](https:\/\/en.wikipedia.org\/wiki\/ISO_8601) standard."
scalar DateTimeOffset

"The `Seconds` scalar type represents a period of time represented as the total number of seconds."
scalar Seconds

"The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds."
scalar Milliseconds

scalar Decimal

type Query {
  administrator: Administrator
  appUser: AppUser
  authoriseLeapFirm(requestId: String region: String product: LeapProduct): AuthoriseLeapFirm
  "Timesheet"
  chargeCodes: ChargeCodes
  clientAndContactList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String includeIndividual: Boolean includeOrganisation: Boolean includeStaff: Boolean): ClientAndContactListType
  clientList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidId: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isKeyOpportunity: Boolean isIncludeKeyOpportunity: Boolean taskTypes: String meetingWith: String onlyUsedByEnquiries: Boolean onlyUsedByTasks: Boolean onlyUsedByFinancials: Boolean isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): ClientListType
  columnConfigList(configType: Int): ColumnConfigListType
  "Timesheet"
  defaultNarrative: DefaultNarrativesType
  documentTypes: documentTypes
  "Timesheet"
  draftTimeslips(feeEarnerId: String includePending: Boolean includeDraft: Boolean): TimeslipSummaries
  "Enquiry Related Queries"
  enquiry: Enquiry
  eventAndCampaign: EventAndCampaignType
  "User Feature Layout configuration"
  featureLayoutConfigurationList(layoutId: Int includeHidden: Boolean isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean dashboardPanelId: String): FeatureLayoutConfigurationListType
  "User Feature Layout configuration"
  featureLayoutList(layoutId: Int dashboardPanelId: String userGuid: String): FeatureLayoutListType
  "Feature Licence Configuration with Hierarchy data"
  featureLicenceList(includeHidden: Boolean isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean): FeatureLicenceListType
  "Feature Security Configuration with Hierarchy data"
  featureSecurityList(includeHidden: Boolean isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean): FeatureSecurityListType
  feeEarnerDashboardFeeEarner("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isActive: Boolean): feeEarners
  firm: firm
  generalMaterialList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isConvey: Boolean): GeneralMaterialList
  invoiceSummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String sortColumn: String sortDirection: String searchCriteriasJson: String entityType: Int entityGuid: String responsibility: Int searchFilterJson: String): InvoiceSummaryListType
  "Lead Summary Details"
  leadDetails(leadGuidId: String fetchFromMv: Boolean): LeadDetails @deprecated(reason: "Use `enquiry`")
  leadOptions: LeadOptions @deprecated(reason: "Use `enquiry`")
  "Lead Summary Details"
  leadSummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCurrentLeads: Boolean isIncludeClosedLeads: Boolean sortColumn: String sortDirection: String): LeadSummaryListType @deprecated(reason: "Use `enquiry`")
  "Card Details"
  leapCards("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "If value is set as true, it will exclude matters if the matter is published" excludeIfAccessToMatter: Boolean "Pass unique identity Id to return the record" cardId: Int matterId: String "If value is set as true, it will show only the card details with Email value available" isShowCardsWithEmail: Boolean): LeapCards
  leapDocumentAccesses("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean documentId: String): LeapDocumentAccesses
  "Document Details"
  leapDocuments("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass the Guid value of Matter Id to return the record" matterId: String "Pass the Guid value of Document Id to return the record" documentId: String includeRoleDetails: Boolean): LeapDocuments
  leapMatterClients(excludeIfAccessToMatter: Boolean matterId: String): LeapMatterClients
  leapMatterLookup(fileNumber: String include: Boolean): LeapPublishedMatter
  "Matter User Access"
  leapMatterUserAccesses("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean cardId: String): LeapMatterUserAccesses
  "Published Matter Details"
  leapPublishedMatters("Pass unique identifier value in red rain database" id: Int "Pass guid of Leap's Matter to return the value" matterId: String): LeapPublishedMatters
  lookup: Lookup
  marketing: marketing
  "Matter Details"
  matter("Matter Details Identifier" id: Int!): MatterDetails
  matterFollowUpActionEmailBody(matterGuidId: String actionMessageGuidId: String includePersonActing: Boolean includePersonResponsible: Boolean): String
  "Matter Details"
  matterLookupList(includeCompleted: Boolean sortColumn: String sortDirection: String typeFilter: FilterOptionsType statusFilter: FilterOptionsStatus "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidId: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isKeyOpportunity: Boolean isIncludeKeyOpportunity: Boolean taskTypes: String meetingWith: String onlyUsedByEnquiries: Boolean onlyUsedByTasks: Boolean onlyUsedByFinancials: Boolean isMeetingWithAdvancedFilter: Boolean status: String sourceList: String isLimitedMatterSearch: Boolean isExcludeCompleted: Boolean feeEarnerId: String): MatterLookupListType
  matterPortFolio: matterPortFolio
  "Matter Details"
  matterStatusList(isApplyMatterAccess: Boolean): MatterStatusListType
  "Matter Details"
  matterSummaryDrillDownList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCompleted: Boolean sortColumn: String sortDirection: String searchCriteriasJson: String entityType: Int entityGuid: String responsibility: Int searchFilterJson: String): MatterSummaryDrillDownListType
  "Matter Details"
  matterSummaryList(includeCompleted: Boolean sortColumn: String sortDirection: String typeFilter: FilterOptionsType statusFilter: FilterOptionsStatus "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidId: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isKeyOpportunity: Boolean isIncludeKeyOpportunity: Boolean taskTypes: String meetingWith: String onlyUsedByEnquiries: Boolean onlyUsedByTasks: Boolean onlyUsedByFinancials: Boolean isMeetingWithAdvancedFilter: Boolean status: String sourceList: String isLimitedMatterSearch: Boolean isExcludeCompleted: Boolean feeEarnerId: String): MatterSummaryListType
  "Matter Details"
  matterSummaryListX("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCompleted: Boolean sortColumn: String sortDirection: String clientName: String matterStatus: String personActingId: Int personResponsibleId: Int wipBalanceGreaterThanAmount: Decimal debtorBalanceGreaterThanAmount: Decimal isIncludeMattersWithTrustBalance: Boolean nameId: Int isReferredMatters: Boolean isLimitedMatterSearch: Boolean searchCriteriasJson: String): MatterSummaryListXType
  "Timesheet"
  matterTimesheetStatistics(startDate: DateTime endDate: DateTime feeEarnerId: String): MatterStatistics
  messages("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass the Guid value of Matter Id to return the record" matterId: String messageId: Int): messages
  noteSubjects: noteSubjects
  options: Options
  party: Party
  "Party Details"
  partydetails("Matter Details Identifier" nameId: Int!): PartyDetails
  partySummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String sortColumn: String sortDirection: String typeFilter: FilterOptionsType): PartySummaryListType
  pEChargeRates(matterId: Int clientId: Int activityId: Int activityDescription: String): PEChargeRates
  provisioning: Provisioning
  "Timesheet"
  recentNarrative: RecentNarratives
  "Matter Details"
  recurringMatterTemplates: recurringMatterTemplates
  reportCatalogs(reportCategoryGuid: String fetchOptions: FetchOptions): ReportCatalogs
  reportCategorys(includeAllOption: Boolean fetchOptions: FetchOptions): ReportCategorys
  reportInfo(reportId: String): ReportInfo
  roleList("Specify whether to select external or internal roles. Or leave it empty\/ null to select all" isExternal: Boolean): RoleListType
  settings: Settings
  staffBudget: staffBudget
  staffRoleList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String): StaffRoleListType
  staffSummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String): StaffSummaryListType
  statistics: Statistics
  summaryViewConfig(configType: Int): ColumnConfigListForRoleType
  "Enquiry Related Queries"
  task: Task
  taskSummaryDrillDownList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCompleted: Boolean sortColumn: String sortDirection: String searchCriteriasJson: String entityType: Int entityGuid: String responsibility: Int): TaskSummaryDrillDownListType
  "Templates Related queries"
  templates: templates
  tenant(tenantId: String): Tenant
  tenantConfiguration: TenantConfiguration
  "Timesheet"
  timerSummary("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String): TimerSummaries
  "Timesheet"
  timesheetActivities(clientOnly: Boolean matterId: Int feeEarnerId: String): ActivitiesForUser
  timesheetFeeEarner("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isActive: Boolean): feeEarners
  timesheetScope: TimesheetScope
  "Timesheet"
  timesheetStatistics(startDate: DateTime endDate: DateTime feeEarnerId: String): TimesheetStatistics
  "Timesheet"
  timesheetSummary(startDate: DateTime endDate: DateTime feeEarnerId: String): Summaries
  timesheetSummaryDrillDownList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCompleted: Boolean sortColumn: String sortDirection: String searchCriteriasJson: String entityType: Int entityGuid: String responsibility: Int): TimesheetSummaryDrillDownListType
  "Timesheet"
  timeslipSummary(startDate: DateTime endDate: DateTime timeslipStatus: Int "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String source: String feeEarnerId: String includeNoMatter: Boolean): TimeslipSummaries
  userAssistants(userGuid: String): UserAssistants
  userTasks: userTasks
  userVerificationByLink(tenantId: String code: String): UserVerificationByLink
}

type Options {
  currencySymbol: CurrencySymbol
  homeCountry: LocalCurrency
  localCurrency: LocalCurrency
  localPhoneSettings("Matter Details Identifier" appType: String): LocalPhoneSettings
  matterOptions("Matter Details Identifier" matterId: Int): MatterOption
  matterSummaryNewEnabled: matterSummaryNewEnabled
  matterViewOptions: MatterViewOptions
  minimumPasswordLength(tenantId: String): minimumPasswordLength
  minimumPasswordStrength(tenantId: String): minimumPasswordStrength
  phoneSettings: PhoneAppSettings
  tenantOptions: TenantOptions
  timezoneOption: [Timezone]
}

type MatterOption {
  canCreateInternalMessage: Boolean!
  canCreateMessageSubject: Boolean!
  canImportData: Boolean!
  canImportDocuments: Boolean!
  canShowClientFinancials: Boolean!
  canShowCriticalDates: Boolean!
  canShowDocuments: Boolean!
  canShowFinancials: Boolean!
  canShowGeneral: Boolean!
  canShowMatterAccess: Boolean!
  canShowMessages: Boolean!
  canShowParties: Boolean!
  canShowStaff: Boolean!
  canShowTimeline: Boolean!
  canShowTopics: Boolean!
  isAdministrator: Boolean!
}

type MatterViewOptions {
  canAdd: Boolean!
  canDelete: Boolean!
  canUpdate: Boolean!
}

type TenantOptions {
  canViewDashboard: Boolean!
}

type PhoneAppSettings {
  activityButtons: String
  connectMenuButtons: String
  copyActivityAsNote: String
  cRMMenuButtons: String
  currencySymbol: String
  defaultActivity: String
  defaultDurationMinutes: String
  defaultDurationUnits: String
  defaultToDraft: String
  emailDefaultActivity: String
  expectedHoursPerDay: String
  menuButtons: String
  phoneCallDefaultActivity: String
  shouldShowFavouriteActivitiesFirst: String
  showPhoneCallButton: String
  showStartEndTime: String
  showTimerButton: String
  showWarningOnExceedingHours: String
  sourceSystem: String
  staffContactFilter: String
  standardHoursPerDay: String
  submissionType: String
  suggestCustomButtons: String
  tenantTimeCaptureMode: String
  timeCaptureMode: String
  timeSelectionMinuteInterval: String
  timeslipContactInfo: String
  unitsPerHour: String
  useSkypeForBusiness: String
  useSmartSetting: String
  useStartEndTime: String
  warnIfNotToday: String
  welcomeText: String
}

type LocalPhoneSettings {
  settingsJson: String
}

type CurrencySymbol {
  symbol: String!
}

type LocalCurrency {
  stringValue: String
}

type matterSummaryNewEnabled {
  boolValue: Boolean!
}

type minimumPasswordLength {
  numberValue: Int!
}

type minimumPasswordStrength {
  numberValue: Int!
}

type Timezone {
  baseUtcOffset: Float
  displayName: String
  "Unique Identifier"
  id: Int!
  standardName: String
  timezoneValue: String
}

type Tenant {
  companyName: String!
  companyUrl: String
  leapFirmResetAccessUrl: String
  leapProvisioningStatus: LeapProvisioningStatus
  leapProvisioningUrl: String
  logo: String!
  mobileLogo: String!
  showResetLeapAccessCard: Boolean
  sourceSystem: String
  tenantId: String
  title: String!
  useVerificationLinkForNewUsers: Boolean
}

enum LeapProvisioningStatus {
  PENDING
  SYNC_INITIATED
  SYNC_COMPLETE
  MAPPING_INITIATED
  MAPPING_COMPLETE
  COMPLETE
  DO_NOT_PROVISION
  FAILED
  Pending
  SyncInitiated
  SyncComplete
  MappingInitiated
  MappingComplete
  Complete
  DoNotProvision
  Failed
}

type AppUser {
  changePassword: Boolean!
  defaultMatterId: Int
  hasFeeEarnerDashboardAccess: Boolean!
  isActive: Boolean!
  isAdministrator: Boolean!
  isInternal: Boolean!
  isInternalAdmin: Boolean
  matterAccessCount: Int
  name: String!
  organisation: String
  role: String!
  splashScreen: splashScreen
  staffGuid: ID
  userDefinedHelp: userDefinedHelp
  userFeature: UserFeature
  userId: ID
  userName: String
}

type UserFeature {
  hasAdHocTask: Boolean
  hasAdminDashboard: Boolean
  hasAdminDashboardPage: Boolean
  hasAgedUnbilledFeesChart: Boolean
  hasAllocateTask: Boolean
  hasArchiveMatter: Boolean
  hasAssignLead: Boolean
  hasAverageBilledFeesClosedByActingChart: Boolean
  hasAverageBilledFeesClosedByMatterCategoryAndTypeChart: Boolean
  hasAverageBilledFeesClosedByMatterCategoryChart: Boolean
  hasAverageBilledFeesClosedByMatterTypeChart: Boolean
  hasAverageBilledFeesClosedByPropertyChart: Boolean
  hasAverageBilledFeesClosedByResponsibleChart: Boolean
  hasAverageDaysLeadFollowUpByLawyer: Boolean
  hasAverageFeeEstimateCurrentByActingChart: Boolean
  hasAverageFeeEstimateCurrentByMatterCategoryAndTypeChart: Boolean
  hasAverageFeeEstimateCurrentByMatterCategoryChart: Boolean
  hasAverageFeeEstimateCurrentByMatterTypeChart: Boolean
  hasAverageFeeEstimateCurrentByPropertyChart: Boolean
  hasAverageFeeEstimateCurrentByResponsibleChart: Boolean
  hasBilledFeesVsEstimateByActingChart: Boolean
  hasBilledFeesVsEstimateByMatterCategoryAndTypeChart: Boolean
  hasBilledFeesVsEstimateByMatterCategoryChart: Boolean
  hasBilledFeesVsEstimateByMatterTypeChart: Boolean
  hasBilledFeesVsEstimateByPropertyChart: Boolean
  hasBilledFeesVsEstimateByResponsibleChart: Boolean
  hasBilledFeesVsEstimateTotalChart: Boolean
  hasBillingRealisationChart: Boolean
  hasBillMatter: Boolean
  hasBrandsConfiguration: Boolean
  hasBulkMatterManagement: Boolean
  hasClientBillingChart: Boolean
  hasClientContactTagLookupMaintenance: Boolean
  hasClientDashboard: Boolean
  hasClientDashboardBrandFilter: Boolean
  hasClientDashboardCategoryFilter: Boolean
  hasClientDashboardConfiguration: Boolean
  hasClientDashboardCountryFilter: Boolean
  hasClientDashboardPropertyFilter: Boolean
  hasClientDashboardStatusFilter: Boolean
  hasClientDashboardTypeFilter: Boolean
  hasClientExposureChart: Boolean
  hasClientNotes: Boolean
  hasClientSenseLink: Boolean
  hasClosedMattersByFeeEarnerChart: Boolean
  hasClosedMattersChart: Boolean
  hasCloseMatter: Boolean
  hasCollectionRateChart: Boolean
  hasCombinedNewMattersByCategoryChart: Boolean
  hasConfigurationMaintenance: Boolean
  hasCorrespondenceActivityLookupMaintenance: Boolean
  hasCostAgreementChart: Boolean
  hasCreateClient: Boolean
  hasCreateEventsAndCampaigns: Boolean
  hasCreateLead: Boolean
  hasCreateRecord: Boolean
  hasCreateTask: Boolean
  hasCriticalDateStream: Boolean
  hasCurrentMattersByAustralianStateChart: Boolean
  hasDashboardConfiguration: Boolean
  hasDashboardPanelLookupMaintenance: Boolean
  hasDashboardParts: Boolean
  hasDashboardSecurityPersonal: Boolean
  hasDashboardSecurityRole: Boolean
  hasDashboardSecurityRoleCategory: Boolean
  hasDashboardSecurityScope: Boolean
  hasDashboardSecurityUser: Boolean
  hasDebtCollection: Boolean
  hasDebtorDaysByMatterCategoryChart: Boolean
  hasDebtorDaysByMatterTypeChart: Boolean
  hasDebtorDaysByPersonActingChart: Boolean
  hasDebtorDaysByPersonResponsibleChart: Boolean
  hasDebtOwingByActingChart: Boolean
  hasDebtOwingByClientChart: Boolean
  hasDebtOwingByMatterCategoryAndTypeChart: Boolean
  hasDebtOwingByMatterCategoryChart: Boolean
  hasDebtOwingByMatterTypeChart: Boolean
  hasDebtOwingByPropertyChart: Boolean
  hasDebtOwingByResponsibleChart: Boolean
  hasDeleteEventsAndCampaigns: Boolean
  hasDeleteLead: Boolean
  hasDeleteMatterTask: Boolean
  hasDeleteRecord: Boolean
  hasDeleteTask: Boolean
  hasDueDatesByPersonChart: Boolean
  hasDueDatesOverviewChart: Boolean
  hasEmailTemplateConfigurationPage: Boolean
  hasEmailTemplateSecurityRole: Boolean
  hasEmailTemplateSecurityRoleCategory: Boolean
  hasEmailTemplateSecurityScope: Boolean
  hasEmailTemplateSecurityUser: Boolean
  hasEnquiriesByLikelihoodToProceedChart: Boolean
  hasEnquiriesByQualityChart: Boolean
  hasEnquiryBookMeeting: Boolean
  hasEnquiryEmailFollowUp: Boolean
  hasEnquirySummaryViewManagement: Boolean
  hasEnquiryViewAll: Boolean
  hasEnquiryViewMyDepartmentOnly: Boolean
  hasEnquiryViewMyEnquiriesOnly: Boolean
  hasEnquiryViewMyOfficeOnly: Boolean
  hasEnquiryViewMyTeamOnly: Boolean
  hasEstimatePerformanceChart: Boolean
  hasEventsAndCampaignDeleteAttendee: Boolean
  hasEventsAndCampaignsSummary: Boolean
  hasEventStatusLookupMaintenance: Boolean
  hasEventTypeLookupMaintenance: Boolean
  hasExpectedFutureFeesByActingChart: Boolean
  hasExpectedFutureFeesByMatterCategoryAndTypeChart: Boolean
  hasExpectedFutureFeesByMatterCategoryChart: Boolean
  hasExpectedFutureFeesByMatterTypeChart: Boolean
  hasExpectedFutureFeesByPropertyChart: Boolean
  hasExpectedFutureFeesByResponsibleChart: Boolean
  hasFeatureAccessConfiguration: Boolean
  hasFeatureAccessSecurityCategory: Boolean
  hasFeatureAccessSecurityFirm: Boolean
  hasFeatureAccessSecurityPersonal: Boolean
  hasFeatureAccessSecurityRole: Boolean
  hasFeatureAccessSecurityUser: Boolean
  hasFeatureLicencingConfiguration: Boolean
  hasFeeEarnerDashboardViewAll: Boolean
  hasFeeEarnerDashboardViewMyDepartmentOnly: Boolean
  hasFeeEarnerDashboardViewMyOfficeOnly: Boolean
  hasFeeEarnerDashboardViewMyTeamOnly: Boolean
  hasFeesBilledByPeriodChart: Boolean
  hasFeesBilledByPeriodVsBudgetChart: Boolean
  hasFeesBilledChart: Boolean
  hasFeesBilledCumulativeChart: Boolean
  hasFeesBilledCumulativeVsBudgetChart: Boolean
  hasFeesBilledForMonthChart: Boolean
  hasFeesBilledInLast12MonthsChart: Boolean
  hasFeesBilledInLastFinancialYearChart: Boolean
  hasFeesBilledInLastYearByActingChart: Boolean
  hasFeesBilledInLastYearByMatterCategoryChart: Boolean
  hasFeesBilledInLastYearByMatterTypeChart: Boolean
  hasFeesBilledInLastYearByPropertyTypeChart: Boolean
  hasFeesBilledInLastYearByReportingGroupChart: Boolean
  hasFeesBilledInLastYearByResponsibleChart: Boolean
  hasFeesBilledInPast14DaysChart: Boolean
  hasFeesBilledMonthToDateByActingChart: Boolean
  hasFeesBilledMonthToDateByMatterCategoryChart: Boolean
  hasFeesBilledMonthToDateByMatterTypeChart: Boolean
  hasFeesBilledMonthToDateByPropertyTypeChart: Boolean
  hasFeesBilledMonthToDateByReportingGroupChart: Boolean
  hasFeesBilledMonthToDateByResponsibleChart: Boolean
  hasFeesBilledVsBudgetByFeeEarnerChart: Boolean
  hasFeesBilledVsBudgetChart: Boolean
  hasFeesCollectedByPeriodChart: Boolean
  hasFeesCollectedByPeriodVsBudgetChart: Boolean
  hasFeesCollectedChart: Boolean
  hasFeesCollectedCumulativeChart: Boolean
  hasFeesCollectedCumulativeVsBudgetChart: Boolean
  hasFeesCollectedVsBudgetChart: Boolean
  hasFeesVsBudgetByTimekeeperChart: Boolean
  hasFirmDashboardDepartmentView: Boolean
  hasFirmDashboardFeeEarnerView: Boolean
  hasFirmDashboardFirmView: Boolean
  hasFirmDashboardMyDepartmentOnly: Boolean
  hasFirmDashboardMyOfficeOnly: Boolean
  hasFirmDashboardMyTeamOnly: Boolean
  hasFirmDashboardOfficeView: Boolean
  hasFirmDashboardTeamView: Boolean
  hasFirmSettingsConfiguration: Boolean
  hasFirmStructure: Boolean
  hasFollowUpLead: Boolean
  hasFollowUpMatterTask: Boolean
  hasFutureSettlementsChart: Boolean
  hasGeneralMaterial: Boolean
  hasGeneralMaterialConfiguration: Boolean
  hasInnographyLink: Boolean
  hasIntegration: Boolean
  hasIntegrationConfiguration: Boolean
  hasInvoicesInDraftByActingChart: Boolean
  hasInvoicesInDraftByMatterCategoryChart: Boolean
  hasInvoicesInDraftByMatterTypeChart: Boolean
  hasInvoicesInDraftByPropertyTypeChart: Boolean
  hasInvoicesInDraftByReportingGroupChart: Boolean
  hasInvoicesInDraftByResponsibleChart: Boolean
  hasIPAttorneyDashboard: Boolean
  hasKeyOpportunity: Boolean
  hasLeadConversionInLast12MonthsByLawyer: Boolean
  hasLeadConversionInLast30DaysByLawyer: Boolean
  hasLeadConversionInLast90DaysByLawyer: Boolean
  hasLeadFollowUpActionMaintenance: Boolean
  hasLeadMaintenance: Boolean
  hasLeadReasonLookupMaintenance: Boolean
  hasLeads: Boolean
  hasLeadsDashboard: Boolean
  hasLeadsDetail: Boolean
  hasLeadsNotProceedingInLast12MonthsByReason: Boolean
  hasLeadsNotProceedingInLast30DaysByReason: Boolean
  hasLeadsNotProceedingInLast90DaysByReason: Boolean
  hasLeadSourceLookupMaintenance: Boolean
  hasLeadsSummary: Boolean
  hasLicencedReports: Boolean
  hasLookupConfiguration: Boolean
  hasMailingClientAndContact: Boolean
  hasMailingList: Boolean
  hasMailingMatters: Boolean
  hasMailingNewBusinessEnquiries: Boolean
  hasMailingReferrers: Boolean
  hasMarkAsClientCreated: Boolean
  hasMatterActivityChart: Boolean
  hasMatterActivityStream: Boolean
  hasMatterBillingChart: Boolean
  hasMatterCountByActingChart: Boolean
  hasMatterCountByMatterCategoryAndTypeChart: Boolean
  hasMatterCountByMatterCategoryChart: Boolean
  hasMatterCountByMatterTypeChart: Boolean
  hasMatterCountByPropertyChart: Boolean
  hasMatterCountByReportingGroupChart: Boolean
  hasMatterCountByResponsibleChart: Boolean
  hasMatterDebtCollectionDetails: Boolean
  hasMatterDocument: Boolean
  hasMatterDurationByCategoryOrTypeChart: Boolean
  hasMatterEmailPersonActing: Boolean
  hasMatterEmailPersonResponsible: Boolean
  hasMatterFeesVsEstimateChart: Boolean
  hasMatterFollowUpActionLookupMaintenance: Boolean
  hasMatterLearnMore: Boolean
  hasMatterNotes: Boolean
  hasMattersByCountryChart: Boolean
  hasMattersByPeriod3ByActingChart: Boolean
  hasMattersByPeriod3ByMatterCategoryAndTypeChart: Boolean
  hasMattersByPeriod3ByMatterCategoryChart: Boolean
  hasMattersByPeriod3ByMatterTypeChart: Boolean
  hasMattersByPeriod3ByPropertyChart: Boolean
  hasMattersByPeriod3ByResponsibleChart: Boolean
  hasMattersByPeriod7ByActingChart: Boolean
  hasMattersByPeriod7ByMatterCategoryAndTypeChart: Boolean
  hasMattersByPeriod7ByMatterCategoryChart: Boolean
  hasMattersByPeriod7ByMatterTypeChart: Boolean
  hasMattersByPeriod7ByPropertyChart: Boolean
  hasMattersByPeriod7ByResponsibleChart: Boolean
  hasMattersByPeriodByActingChart: Boolean
  hasMattersByPeriodByMatterCategoryAndTypeChart: Boolean
  hasMattersByPeriodByMatterCategoryChart: Boolean
  hasMattersByPeriodByMatterTypeChart: Boolean
  hasMattersByPeriodByPropertyChart: Boolean
  hasMattersByPeriodByResponsibleChart: Boolean
  hasMattersByStatusChart: Boolean
  hasMattersOpenedChart: Boolean
  hasMatterSummary: Boolean
  hasMattersVsAverageChart: Boolean
  hasMattersWithoutTrustByActingChart: Boolean
  hasMattersWithoutTrustByMatterCategoryAndTypeChart: Boolean
  hasMattersWithoutTrustByMatterCategoryChart: Boolean
  hasMattersWithoutTrustByMatterTypeChart: Boolean
  hasMattersWithoutTrustByPropertyChart: Boolean
  hasMattersWithoutTrustByResponsibleChart: Boolean
  hasMatterTasks: Boolean
  hasModifyLead: Boolean
  hasModifyTask: Boolean
  hasNameMaintenance: Boolean
  hasNameSummary: Boolean
  hasNameSummaryViewManagement: Boolean
  hasNewLeadsInLast12MonthsByAreaOfLaw: Boolean
  hasNewLeadsInLast12MonthsBySource: Boolean
  hasNewLeadsInLast12MonthsTotal: Boolean
  hasNewLeadsInLast30DaysByAreaOfLaw: Boolean
  hasNewLeadsInLast30DaysBySource: Boolean
  hasNewLeadsInLast7DaysByAreaOfLaw: Boolean
  hasNewLeadsInLast7DaysBySource: Boolean
  hasNewLeadsInLast90DaysByAreaOfLaw: Boolean
  hasNewLeadsInLast90DaysBySource: Boolean
  hasNewMattersInLastTwelveMonthsByActingChart: Boolean
  hasNewMattersInLastTwelveMonthsByMatterCategoryAndTypeChart: Boolean
  hasNewMattersInLastTwelveMonthsByMatterCategoryChart: Boolean
  hasNewMattersInLastTwelveMonthsByMatterTypeChart: Boolean
  hasNewMattersInLastTwelveMonthsByPropertyChart: Boolean
  hasNewMattersInLastTwelveMonthsByReportingGroupChart: Boolean
  hasNewMattersInLastTwelveMonthsByResponsibleChart: Boolean
  hasNonBillableTimesByActivityChart: Boolean
  hasNonBillableTimesByStaffChart: Boolean
  hasPersonaliseFeeEarnerDashboardConfiguration: Boolean
  hasPersonaliseFirmDashboardConfiguration: Boolean
  hasPersonaliseLeadsDashboardConfiguration: Boolean
  hasPhoneTask: Boolean
  hasPipelineVsMatterActivityChart: Boolean
  hasPoBoxTypeLookupMaintenance: Boolean
  hasPracticeAreaLookupMaintenance: Boolean
  hasReferrerBackgroundMaintenance: Boolean
  hasReferrerDetailMaintenance: Boolean
  hasReferrerMaintenance: Boolean
  hasReferrers: Boolean
  hasReferrerSourceLookupMaintenance: Boolean
  hasReferrerSummary: Boolean
  hasReferrerSummaryViewManagement: Boolean
  hasReferrerTypeLookupMaintenance: Boolean
  hasRelationshipQualityLookupMaintenance: Boolean
  hasReportCatalog: Boolean
  hasRiskLevelLookupMaintenance: Boolean
  hasRoleConfiguration: Boolean
  hasSalesPipelineByAreaOfLawChart: Boolean
  hasSalesPipelineByAssigneeChart: Boolean
  hasSalesPipelineByLocationChart: Boolean
  hasScrubData: Boolean
  hasShowFeeEarnerDashboard: Boolean
  hasSplashScreenConfigurationPage: Boolean
  hasSplashScreenSecurityRole: Boolean
  hasSplashScreenSecurityRoleCategory: Boolean
  hasSplashScreenSecurityScope: Boolean
  hasSplashScreenSecurityUser: Boolean
  hasStaffBillingSummaryViewManagement: Boolean
  hasStaffBudgetBillingsEdit: Boolean
  hasStaffBudgetBillingsView: Boolean
  hasStaffBudgetCollectionsEdit: Boolean
  hasStaffBudgetCollectionsView: Boolean
  hasStaffBudgetProductionEdit: Boolean
  hasStaffBudgetProductionView: Boolean
  hasStaffMaintenance: Boolean
  hasStaffSummary: Boolean
  hasStaffSummaryViewManagement: Boolean
  hasTaskDashboard: Boolean
  hasTaskDashboardConfiguration: Boolean
  hasTaskDashboardDepartmentView: Boolean
  hasTaskDashboardFeeEarnerView: Boolean
  hasTaskDashboardFirmView: Boolean
  hasTaskDashboardMyOfficeOnly: Boolean
  hasTaskDashboardMyTeamOnly: Boolean
  hasTaskDashboardOfficeView: Boolean
  hasTaskDashboardTeamView: Boolean
  hasTaskDetail: Boolean
  hasTaskMaintenance: Boolean
  hasTaskQueueByAssigneeChart: Boolean
  hasTaskQueueByCreationTimeChart: Boolean
  hasTaskQueueByTaskTypeDescriptionChart: Boolean
  hasTasks: Boolean
  hasTaskSummary: Boolean
  hasTaskTypeGroupMaintenance: Boolean
  hasTaskTypeMaintenance: Boolean
  hasTaskViewAll: Boolean
  hasTaskViewMyDepartmentOnly: Boolean
  hasTaskViewMyOfficeOnly: Boolean
  hasTaskViewMyTeamOnly: Boolean
  hasTimesheet: Boolean
  hasTimesheetFeesInFinancialYearAggregateChart: Boolean
  hasTimesheetFeesInFinancialYearChart: Boolean
  hasTimesheetFeesInLastPeriodsChart: Boolean
  hasTimesheetFeesWithBudgetInFinancialYearAggregateChart: Boolean
  hasTimesheetFeesWithBudgetInFinancialYearChart: Boolean
  hasTimesheetFeesWithBudgetInLastPeriodsChart: Boolean
  hasTimesheetSummary: Boolean
  hasTimesheetTimeAndFeesInLastPeriodsChart: Boolean
  hasTimesheetTimeInFinancialYearAggregateChart: Boolean
  hasTimesheetTimeInFinancialYearChart: Boolean
  hasTimesheetTimeInLastPeriodsChart: Boolean
  hasTimesheetTimer: Boolean
  hasTimesheetTimeWithBudgetInFinancialYearAggregateChart: Boolean
  hasTimesheetTimeWithBudgetInFinancialYearChart: Boolean
  hasTimesheetTimeWithBudgetInLastPeriodsChart: Boolean
  hasTimesheetUpdate: Boolean
  hasTimesheetViewAll: Boolean
  hasTimesheetViewMyDepartmentOnly: Boolean
  hasTimesheetViewMyOfficeOnly: Boolean
  hasTimesheetViewMyTeamOnly: Boolean
  hasTopReferrersInLast12MonthsChart: Boolean
  hasTopReferrersInLastNinetyDaysChart: Boolean
  hasTopReferrersInLastThirtyDaysChart: Boolean
  hasTotalOwingChart: Boolean
  hasTransferMatterTrust: Boolean
  hasTrustFundsAvailableChart: Boolean
  hasUnbilledDisbursementsByActingChart: Boolean
  hasUnbilledDisbursementsByMatterCategoryAndTypeChart: Boolean
  hasUnbilledDisbursementsByMatterCategoryChart: Boolean
  hasUnbilledDisbursementsByMatterTypeChart: Boolean
  hasUnbilledDisbursementsByPropertyChart: Boolean
  hasUnbilledDisbursementsByResponsibleChart: Boolean
  hasUnbilledFeesByActingChart: Boolean
  hasUnbilledFeesByMatterCategoryAndTypeChart: Boolean
  hasUnbilledFeesByMatterCategoryChart: Boolean
  hasUnbilledFeesByMatterTypeChart: Boolean
  hasUnbilledFeesByPropertyChart: Boolean
  hasUnbilledFeesByResponsibleChart: Boolean
  hasUpdateEventsAndCampaigns: Boolean
  hasUpdateRecord: Boolean
  hasUploadMatterDocument: Boolean
  hasUserAssistantLookupMaintenance: Boolean
  hasUserDashboard: Boolean
  hasUserDefinedHelpConfigurationPage: Boolean
  hasUserDefinedHelpSecurityRole: Boolean
  hasUserDefinedHelpSecurityRoleCategory: Boolean
  hasUserDefinedHelpSecurityScope: Boolean
  hasUserDefinedHelpSecurityUser: Boolean
  hasUserOptionsConfiguration: Boolean
  hasViewMatterDocuments: Boolean
  hasViewMatterTask: Boolean
  hasVisionSix: Boolean
  hasWIPLockUpDaysByMatterCategoryChart: Boolean
  hasWIPLockUpDaysByMatterTypeChart: Boolean
  hasWIPLockUpDaysByPersonActingChart: Boolean
  hasWIPLockUpDaysByPersonResponsibleChart: Boolean
  hasWriteOffDebtors: Boolean
  hasWriteOffWIP: Boolean
  hasYearBudgetsChart: Boolean
}

type splashScreen {
  guidId: ID
  "Unique Identifier"
  id: Int!
  isInternalRole: Boolean
  roleGuid: ID
  template: String
  templateType: Boolean
  userGuid: ID
}

type userDefinedHelp {
  guidId: ID
  "Unique Identifier"
  id: Int!
  isInternalRole: Boolean
  roleGuid: ID
  template: String
  templateType: Boolean
  userGuid: ID
}

type RoleListType {
  role: [RoleType]
}

type RoleType {
  description: String!
  isExternal: Boolean!
  leadSummaryViewDefaultTemplate: String
  leadSummaryViewDefaultTemplateId: Int
  matterManagementSummaryViewDefaultTemplate: String
  matterManagementSummaryViewDefaultTemplateId: Int
  matterSummaryViewDefaultTemplate: String
  matterSummaryViewDefaultTemplateId: Int
  roleIdString: String!
  rolename: String!
}

type UserVerificationByLink {
  code: ID
  status: Boolean!
  userId: ID
  verificationDate: DateTime
}

type MatterSummaryListType {
  matters: [MatterSummary]
  matterSummaryActualCount: MatterSummaryActualCount
  recordCount: Int!
}

type MatterSummary {
  billed: Float
  client: String
  clientReference: String
  completionOrSettlmentDate: DateTime
  country: String
  debtors: Float
  description: String
  estimatedCosts: Float
  family: String
  fileNumber: String
  fIRBStatus: String
  "Unique Identifier"
  id: Int!
  imageLocation: String
  inProgress: Boolean
  instructionDate: DateTime
  isVIP: Boolean
  last3Comments: String
  lastUpdate: DateTime
  latestComment: String
  matterCategory: String
  matterType: String
  matterTypeCategory: String
  nextAction: String
  nextActionDate: DateTime
  nextDueDescription: String
  nextRenewalDate: DateTime
  otherSide: String
  owner: String
  property: String
  propertyLabel: String
  stage: String
  state: String
  status: String
  syncSystemID: String
  title: String
  unbilled: Float
}

type MatterSummaryActualCount {
  actualRowCountForSearch: Int
  "Unique Identifier"
  id: Int!
}

enum FilterOptionsType {
  ALL
  RECENT
  FAVOURITE
  All
  Recent
  Favourite
}

enum FilterOptionsStatus {
  ALL
  CURRENT
  COMPLETE
  All
  Current
  Complete
}

type MatterLookupListType {
  matters: [MatterLookup]
  recordCount: Int!
}

type MatterLookup {
  client: String
  description: String
  family: String
  fileNumber: String
  fIRBStatus: String
  "Unique Identifier"
  id: Int!
  inProgress: Boolean
  isVIP: Boolean
  lastUpdate: Date
  matterCategory: String
  matterGuidId: ID
  matterType: String
  matterTypeCategory: String
  property: String
  propertyLabel: String
  stage: String
  state: String
  status: String
  syncSystemID: String
  title: String
}

type ColumnConfigListType {
  summaryViewConfig: [SummaryViewConfig]
}

type SummaryViewConfig {
  "Unique Id of the SummaryColumnConfig"
  configId: Int
  "Enum for Configuration Types. Pass 1 for MatterSummaryView"
  configType: Int
  "Unique Id of the SummaryColumnConfig"
  id: Int
  "True if it is a default view for the user"
  isDefault: Boolean
  "True if it is a private template for the user only"
  isPrivate: Boolean
  "True if it is a default view for the user"
  isRoleDefault: Boolean
  "True if it is a security configuration"
  isSecurity: Boolean
  "True if it is a default for the Tenant"
  isTenantDefault: Boolean
  "Column configuration"
  layoutConfiguration: String
  "Name of the template"
  name: String
}

type ColumnConfigListForRoleType {
  summaryViewConfigForRole: [SummaryViewConfigForRole]
}

type SummaryViewConfigForRole {
  id: Int
  name: String
}

"Matter Details"
type MatterDetails {
  acting: String
  actingEmail: String
  actions: Actions
  client: String
  completionDate: DateTime
  country: String
  dates("Skip offset records" offset: Int "Return first number of records" first: Int): dates
  description: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean "Convert Email Message to HTML format" typeFilter: String): documents
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  exchangeDate: Date
  family: String
  fileLocation: String
  "File Number"
  fileNumber: String
  financials: MatterFinancial
  firbStatus: Boolean
  "Unique Identifier"
  id: Int!
  images("Skip offset records" offset: Int "Return first number of records" first: Int): images
  inProgress: Boolean
  instructionDate: Date
  isConveyancing: Boolean
  isVip: Boolean
  lastUpdate: DateTime
  matterCategory: String
  matterDetailsController: MatterDetailsController
  matterGuid: ID
  matterType: String
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): messages
  nameID: Int
  nextActionDate: Date
  nextDueDescription: String
  property: String
  propertyLabel: String
  relationships("Skip offset records" offset: Int "Return first number of records" first: Int includeClients: Boolean includeOtherSide: Boolean includeOtherSideSolicitor: Boolean includeMiscParties: Boolean includeResponsibleStaff: Boolean includeOtherStaff: Boolean includeRedViewUsers: Boolean relationshipId: Int): relationships
  responsible: String
  responsibleEmail: String
  sections(includeTopics: Boolean includeRelationships: Boolean): sections
  settlementDate: Date
  stage: String
  state: String
  status: String
  title: String
  topics("Skip offset records" offset: Int "Return first number of records" first: Int topicId: Int): topics
}

type MatterFinancial {
  agedDebtor30Days: Decimal!
  agedDebtor60Days: Decimal!
  agedDebtor90Days: Decimal!
  agedDebtorCurrent: Decimal!
  balanceDue: Decimal!
  billedCostsAndPayments: Decimal!
  billedDisbursements: Decimal!
  billedTimeAndFees: Decimal!
  billingMethod: String
  costAgreementReceived: String
  disbursements: Decimal!
  estimatedCosts: Decimal!
  "Unique Identifier"
  id: Int!
  percentageEstimate: Decimal!
  trustControlledMoneyBalance: Decimal!
  trustDeposits: Decimal!
  trustGeneralBalance: Decimal!
  trustInvestmentBalance: Decimal!
  trustWithdrawals: Decimal!
  unbilledAnticipatedPayments: Decimal!
  unbilledCostRecoveries: Decimal!
  unbilledDisbursements: Decimal!
  unbilledOfficePayments: Decimal!
  unbilledTimeAndFees: Decimal!
}

type dates {
  dates("Skip offset records" offset: Int "Return first number of records" first: Int): [date]
  recordCount: Int!
}

type date {
  completed: Boolean
  completedDate: DateTime
  description: String
  dueDate: DateTime
  "Unique Identifier"
  id: Int!
  matterDate: DateTime
  matterId: Int
  sortOrder: Float
  type: String
}

type relationships {
  recordCount: Int!
  relationships("Skip offset records" offset: Int "Return first number of records" first: Int): [relationship]
}

type relationship {
  description: String
  "Unique Identifier"
  id: Int!
  individuals: [MatterIndividual]
  longDescription: String
  matterId: Int!
  organisations: [MatterOrganisation]
  parties: [MatterParties]
  reference: String
  relationship: String
  relationshipType: RelationshipType
  sortOrder: Float
}

enum RelationshipType {
  MISC_PARTIES
  CLIENTS
  OTHER_SIDE
  OTHER_SIDE_SOLICITOR
  OTHER_STAFF
  RESPONSIBLE_STAFF
  RED_VIEW_USERS
  MiscParties
  Clients
  OtherSide
  OtherSideSolicitor
  OtherStaff
  ResponsibleStaff
  RedViewUsers
}

type MatterIndividual {
  addresses: [Address]
  dateOfBirth: Date
  displayName: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  firstName: String
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  initials: String
  isVip: Boolean
  lastName: String
  matterRelationshipId: Int!
  matterRole: String
  matterRoleId: Int
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  middleName: String
  nameNotes: String
  partyEnumType: PartyEnumType
  partyId: Int!
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  reference: String
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  salutation: String
  sortOrder: Float
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  title: String
  website: String
}

enum PartyEnumType {
  INDIVIDUAL
  ORGANISATION
  STAFF
  REFERRER
  Individual
  Organisation
}

type PhoneNumber {
  extension: String
  "Unique Identifier"
  id: Int!
  number: String
  partyId: Int
  phoneNumberId: Int
  sequence: Int
  type: String!
}

type Address {
  addressType: Int
  country: String
  display: String
  floor: String
  "Unique Identifier"
  id: Int!
  name: String
  number: String
  partyId: Int
  postcode: String
  sequence: Int
  state: String
  street: String
  suburb: String
  type: String!
}

type EmailAddress {
  email: String
  emailId: Int
  "Unique Identifier"
  id: Int!
  partyId: Int
  sequence: Int
  type: String!
}

type RelatedParty {
  addresses: [Address]
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  "Unique Identifier"
  id: Int!
  isVip: Boolean
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type RelatedIndividual {
  addresses: [Address]
  dateOfBirth: Date
  displayName: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  firstName: String
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  initials: String
  isVip: Boolean
  lastName: String
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  middleName: String
  nameNotes: String
  parentPartyId: Int
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  relatedIndividualId: Int
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  relationship: String
  salutation: String
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  title: String
  website: String
}

type RelatedOrganisation {
  aBN: String
  aCN: String
  addresses: [Address]
  businessType: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  isVip: Boolean
  longName: String
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  organisationType: String
  parentPartyId: Int
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisationId: Int
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  relationship: String
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type messages {
  message("Skip offset records" offset: Int "Return first number of records" first: Int): [message]
  recordCount: Int!
}

type documents {
  creationDate: Date
  documentId: Int!
  "Unique Identifier"
  id: Int!
  name: String
  originatingType: String
  partyId: Int!
  title: String
  type: String
}

type PartyFinancial {
  balanceDue: Decimal!
  billedCostsAndPayments: Decimal!
  billedDisbursements: Decimal!
  billedFees: Decimal!
  billedTimeAndFees: Decimal!
  clientAverageBilledFees: ClientAverageBilledFees
  clientBilledFeeAndEstimate: ClientBilledFeeAndEstimate
  clientByYear(hasInvoices: Boolean): ClientByYear
  clientMattersByCategory: ClientMattersByCategory
  clientTotalOwing: ClientTotalOwing
  completedMatters: Decimal!
  currentMatterCount: Int!
  estimatedCosts: Decimal!
  estimatedFees: Decimal!
  firstMatterDate: Date!
  "Unique Identifier"
  id: Int!
  invoiceFeesBilledInLastTwelveMonth(hasInvoices: Boolean include: Boolean): InvoiceFeesBilledInLastTwelveMonth
  lastMatterDate: Date!
  matterCount: Int!
  newMattersInTheLast12Months: Decimal!
  totalBilledFees: Decimal!
  trustBalance: Decimal!
  trustControlledMoneyBalance: Decimal!
  trustDeposits: Decimal!
  trustGeneralBalance: Decimal!
  trustInvestmentBalance: Decimal!
  trustWithdrawals: Decimal!
  unbilledAnticipatedPayments: Decimal!
  unbilledCostRecoveries: Decimal!
  unbilledDisbursements: Decimal!
  unbilledFees: Decimal!
  unbilledOfficePayments: Decimal!
  unbilledTimeAndFees: Decimal!
}

type ClientBilledFeeAndEstimate {
  billedFee: Decimal
  estimate: Decimal
  "Unique Identifier"
  id: Int!
  mattersCount: Int
  mattersWithNoEstimate: Int
  mattersWithNoEstimateBilledFees: Decimal
}

type ClientTotalOwing {
  current: Decimal
  "Unique Identifier"
  id: Int!
  ninetyDays: Decimal
  sixtyDays: Decimal
  thirtyDays: Decimal
  total: Decimal
}

type InvoiceFeesBilledInLastTwelveMonth {
  clientInvoicesBilledByMonth: [invoiceBilledByMonth]
  "Unique Identifier"
  id: Int!
  invoiceTwelveMonthsTotalCount: InvoiceTwelveMonthsTotalCount
  trend: [invoiceByMonth]
}

type invoiceBilledByMonth {
  billedFees: Float
  "Unique Identifier"
  id: Int!
  month: String
}

type invoiceByMonth {
  count: Float
  "Unique Identifier"
  id: Int!
  month: String
}

type InvoiceTwelveMonthsTotalCount {
  "Unique Identifier"
  id: Int!
  lastTwelveMonthsTotalCount: Decimal
  previousTwelveMonthsTotalCount: Decimal
}

type ClientByYear {
  clientMatterBilledFeesByYear: [ClientMatterBilledFeesByYear]
  clientMattersByYear: [ClientMattersByYear]
  "Unique Identifier"
  id: Int!
}

type ClientMattersByYear {
  count: Int
  "Unique Identifier"
  id: Int!
  year: String
}

type ClientMatterBilledFeesByYear {
  billedFees: Float
  "Unique Identifier"
  id: Int!
  year: String
}

type ClientMattersByCategory {
  clientMatterCategory: [ClientMatterCategory]
  "Unique Identifier"
  id: Int!
}

type ClientMatterCategory {
  count: Float
  group: String
  "Unique Identifier"
  id: Int!
}

type ClientAverageBilledFees {
  averageBilledFee: [AverageBilledFee]
  averageBilledFeesPerMatter: Decimal
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type AverageBilledFee {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type matters {
  matter("Skip offset records" offset: Int "Return first number of records" first: Int): [matter]
  recordCount: Int!
  totalCount: Int
}

type matter {
  billed: Decimal
  client: String
  clientReference: String
  debtors: Decimal
  description: String
  estimatedCosts: Decimal
  family: String
  fileNumber: String
  "Unique Identifier"
  id: Int!
  inProgress: Boolean
  lastUpdate: Date
  matterCategory: String
  matterType: String
  otherSide: String
  property: String
  propertyLabel: String
  status: String
  title: String
  unBilled: Decimal
}

type mattersReferred {
  matter("Skip offset records" offset: Int "Return first number of records" first: Int): [matter]
  recordCount: Int!
  totalCount: Int
}

type PartyType {
  "Unique Identifier"
  id: Int!
  isClient: Boolean!
  isIndividual: Boolean!
  isOrganisation: Boolean!
  isReferrer: Boolean!
  isStaff: Boolean!
  isUser: Boolean!
}

type NameTag {
  guidId: ID
  "Unique Identifier"
  id: Int!
  name: String
  nameGuidId: ID
  tag: String
  tagGuidId: ID
  tagType: String
  tagTypeGuidId: ID
}

type MatterOrganisation {
  aBN: String
  aCN: String
  addresses: [Address]
  businessType: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  isVip: Boolean
  longName: String
  matterRelationshipId: Int!
  matterRole: String
  matterRoleId: Int
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  organisationType: String
  partyEnumType: PartyEnumType
  partyId: Int!
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  reference: String
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  sortOrder: Float
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type MatterParties {
  addresses: [Address]
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  "Unique Identifier"
  id: String
  isVip: Boolean
  matterRelationshipId: Int!
  matterRole: String
  matterRoleId: Int
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  partyEnumType: PartyEnumType
  partyId: Int!
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  reference: String
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  sortOrder: Float
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type document {
  addedBy: String
  convertMail: Boolean
  creationDate: DateTime
  documentId: Int!
  "Unique Identifier"
  id: Int!
  isUserDocument: Boolean
  matterDocumentId: Int!
  matterId: Int!
  name: String
  notes: String
  originatingType: String
  title: String
  type: String
}

type message {
  comment: String
  date: DateTime
  enteredBy: String
  firstName: String
  "Unique Identifier"
  id: Int!
  lastName: String
  matterId: Int
  middleName: String
  pending: Boolean
  source: Int
  subject: String
  title: String
}

type topics {
  recordCount: Int!
  topics("Skip offset records" offset: Int "Return first number of records" first: Int): [topic]
}

type topic {
  description: String
  "Unique Identifier"
  id: Int!
  matterId: Int
  sortOrder: Float
  topic: String
  topicData: [topicData]
}

type topicData {
  dateFormat: String
  dateValue: Date
  "Unique Identifier"
  id: Int!
  label: String
  matterTopicId: Int!
  sortOrder: Int
  stringValue: String
  type: Int
}

type MatterDetailsController {
  matterDates: Int!
  matterDocuments: Int!
  matterFinancials: Int!
  matterGeneral: Int!
  matterMessages: Int!
  matterParties: Int!
  matterTopics: Int!
}

type sections {
  recordCount: Int!
  sections("Skip offset records" offset: Int "Return first number of records" first: Int): [section]
}

type section {
  description: String
  "Unique Identifier"
  id: Int!
  isRelationship: Boolean
  matterId: Int!
  sectionName: String
  sequence: Int
  type: String
}

type images {
  image("Skip offset records" offset: Int "Return first number of records" first: Int): [image]
  recordCount: Int!
}

type image {
  creationDate: DateTime
  guidId: ID
  "Unique Identifier"
  id: Int!
  imageGuid: ID
  imageType: String
  lastUpdate: DateTime
  location: String
  matterId: Int!
  title: String
}

type Actions {
  canAssign: Boolean
  canChangeLinkedMatter: Boolean
  canCreateClient: Boolean
  canCreateContactForLostEnquiry: Boolean
  canCreateMatter: Boolean
  canEmailAssignee: Boolean
  canFollowUp: Boolean
  canLinkMatter: Boolean
  canMessageAssignee: Boolean
  canModify: Boolean
  canReOpen: Boolean
  "Unique Identifier"
  id: Int!
}

union PartyDetails = Staff | Individual | Organisation | Referrer

type Staff {
  addresses: [Address]
  dateOfBirth: Date
  displayName: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  firstName: String
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  initials: String
  isActive: Boolean
  isVip: Boolean
  lastName: String
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  middleName: String
  nameNotes: String
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  qualification: String
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  salutation: String
  staffCode: String
  staffExperience: [staffExperience]
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  title: String
  website: String
}

type staffExperience {
  "Unique Identifier"
  id: Int!
  matterCount: Int
  matterType: String
  matterTypeId: Int
  nameTypeId: Int
  partyId: Int
  recentExperienceDate: Date
  staffRole: String
}

type Individual {
  addresses: [Address]
  dateOfBirth: Date
  displayName: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  firstName: String
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  initials: String
  isVip: Boolean
  lastName: String
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  middleName: String
  nameNotes: String
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  salutation: String
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  title: String
  website: String
}

type Organisation {
  aBN: String
  aCN: String
  addresses: [Address]
  businessType: String
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  isVip: Boolean
  longName: String
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  organisationType: String
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type Referrer {
  addresses: [Address]
  documents("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Convert Email Message to HTML format" convertMsgToHTML: Boolean): [documents]
  documentUrl(documentId: Int! convertMail: Boolean isUserDocument: Boolean): String
  emailAddresses: [EmailAddress]
  financials: PartyFinancial
  "Unique Identifier"
  id: Int!
  isVip: Boolean
  lastContactDate: Date
  lastReferralDate: Date
  matters("Skip offset records" offset: Int "Return first number of records" first: Int): matters
  mattersReferred("Skip offset records" offset: Int "Return first number of records" first: Int): mattersReferred
  messages("Skip offset records" offset: Int "Return first number of records" first: Int): [messages]
  nameNotes: String
  partyEnumType: PartyEnumType
  partyType: PartyType
  phoneNumbers: [PhoneNumber]
  referralAverageBilledFees: ReferralAverageBilledFees
  referralMattersByCategory: ReferralMatterByCategory
  referralsByYear(hasInvoices: Boolean): ReferralsByYear
  referralsInLastTwelveMonths(hasInvoices: Boolean): ReferralsInLastTwelveMonths
  referrerName: String
  referrerSource: String
  referrerSourceGuid: ID
  referrerStats: ReferrerStats
  referrerType: String
  referrerTypeGuid: ID
  relatedIndividuals: [RelatedIndividual]
  relatedOrganisations: [RelatedOrganisation]
  relatedParties: [RelatedParty]
  relationshipManager: String
  relationshipManagerGuid: ID
  relationshipManagerId: Int
  relationshipQualityDescription: String
  relationshipQualityGuid: ID
  relationshipQualityLevel: String
  tags(nameTagId: String nameId: String tagId: String include: Boolean): [NameTag]
  website: String
}

type ReferrerStats {
  clientsReferredInLast12Months: Int!
  clientsReferredInTotal: Int!
  enquiriesReferredInTheLast12Months: Decimal
  enquiriesReferredInTotal: Decimal
  enquiriesReferredToLast12Months: Decimal
  enquiriesReferredToTotal: Decimal
  "Unique Identifier"
  id: Int!
  initialContactDate: Date!
  lastContactDate: Date!
  lastEnquiryDate: Date!
  lastEnquiryReferredTo: Date
  lastMatterDate: Date!
  mattersReferredInLast12Months: Int!
  mattersReferredInTotal: Int!
  relatedFeesInLast12Months: Decimal!
  relatedFeesInTotal: Decimal!
}

type ReferralsInLastTwelveMonths {
  "Unique Identifier"
  id: Int!
  referralMatterBilledFeesByMonth: [ReferralMatterBilledFeesByMonth]
  referralMattersByMonth: [ReferralMattersByMonth]
}

type ReferralMattersByMonth {
  count: Float
  "Unique Identifier"
  id: Int!
  month: String
}

type ReferralMatterBilledFeesByMonth {
  billedFees: Float
  "Unique Identifier"
  id: Int!
  month: String
}

type ReferralsByYear {
  "Unique Identifier"
  id: Int!
  referralMatterBilledFeesByYear: [ReferralMatterBilledFeesByYear]
  referralMattersByYear: [ReferralMattersByYear]
}

type ReferralMattersByYear {
  count: Float
  "Unique Identifier"
  id: Int!
  year: String
}

type ReferralMatterBilledFeesByYear {
  billedFees: Float
  "Unique Identifier"
  id: Int!
  year: String
}

type ReferralMatterByCategory {
  "Unique Identifier"
  id: Int!
  referralMatterCategory: [ReferralMatterCategory]
}

type ReferralMatterCategory {
  count: Float
  group: String
  "Unique Identifier"
  id: Int!
}

type ReferralAverageBilledFees {
  averageBilledFee: [AverageBilledFee]
  averageBilledFeesPerMatter: Decimal
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type PartySummaryListType {
  parties: [PartySummaryType]
  recordCount: Int!
}

type PartySummaryType {
  city: String
  country: String
  entityType: Int
  firstName: String
  formattedName: String
  "Unique Identifier"
  id: Int!
  lastName: String
  middleName: String
  state: String
}

type StaffSummaryListType {
  recordCount: Int!
  staff: [StaffSummaryType]
}

type StaffSummaryType {
  firstName: String
  formattedName: String
  "Unique Identifier"
  id: Int!
  lastName: String
  middleName: String
}

type StaffRoleListType {
  recordCount: Int!
  staffRole: [StaffRoleType]
}

type StaffRoleType {
  description: String
  "Unique Identifier"
  id: Int!
}

type ClientListType {
  clients: [ClientType]
  recordCount: Int!
}

type ClientType {
  clientName: String
  guid: ID
  "Unique Identifier"
  id: Int!
  nameID: Int
}

type ClientAndContactListType {
  clientAndContacts: [ClientAndContactType]
  recordCount: Int!
}

type ClientAndContactType {
  guid: ID
  "Unique Identifier"
  id: Int!
  name: String
  nameID: Int
}

type ActivitiesForUser {
  activities("Skip offset records" offset: Int "Return first number of records" first: Int): [ActivityForUser]
  favouriteActivitiesCount: Int
  recordCount: Int!
}

type ActivityForUser {
  "Unique Identifier"
  id: Int!
  isFirmActivity: Boolean
  isVIP: Boolean
  stringValue: String
}

type ChargeCodes {
  chargeCode("Skip offset records" offset: Int "Return first number of records" first: Int): [ChargeCode]
  recordCount: Int!
}

type ChargeCode {
  description: String
  "Unique Identifier"
  id: Int!
  iD: Int
  rate: Decimal
}

type DefaultNarrativesType {
  narratives("Skip offset records" offset: Int "Return first number of records" first: Int): [TimesheetDefaultNarrative]
  recordCount: Int!
}

type TimesheetDefaultNarrative {
  "Unique Identifier"
  id: Int!
  stringValue: String
}

type RecentNarratives {
  narratives("Skip offset records" offset: Int "Return first number of records" first: Int): [TimesheetRecentNarrative]
  recordCount: Int!
}

type TimesheetRecentNarrative {
  "Unique Identifier"
  id: Int!
  text: String
  textDate: Date!
}

type TimesheetStatistics {
  recordCount: Int!
  timesheetStatistics("Skip offset records" offset: Int "Return first number of records" first: Int): [TimesheetStatistic]
}

type TimesheetStatistic {
  chargeableTimeMins: Int
  chargeableUnits: Int
  draftExcludingPendingCount: Int
  feeValue: Decimal
  "Unique Identifier"
  id: Int!
  incompleteCount: Int
  incompleteTimeMins: Int
  incompleteUnits: Int
  nonChargeableTimeMins: Int
  nonChargeableUnits: Int
  notSubmittedCount: Int
  notSubmittedTimeMins: Int
  notSubmittedUnits: Int
  pendingCount: Int
  timesheetDate: Date
  timeslipCount: Int
}

type MatterStatistics {
  matterStatistics("Skip offset records" offset: Int "Return first number of records" first: Int): [MatterTimesheetStatistic]
  recordCount: Int!
}

type MatterTimesheetStatistic {
  chargeableTimeMins: Int
  chargeableUnits: Int
  client: String
  feeValue: Decimal
  fileNumber: String
  "Unique Identifier"
  id: Int!
  matterCategory: String
  matterID: Int
  matterType: String
  nonChargeableTimeMins: Int
  nonChargeableUnits: Int
  title: String
}

type Summaries {
  recordCount: Int!
  summaries("Skip offset records" offset: Int "Return first number of records" first: Int): [Summary]
}

type Summary {
  "Unique Identifier"
  id: Int!
  mattersSettled: Int
  mattersWithoutSettlements: Int
  total: Decimal
}

type TimeslipSummaries {
  recordCount: Int!
  timeslipSummaries("Skip offset records" offset: Int "Return first number of records" first: Int): [TimeslipSummary]
  timeSlipSummaryCounts: TimeSlipSummaryCounts
}

type TimeslipSummary {
  activityDescription: String
  activityID: Int
  amount: Decimal
  chargeLevelDescription: String
  chargeLevelID: Int
  chargeRate: Decimal
  client: String
  endTimeSeconds: Int
  fileNumber: String
  "Unique Identifier"
  id: Int!
  isIncomplete: Boolean
  isSynced: Boolean
  itemDate: Date
  matterCategory: String
  matterID: Int
  matterType: String
  note: String
  startTimeSeconds: Int
  syncErrorDescription: String
  syncErrorID: Int
  timesheetNote: String
  timeWorkedSeconds: Int
  title: String
  units: Int
}

type TimeSlipSummaryCounts {
  actualRowCountForSearch: Int
  draftCount: Int
  "Unique Identifier"
  id: Int!
  submittedCount: Int
  totalCount: Int
}

type TimerSummaries {
  recordCount: Int!
  timerSummaries("Skip offset records" offset: Int "Return first number of records" first: Int): [TimerSummary]
  timerSummaryCounts: TimerSummaryCounts
}

type TimerSummary {
  activityDescription: String
  activityId: Int
  billingNote: String
  chargeRate: Decimal
  chargeRateId: Int
  client: String
  fileNumber: String
  "Unique Identifier"
  id: Int!
  isRunning: Boolean
  lastStarted: DateTime
  matterCategory: String
  matterId: Int
  matterType: String
  timerGuid: ID
  timesheetNote: String
  timeWorkedMinutes: Int
  title: String
}

type TimerSummaryCounts {
  actualRowCountForSearch: Int
  "Unique Identifier"
  id: Int!
  totalCount: Int
}

type matterPortFolio {
  financials: MatterPortfolioFinancial
  "Unique Identifier"
  id: Int!
  matterStatusCounts("Skip offset records" offset: Int "Return first number of records" first: Int): matterStatusCounts
  settlements(startDate: DateTime endDate: DateTime): settlements
}

type MatterPortfolioFinancial {
  "Unique Identifier"
  id: Int!
  totalDepositAmount: Decimal
  totalSalesAmount: Decimal
}

type matterStatusCounts {
  matterStatusCount("Skip offset records" offset: Int "Return first number of records" first: Int): [matterStatusCount]
  recordCount: Int!
  totalCount: Int
}

type matterStatusCount {
  "Unique Identifier"
  id: Int!
  status: String
  statusCount: Int
}

type settlements {
  recordCount: Int!
  settledAmount: Decimal
  settledCount: Int
  settlement("Skip offset records" offset: Int "Return first number of records" first: Int): [settlement]
  toSettleAmount: Decimal
  toSettleCount: Int
  totalCount: Int
}

type settlement {
  date: Date
  dueCount: Int
  "Unique Identifier"
  id: Int!
  occurredCount: Int
  overdueCount: Int
}

type PEChargeRates {
  pEChargeRate("Skip offset records" offset: Int "Return first number of records" first: Int): [PEChargeRate]
  recordCount: Int!
}

type PEChargeRate {
  activityId: Int
  clientId: Int
  "Unique Identifier"
  id: Int!
  matterId: Int
  moneyValue: Decimal
  stringValue: String
}

type noteSubjects {
  noteSubject: [noteSubject]
  recordCount: Int!
}

type noteSubject {
  "Unique Identifier"
  id: Int!
  stringValue: String
}

"Matter Details"
type documentTypes {
  documentType: [documentType]
  recordCount: Int!
}

type documentType {
  "Unique Identifier"
  id: Int!
  type: String
}

type Administrator {
  adminStatistics: AdminStatistics
  brands: brands
  clientData: ClientData
  "Unique Identifier"
  id: Int!
  loginActivities("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isAccessesToday: Boolean isAccessesThisWeek: Boolean isAccessesThisMonth: Boolean isAccessesLastMonth: Boolean): LoginActivities
  matterAccesses("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isAccessesToday: Boolean isAccessesThisWeek: Boolean isAccessesThisMonth: Boolean isAccessesLastMonth: Boolean dayOfWeek: String hourOfDay: String): MatterAccesses
  nameAccesses("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isAccessesToday: Boolean isAccessesThisWeek: Boolean isAccessesThisMonth: Boolean isAccessesLastMonth: Boolean): NameAccesses
  noteActivities("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isExternalMatterNoteCount: Boolean isInternalMatterNoteCount: Boolean isClientNoteCount: Boolean): NoteActivities
  timeLineActivities("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isAddedToday: Boolean isActivityThisWeek: Boolean isActiveThisMonth: Boolean isActiveLastMonth: Boolean isDraft: Boolean isError: Boolean isFutureNotSubmitted: Boolean dayOfWeek: String hourOfDay: String activityType: String lag: String): TimeLineActivities
  users("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String userId: String isAuthorized: Boolean isRegistered: Boolean isLocked: Boolean isActiveToday: Boolean isActiveLast7Days: Boolean isActiveLast8To30Days: Boolean isActiveLast31To60Days: Boolean isActiveGreaterThan60Days: Boolean isInActive: Boolean isAdministrator: Boolean isStaff: Boolean isExternal: Boolean includeTask: Boolean entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean taskTypes: String includeTaskAssignedBy: Boolean): Users
}

type AdminStatistics {
  documentCounts: DocumentCounts
  "Unique Identifier"
  id: Int!
  loginActivityByDays: LoginActivityByDays
  loginActivityByTimes: LoginActivityByTimes
  loginActivityCounts: LoginActivityCountsType
  matterAccessByDays: MatterAccessByDays
  matterAccessByTimes: MatterAccessByTimes
  matterAccessCounts: MatterAccessCountsType
  matterCounts: MatterCounts
  messageCounts: MessageCounts
  nameAccessByDays: NameAccessByDays
  nameAccessByTimes: NameAccessByTimes
  nameAccessCounts: NameAccessCounts
  noteActivityCounts: NoteActivityCounts
  reportCounts: ReportCounts
  roleCounts: RoleCounts
  timeLineActivityCounts: TimeLineActivityCounts
  timeLineByActivities: TimeLineByActivities
  timesheetByDays: TimesheetByDays
  timesheetByDaysTaken: TimesheetByDaysTaken
  timesheetByTimes: TimesheetByTimes
  userCounts: UserCounts
}

type UserCounts {
  activeLast31To60Days: Int!
  activeLast7Days: Int!
  activeLast8To30Days: Int!
  activeLessThan60Days: Int!
  activeToday: Int!
  administrator: Int!
  authorized: Int!
  "Unique Identifier"
  id: Int!
  inActive: Int!
  locked: Int!
  registered: Int!
  total: Int!
  unregistered: Int!
}

type MatterCounts {
  closed: Int!
  "Unique Identifier"
  id: Int!
  open: Int!
  total: Int!
}

type MessageCounts {
  external: Int!
  "Unique Identifier"
  id: Int!
  internal: Int!
  total: Int!
}

type RoleCounts {
  external: Int!
  "Unique Identifier"
  id: Int!
  internal: Int!
  total: Int!
}

type TimeLineActivityCounts {
  activeLastMonth: Int!
  activeThisMonth: Int!
  activeThisWeek: Int!
  addedToday: Int!
  draft: Int!
  "Unique Identifier"
  id: Int!
  inError: Int!
  inFutureNotSubmitted: Int!
  total: Int!
}

type DocumentCounts {
  "Unique Identifier"
  id: Int!
  matterDocuments: Int!
  total: Int!
  userDocuments: Int!
}

type ReportCounts {
  "Unique Identifier"
  id: Int!
  total: Int!
}

type NoteActivityCounts {
  clientNoteCount: Int!
  externalMatterNoteCount: Int!
  "Unique Identifier"
  id: Int!
  internalMatterNoteCount: Int!
  total: Int!
}

type TimesheetByDays {
  recordCount: Int!
  timesheetByDay: [TimesheetByDay]
}

type TimesheetByDay {
  count: Int
  day: String
  "Unique Identifier"
  id: Int!
}

type TimesheetByTimes {
  recordCount: Int!
  timesheetByTime: [TimesheetByTime]
}

type TimesheetByTime {
  count: Int
  "Unique Identifier"
  id: Int!
  time: String
}

type TimesheetByDaysTaken {
  recordCount: Int!
  timesheetByDaysTakenCount: [TimesheetByDaysTakenCount]
  timesheetByDaysTakenPercentage: TimesheetByDaysTakenPercentage
}

type TimesheetByDaysTakenCount {
  count: Int
  "Unique Identifier"
  id: Int!
  lagDays: String
}

type TimesheetByDaysTakenPercentage {
  after14Days: Decimal
  after1Day: Decimal
  "Unique Identifier"
  id: Int!
  priorToDate: Decimal
  sameDay: Decimal
  sixTo14Days: Decimal
  theNextDay: Decimal
  threeToFiveDays: Decimal
  total: Decimal
}

type TimeLineByActivities {
  recordCount: Int!
  timeLineByActivity: [TimeLineByActivity]
}

type TimeLineByActivity {
  activity: String
  count: String
  "Unique Identifier"
  id: Int!
}

type MatterAccessCountsType {
  accessLastMonth: Int!
  accessThisMonth: Int!
  accessThisWeek: Int!
  accessToday: Int!
  "Unique Identifier"
  id: Int!
  total: Int!
}

type MatterAccessByTimes {
  matterAccessByTime: [MatterAccessByTime]
  recordCount: Int!
}

type MatterAccessByTime {
  count: Int
  "Unique Identifier"
  id: Int!
  time: String
}

type MatterAccessByDays {
  matterAccessByDay: [MatterAccessByDay]
  recordCount: Int!
}

type MatterAccessByDay {
  count: Int
  day: String
  "Unique Identifier"
  id: Int!
}

type LoginActivityCountsType {
  accessLastMonth: Int!
  accessThisMonth: Int!
  accessThisWeek: Int!
  accessToday: Int!
  "Unique Identifier"
  id: Int!
  total: Int!
}

type LoginActivityByTimes {
  loginActivityByTime: [LoginActivityByTime]
  recordCount: Int!
}

type LoginActivityByTime {
  count: Int
  "Unique Identifier"
  id: Int!
  time: String
}

type LoginActivityByDays {
  loginActivityByDay: [LoginActivityByDay]
  recordCount: Int!
}

type LoginActivityByDay {
  count: Int
  day: String
  "Unique Identifier"
  id: Int!
}

type NameAccessCounts {
  accessLastMonth: Int!
  accessThisMonth: Int!
  accessThisWeek: Int!
  accessToday: Int!
  "Unique Identifier"
  id: Int!
  total: Int!
}

type NameAccessByTimes {
  nameAccessByTime: [NameAccessByTime]
  recordCount: Int!
}

type NameAccessByTime {
  count: Int
  "Unique Identifier"
  id: Int!
  time: String
}

type NameAccessByDays {
  nameAccessByDay: [NameAccessByDay]
  recordCount: Int!
}

type NameAccessByDay {
  count: Int
  day: String
  "Unique Identifier"
  id: Int!
}

type Users {
  recordCount: Int!
  user: [User]
}

type User {
  allMatters: Boolean
  assistantCount: Int
  brand: String
  brandID: Int
  changePasswordReminder: Boolean
  creationDate: DateTime
  email: String
  friendlyName: String
  hasTasks: Boolean
  "Unique Identifier"
  id: Int!
  isAdministrator: Boolean
  isAuthorized: Boolean
  isExternal: Boolean
  isLocked: Boolean
  isStaff: Boolean
  lastActivityDate: DateTime
  organisation: String
  personActing: Boolean
  personAssisting: Boolean
  personResponsible: Boolean
  registrationDate: DateTime
  roleID: ID
  roleName: String
  staffName: String
  userID: ID
  userName: String
}

type TimeLineActivities {
  recordCount: Int!
  timeLineActivity: [TimeLineActivity]
}

type TimeLineActivity {
  accessTime: DateTime
  clientName: String
  endTime: String
  errorMessage: String
  "Unique Identifier"
  id: Int!
  isError: Boolean
  itemDate: DateTime
  matterNumber: String
  note: String
  role: String
  startTime: String
  status: String
  timeActivity: String
  timePeriodEntered: String
  title: String
  unitsEntered: Int
  userName: String
}

type brands {
  brand: [Brand]
  recordCount: Int!
}

type Brand {
  "Unique Identifier"
  id: Int!
  logoID: String
  logoUrl: String
  name: String!
  themeID: String
  title: String!
}

type NoteActivities {
  noteActivity: [NoteActivity]
  recordCount: Int!
}

type NoteActivity {
  clientName: String
  comment: String
  createdDate: DateTime
  fileNumber: String
  friendlyName: String
  "Unique Identifier"
  id: Int!
  isInternal: Boolean
  roleName: String
  subject: String
  userName: String
}

type MatterAccesses {
  matterAccess: [MatterAccess]
  recordCount: Int!
}

type MatterAccess {
  accessTime: DateTime
  fileNumber: String
  "Unique Identifier"
  id: Int!
  longTitle: String
  role: String
  userName: String
}

type LoginActivities {
  loginActivity: [LoginActivity]
  recordCount: Int!
}

type LoginActivity {
  accessTime: DateTime
  "Unique Identifier"
  id: Int!
  role: String
  userName: String
}

type NameAccesses {
  nameAccess: [NameAccess]
  recordCount: Int!
}

type NameAccess {
  accessTime: DateTime
  "Unique Identifier"
  id: Int!
  name: String
  role: String
  userName: String
}

type ClientData {
  clientKey: String
  clientSecret: String
  "Unique Identifier"
  id: Int!
}

type Party {
  countries: Countries
  "Unique Identifier"
  id: Int!
  nameSummaries("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String includeIndividual: Boolean includeOrganisation: Boolean includeStaff: Boolean includeReferrer: Boolean isClientsOnly: Boolean tagsList: String stateList: String countryList: String businessTypeList: String isMatterOwnersOnly: Boolean isApplyMatterAccess: Boolean): NameSummaries
  phoneTaskDetails(nameGuid: String): PhoneTaskDetails
  staffSummaries("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String includeInactive: Boolean): StaffSummaries
  states: States
}

type NameSummaries {
  nameSummary: [NameSummary]
  nameSummaryActualCount: NameSummaryActualCount
  recordCount: Int!
}

type NameSummary {
  address: String
  addressName: String
  billedDisbursements: Decimal
  billedFees: Decimal
  businessType: String
  city: String
  clientsReferredInLast12Months: Int
  clientsReferredInTotal: Int
  completedMatters: Decimal
  country: String
  currentMatters: Int
  emailAddress: String
  enquiriesReferredInTheLast12Months: Decimal
  enquiriesReferredInTotal: Decimal
  enquiriesReferredToLast12Months: Decimal
  enquiriesReferredToTotal: Decimal
  entityType: Int
  estimatedFees: Decimal
  exposure: Float
  firstMatterDate: Date
  firstName: String
  floor: String
  gender: String
  guidID: ID
  hasMarketingConsent: Boolean
  "Unique Identifier"
  id: Int!
  initialContactDate: Date
  isClient: Boolean
  isIndividual: Boolean
  isOrganisation: Boolean
  isReferrer: Boolean
  isStaff: Boolean
  isUser: Boolean
  lastContactDate: Date
  lastEnquiryDate: DateTime
  lastEnquiryReferredTo: DateTime
  lastMatterDate: Date
  lastName: String
  lastReferralDate: Date
  lastReferredMatterDate: Date
  mattersReferredInLast12Months: Int
  mattersReferredInTotal: Int
  mobile: String
  name: String
  nameId: Int
  newMattersInTheLast12Months: Int
  notes: String
  number: String
  organisationGuid: ID
  organisationName: String
  percentageEstimate: Float
  phone: String
  postCode: String
  referrerSource: String
  referrerSourceGuid: ID
  referrerType: String
  referrerTypeGuid: ID
  relatedFeesInLast12Months: Decimal
  relatedFeesInTotal: Decimal
  relatedName: String
  relationshipManager: String
  relationshipManagerGuid: ID
  relationshipQualityDescription: String
  relationshipQualityGuid: ID
  relationshipQualityLevel: String
  state: String
  street: String
  tags: String
  totalBilledFees: Decimal
  trustBalance: Decimal
  unbilledDisbursements: Decimal
  unbilledFees: Decimal
}

type NameSummaryActualCount {
  actualRowCountForSearch: Int
  "Unique Identifier"
  id: Int!
}

type StaffSummaries {
  recordCount: Int!
  staffSummary: [StaffSummary]
  staffSummaryActualCount: StaffSummaryActualCount
}

type StaffSummary {
  emailAddress: String
  endDate: DateTime
  "Unique Identifier"
  id: Int!
  mobile: String
  name: String
  phone: String
  staffGuid: ID
  staffId: Int
  staffRole: String
  startDate: DateTime
}

type StaffSummaryActualCount {
  actualRowCountForSearch: Int
  "Unique Identifier"
  id: Int!
}

type States {
  recordCount: Int!
  states: [State]
}

type State {
  "Unique Identifier"
  id: Int!
  state: String
}

type Countries {
  country: [Country]
  recordCount: Int!
}

type Country {
  country: String
  countryCode: String
  countryId: Int
  "Unique Identifier"
  id: Int!
}

type PhoneTaskDetails {
  contactDetails: ContactDetails
  "Unique Identifier"
  id: Int!
  matterDetails: ContactMatterDetails
  messageDetails: MessageDetails
}

type MessageDetails {
  "Unique Identifier"
  id: Int!
  messagesNotResponded: Int
  messagesReceived: Int
}

type ContactDetails {
  address: String
  email: String
  "Unique Identifier"
  id: Int!
  mobile: String
  phone: String
  tags: String
}

type ContactMatterDetails {
  closedMatters: Int
  "Unique Identifier"
  id: Int!
  lastUpdate: DateTime
  matterSummary: [MatterSummaryShort]
  totalMatters: Int
}

type MatterSummaryShort {
  fileNumber: String
  "Unique Identifier"
  id: Int!
  matterTitle: String
  matterType: String
  personActing: String
}

type MatterSummaryListXType {
  matters: [MatterSummaryX]
  recordCount: Int!
  rowCountWithoutFilters: Int
}

type MatterSummaryX {
  acting: String
  actingEmail: String
  actingID: Int
  actingPhone: String
  applicationNumber: String
  assisting: String
  assistingEmail: String
  assistingID: Int
  assistingPhone: String
  billed: Float
  billedFees: Float
  category: String
  categoryID: Int
  class: String
  client: String
  clientReference: String
  completionOrSettlmentDate: DateTime
  coolingOffDate: DateTime
  costAgreementReceivedDate: DateTime
  costAgreementRequired: Boolean
  country: String
  countryID: Int
  debtors: Float
  deposit: Decimal
  depositDueDate: DateTime
  depositPaidDate: DateTime
  earliestPriorityDate: DateTime
  estimatedCosts: Float
  exchangeDate: DateTime
  exposure: Float
  family: String
  fileLocation: String
  fileNumber: String
  fIRB: Boolean
  goodsAndServices: String
  grantNumber: String
  hearingDate: DateTime
  "Unique Identifier"
  id: Int!
  imageLocation: String
  injuryDate: DateTime
  inProgress: Boolean
  instructionDate: DateTime
  isVIP: Boolean
  lastUpdate: DateTime
  latestComment: String
  longTitle: String
  matterGuidId: String
  nextAction: String
  nextActionDate: DateTime
  nextDueDescription: String
  nextRenewalDate: DateTime
  otherSide: String
  owner: String
  percentageEstimate: Float
  price: Decimal
  priorityCountry: String
  proceedingsIssuedDate: DateTime
  property: String
  propertyLabel: String
  publicationDate: DateTime
  publicationNumber: String
  publishedDate: DateTime
  referrer: String
  responsible: String
  responsibleEmail: String
  responsibleID: Int
  responsiblePhone: String
  reviewDate: DateTime
  stage: String
  state: String
  status: String
  subType: String
  subTypeID: Int
  sunsetOrLimitationDate: DateTime
  syncSystemID: Int
  title: String
  trustAccountBalance: Decimal
  trustBalance: Float
  type: String
  typeClassification: Int
  typeID: Int
  typeState: String
  unbilled: Float
  unbilledDisbursements: Float
  unbilledFees: Float
}

type Statistics {
  fees: Fees
  "Unique Identifier"
  id: Int!
  invoice: invoice
  lead: lead
  matter: Matter
  tasks: Tasks
  time: time
}

type Matter {
  agedUnbilledFees(entityType: Int entityGuid: String responsibility: Int include: Boolean): AgedUnbilledFees
  averageBilledFees(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): AverageBilledFees
  averageFeeEstimates(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): AverageFeeEstimates
  billedFeesVsEstimates(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): BilledFeesVsEstimates
  clientExposure(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): ClientExposure
  closedMattersByFeeEarner(entityType: Int entityGuid: String responsibility: Int include: Boolean): ClosedMattersByFeeEarner
  combinedNewMattersByCategory(entityType: Int entityGuid: String responsibility: Int include: Boolean): CombinedNewMattersByCategory
  costAgreementOutstanding(entityType: Int entityGuid: String responsibility: Int include: Boolean): CostAgreementOutstanding
  currentMatters(groupBy: MatterGroupBy filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): currentMattersType
  currentMattersByAustralianState(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): CurrentMattersByAustralianState
  currentMattersByUsState(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): CurrentMattersByUsState
  debtorsDays(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): DebtorsDays
  debtsOwing(groupBy: MatterGroupBy filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): DebtsOwing
  dueDates(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): DueDates
  dueDatesOverview(entityType: Int entityGuid: String responsibility: Int include: Boolean): DueDatesOverview
  expectedFutureFees(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): ExpectedFutureFees
  futureSettlements(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): FutureSettlements
  futureSettlementsByPriceChart(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): FutureSettlementsByPriceChart
  "Unique Identifier"
  id: Int!
  matterActivityData(entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterActivityData
  matterBilledFeeAndEstimate(entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterBilledFeeAndEstimate
  matterDurationsByCategoryOrTypeType(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterDurationsByCategoryOrTypeType
  matterFeesPlusWipVsEstimate(entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterFeesPlusWipVsEstimate
  matterFeesVsEstimate(entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterFeesVsEstimate
  mattersByCountry(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): MattersByCountry
  mattersByStatus(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): MattersByStatus
  mattersClosedInLastTwelveMonths(entityType: Int entityGuid: String responsibility: Int include: Boolean): MattersClosedInLastTwelveMonths
  mattersOpenedInLastTwelveMonths(entityType: Int entityGuid: String responsibility: Int include: Boolean): MattersOpenedInLastTwelveMonths
  mattersWithoutTrust(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): MattersWithoutTrust
  newMattersByPeriods(periodInDays: Int groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): NewMattersByPeriods
  newMattersInLastTwelveMonths(groupBy: MatterGroupBy filter: String entityType: Int entityGuid: String responsibility: Int include: Boolean): NewMattersInLastTwelveMonths
  newMatterVsAverageByMonth(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): NewMatterVsAverageByMonth
  pipelineVsMatterActivity(entityType: Int entityGuid: String responsibility: Int include: Boolean): PipelineVsMatterActivity
  topReferrersByPeriod(period: LeadsPeriod minimumEnquiries: Int entityType: Int entityGuid: String responsibility: Int include: Boolean): TopReferrersByPeriod
  totalOwing(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): TotalOwing
  trustBalances(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): TrustBalances
  trustFundsAvailable(entityType: Int entityGuid: String responsibility: Int include: Boolean): TrustFundsAvailable
  unBilledDisbursements(groupBy: MatterGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): UnBilledDisbursements
  unBilledFees(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): UnBilledFees
  wipLockUpsDays(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): WipLockUpsDaysType
}

type currentMattersType {
  closedMattersCount: Int
  currentMatter: [CurrentMatter]
  currentMattersCount: Int
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type CurrentMatter {
  count: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

enum MatterGroupBy {
  MATTER_TYPE
  MATTER_CATEGORY
  MATTER_CATEGORY_AND_TYPE
  PERSON_ACTING
  PERSON_RESPONSIBLE
  PROPERTY
  CLIENT
  REPORTING_GROUP
  PERSON_ASSISTING
  MatterType
  MatterCategory
  MatterCategoryAndType
  PersonActing
  PersonResponsible
  PersonAssisting
  Property
  Client
  ReportingGroup
}

type MattersByStatus {
  matterByStatus: [MatterByStatus]
  recordCount: Int!
}

type MatterByStatus {
  count: Int
  "Unique Identifier"
  id: Int!
  status: String
}

type ExpectedFutureFees {
  currentMatterEstimateDetails: CurrentMatterEstimateDetails
  expectedFutureFee: [ExpectedFutureFee]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type ExpectedFutureFee {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type CurrentMatterEstimateDetails {
  exceedingEstimate: Int
  "Unique Identifier"
  id: Int!
  mattersCount: Int
  noEstimate: Int
  totalFees: Decimal
  withinEstimate: Int
}

type MatterBilledFeeAndEstimate {
  billedFee: Decimal
  estimate: Decimal
  "Unique Identifier"
  id: Int!
  mattersCount: Int
  mattersWithNoEstimate: Int
  mattersWithNoEstimateBilledFees: Decimal
}

type MatterFeesPlusWipVsEstimate {
  exceedingEightyFive: Int
  exceedingHundred: Int
  exceedingSixty: Int
  "Unique Identifier"
  id: Int!
  lessThanSixty: Int
  mattersCount: Int
  mattersWithNoEstimate: Int
  mattersWithNoEstimateBilledFee: Decimal
  mattersWithNoEstimateUnBilledFee: Decimal
}

type TotalOwing {
  current: Decimal
  "Unique Identifier"
  id: Int!
  ninetyDays: Decimal
  sixtyDays: Decimal
  thirtyDays: Decimal
  total: Decimal
}

type MattersOpenedInLastTwelveMonths {
  "Unique Identifier"
  id: Int!
  matterOpenedInLastTwelveMonths: [MatterOpenedByMonth]
  matterOpenedInPreviousTwelveMonths: [MatterOpenedByMonth]
  mattersOpenedCountTotal: MattersOpened
  previousYearMattersOpenedCountTotal: MattersOpened
}

type MatterOpenedByMonth {
  count: Float
  estimate: Decimal
  "Unique Identifier"
  id: Int!
  month: String
  year: String
}

type MattersOpened {
  count: Int
  "Unique Identifier"
  id: Int!
  mattersWithoutEstimate: Int
  totalEstimates: Decimal
}

type UnBilledFees {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
  unBilledFee: [UnBilledFee]
}

type UnBilledFee {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type UnBilledDisbursements {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
  unBilledDisbursement: [UnBilledDisbursement]
}

type UnBilledDisbursement {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type DebtsOwing {
  debtOwing: [DebtOwing]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
}

type DebtOwing {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matters: Int
}

type DebtorsDays {
  debtorDays: [DebtorDays]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
}

type DebtorDays {
  amount: Decimal
  debtorDaysAmount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matters: Int
}

type WipLockUpsDaysType {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
  wipLockUpDays: [WipLockUpDays]
}

type WipLockUpDays {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matters: Int
  wipLockUpDaysAmount: Decimal
}

type FutureSettlements {
  "Unique Identifier"
  id: Int!
  nextMonth: FutureSettlementsGrouping
  nextSixMonths: FutureSettlementsGrouping
  nextThreeYears: FutureSettlementsGrouping
  nextTwelveMonths: FutureSettlementsGrouping
  previousMonth: FutureSettlementsGrouping
  thisMonth: FutureSettlementsGrouping
  thisWeek: FutureSettlementsGrouping
}

type FutureSettlementsGrouping {
  "Unique Identifier"
  id: Int!
  settlements: [FutureSettlement]
  summaries: Summary
}

type FutureSettlement {
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  matters: Int
  price: Decimal
}

type NewMattersByPeriods {
  currentPeriodTotalCount: MattersOpened
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  newMattersByPeriod: [NewMattersByPeriod]
  previousPeriodTotalCount: Int
}

type NewMattersByPeriod {
  count: Int
  estimate: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type NewMatterVsAverageByMonth {
  "Unique Identifier"
  id: Int!
  lastThreeYearsNewMatterCount: [MatterOpenedByMonth]
  mattersOpenedCountTotal: MattersOpened
  newMatterCount: [MatterOpenedByMonth]
  previousYearMattersOpenedCountTotal: MattersOpened
}

type MattersClosedInLastTwelveMonths {
  "Unique Identifier"
  id: Int!
  mattersClosedInLastTwelveMonth: [MatterOpenedByMonth]
  totalCount: Int
}

type AverageBilledFees {
  averageBilledFee: [AverageBilledFee]
  averageBilledFeesPerMatter: Decimal
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type AverageFeeEstimates {
  averageFeeEstimate: [AverageFeeEstimate]
  currentMatterFeeEstimateDetails: CurrentMatterFeeEstimateDetails
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
}

type AverageFeeEstimate {
  amount: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type CurrentMatterFeeEstimateDetails {
  avgFeeEstimatePerMatter: Decimal
  "Unique Identifier"
  id: Int!
  mattersCount: Int
  mattersWithNoEstimate: Int
  mattersWithNoEstimateBilledFees: Decimal
}

type BilledFeesVsEstimates {
  billedFeeVsEstimate: [BilledFeeVsEstimate]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  matterBilledFeeAndEstimate: MatterBilledFeeAndEstimate
}

type BilledFeeVsEstimate {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  totalEstimatedCosts: Decimal
  totalFeesBilled: Decimal
}

type MatterFeesVsEstimate {
  exceedingEightyFive: Int
  exceedingHundred: Int
  exceedingSixty: Int
  "Unique Identifier"
  id: Int!
  lessThanSixty: Int
  mattersCount: Int
  mattersWithNoEstimate: Int
  mattersWithNoEstimateBilledFee: Decimal
  mattersWithNoEstimateUnBilledFee: Decimal
}

type NewMattersInLastTwelveMonths {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  mattersOpenedCountTotal: MattersOpened
  newMattersInLastTwelveMonth: [NewMattersInLastTwelveMonth]
  previousYearMattersOpenedCountTotal: MattersOpened
}

type NewMattersInLastTwelveMonth {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  lastTwelveMonthsCount: Int
  lastTwelveMonthsEstimate: Decimal
  previousTwelveMonthsCount: Int
  previousTwelveMonthsEstimate: Decimal
}

type MatterActivityData {
  closedMattersCount: Int!
  currentMattersCount: Int!
  "Unique Identifier"
  id: Int!
  matterActivity: matterActivity
}

type matterActivity {
  from31To60: Int
  from61To90: Int
  greaterThan90: Int
  "Unique Identifier"
  id: Int!
  lessThan30: Int
}

type MattersWithoutTrust {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  matterWithoutTrust: [MatterWithoutTrust]
  trustMatterTotal: TrustMatterTotal
}

type MatterWithoutTrust {
  count: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type TrustMatterTotal {
  "Unique Identifier"
  id: Int!
  mattersWithoutTrust: Int
  mattersWithTrust: Int
}

type PipelineVsMatterActivity {
  currentMatterEstimateDetails: CurrentMatterEstimateDetails
  "Unique Identifier"
  id: Int!
  matterActivity: matterActivity
  matterPipeline: MatterPipeline
}

type MatterPipeline {
  from31To60Fees: Decimal
  from61To90Fees: Decimal
  greaterThan90Fees: Decimal
  "Unique Identifier"
  id: Int!
  lessThan30Fees: Decimal
}

type ClientExposure {
  exposure: [Exposure]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  total: Decimal
}

type Exposure {
  debtors: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matters: Int
  total: Decimal
  unbilledDisbursements: Decimal
  unbilledFees: Decimal
}

type TopReferrersByPeriod {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  referrerByPeriod: [ReferrerByPeriod]
  referrerPeriodTotalCount: ReferrerPeriodTotalCount
}

type ReferrerByPeriod {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  lastPeriodCount: Decimal
  previousPeriodCount: Decimal
}

type ReferrerPeriodTotalCount {
  "Unique Identifier"
  id: Int!
  lastPeriodTotalCount: Decimal
  previousPeriodTotalCount: Decimal
}

enum LeadsPeriod {
  TWELVE_MONTHS
  NINETY_DAYS
  THIRTY_DAYS
  SIXTY_DAYS
  TwelveMonths
  NinetyDays
  ThirtyDays
  SixtyDays
}

type AgedUnbilledFees {
  current: Decimal
  "Unique Identifier"
  id: Int!
  ninetyDays: Decimal
  sixtyDays: Decimal
  thirtyDays: Decimal
  total: Decimal
}

type MatterDurationsByCategoryOrTypeType {
  "Unique Identifier"
  id: Int!
  matterCategoryWithAllMatters: MatterDurationByCategoryOrType
  matterCategoryWithClosedMatters: MatterDurationByCategoryOrType
  matterCategoryWithCurrentMatters: MatterDurationByCategoryOrType
  matterTypeWithAllMatters: MatterDurationByCategoryOrType
  matterTypeWithClosedMatters: MatterDurationByCategoryOrType
  matterTypeWithCurrentMatters: MatterDurationByCategoryOrType
}

type MatterDurationByCategoryOrType {
  averageDuration: Int
  averageMatterDuration: [AverageMatterDuration]
  "Unique Identifier"
  id: Int!
}

type AverageMatterDuration {
  avgDays: Int
  count: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type DueDates {
  dueDatesByPersonActing: DueDatesByPerson
  dueDatesByPersonAssisting: DueDatesByPerson
  dueDatesByPersonResponsible: DueDatesByPerson
  "Unique Identifier"
  id: Int!
}

type DueDatesByPerson {
  dueDatesByPersonAll: DueDatesByPeriod
  dueDatesByPersonNextSevenDays: DueDatesByPeriod
  dueDatesByPersonNextThirtyDays: DueDatesByPeriod
  dueDatesByPersonOverdue: DueDatesByPeriod
  dueDatesByPersonToday: DueDatesByPeriod
  "Unique Identifier"
  id: Int!
}

type DueDatesByPeriod {
  dueDatesByGroup: [DueDatesByGroup]
  "Unique Identifier"
  id: Int!
  totalDueDatesCount: Int
}

type DueDatesByGroup {
  dueDatesCount: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
  mattersCount: Int
}

type DueDatesOverview {
  dueDatesOverviewByGroup: [DueDatesOverviewByGroup]
  "Unique Identifier"
  id: Int!
  totalDueDatesCount: Int
}

type DueDatesOverviewByGroup {
  dueDatesCount: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matterCount: Int
}

type TrustBalances {
  balances: [trustBalanceType]
  "Unique Identifier"
  id: Int!
  total: Decimal
}

type trustBalanceType {
  balance: Decimal
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  matters: Int
}

type CostAgreementOutstanding {
  costAgreement: [CostAgreement]
  "Unique Identifier"
  id: Int!
  total: Int
}

type CostAgreement {
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  matters: Int
}

type ClosedMattersByFeeEarner {
  closedMattersByFeeEarnerLastMonth: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerLastWeek: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerThisMonth: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerThisWeek: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerToday: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerYearToDate: ClosedMattersByFeeEarnerByPeriod
  closedMattersByFeeEarnerYesterday: ClosedMattersByFeeEarnerByPeriod
  "Unique Identifier"
  id: Int!
}

type ClosedMattersByFeeEarnerByPeriod {
  closedMattersByFeeEarnerGrouped: [ClosedMattersByFeeEarnerGrouped]
  "Unique Identifier"
  id: Int!
  total: Int
}

type ClosedMattersByFeeEarnerGrouped {
  count: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type TrustFundsAvailable {
  "Unique Identifier"
  id: Int!
  summary: TrustFundsAvailableSummary
  trustFundsAvailableByClient: [trustFunds]
}

type trustFunds {
  debtors: Decimal
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  trustAmount: Decimal
}

type TrustFundsAvailableSummary {
  "Unique Identifier"
  id: Int!
  totalDebtors: Decimal
  totalTrustAmount: Decimal
}

type CombinedNewMattersByCategory {
  combinedNewMattersByCategoryLast12Months: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryLast30Days: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryLast7Days: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryLast90Days: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryMonthToDate: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryPreviousMonth: CombinedNewMattersByPeriod
  combinedNewMattersByCategoryYearToDate: CombinedNewMattersByPeriod
  "Unique Identifier"
  id: Int!
}

type CombinedNewMattersByPeriod {
  combinedNewMatters: [CombinedNewMatters]
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  mattersOpenedCountTotal: MattersOpened
  previousYearMattersOpenedCountTotal: MattersOpened
}

type CombinedNewMatters {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  lastCount: Int
  lastEstimate: Decimal
  previousCount: Int
  previousEstimate: Decimal
}

type MattersByCountry {
  deadMatterCountries: [MatterCountries]
  deadMattersCount: Int
  "Unique Identifier"
  id: Int!
  liveMatterCountries: [MatterCountries]
  liveMattersCount: Int
  totalMattersCount: Int
}

type MatterCountries {
  country: String
  countryStatus: [CountryStatus]
  countryTotalCount: Int
  "Unique Identifier"
  id: Int!
}

type CountryStatus {
  count: Int
  description: String
  "Unique Identifier"
  id: Int!
}

type FutureSettlementsByPriceChart {
  "Unique Identifier"
  id: Int!
  nextMonth: FutureSettlementsGrouping
  nextSixMonths: FutureSettlementsGrouping
  nextThreeYears: FutureSettlementsGrouping
  nextTwelveMonths: FutureSettlementsGrouping
  previousMonth: FutureSettlementsGrouping
  thisMonth: FutureSettlementsGrouping
  thisWeek: FutureSettlementsGrouping
}

type CurrentMattersByAustralianState {
  currentMattersCount: Int
  deadMattersCount: Int
  "Unique Identifier"
  id: Int!
  matterByAustralianStateGrouped: [MatterByAustralianStateGrouped]
  matterStates: [MatterStates]
  totalMattersCount: Int
  totalMattersWithoutState: Int
}

type MatterByAustralianStateGrouped {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  mattersCount: Int
  type: String
}

type MatterStates {
  "Unique Identifier"
  id: Int!
  state: String
  stateType: [StateType]
}

type StateType {
  count: Int
  description: String
  "Unique Identifier"
  id: Int!
}

type CurrentMattersByUsState {
  currentMatters: Int
  deadMatters: Int
  "Unique Identifier"
  id: Int!
  mattersByUsStates: [MattersByUsStates]
  matterStates: [MatterStates]
  totalMatters: Int
  totalMattersWithoutState: Int
}

type MattersByUsStates {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  matters: Int
  type: String
}

type lead {
  averageDaysLeadFollowUpByLawyer(minimumEnquiries: Int entityType: Int entityGuid: String responsibility: Int include: Boolean): AverageDaysLeadFollowUpByLawyer
  enquiriesByGroup(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): enquiriesByGroupType
  "Unique Identifier"
  id: Int!
  leadsConversionInLastPeriod(period: LeadsPeriod minimumEnquiries: Int entityType: Int entityGuid: String responsibility: Int include: Boolean): LeadsConversionInLastPeriod
  leadsNotProceedingInLastPeriod(period: LeadsPeriod minimumEnquiries: Int entityType: Int entityGuid: String responsibility: Int include: Boolean): LeadsNotProceedingInLastPeriod
  matterBilling(entityType: Int entityGuid: String responsibility: Int include: Boolean): MatterBilling
  newLeadsInLast12Months(entityType: Int entityGuid: String responsibility: Int include: Boolean): NewLeadsInLast12Months
  newLeadsInLast12MonthsByGroup(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): NewLeadsInLast12MonthsByGroup
  newLeadsInLast30DaysByGroup(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): NewLeadsInLast30DaysByGroup
  newLeadsInLast7Days(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): NewLeadsInLast7Days
  newLeadsInLast90DaysByGroup(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): NewLeadsInLast90DaysByGroup
  salesPipelines(groupBy: NewLeadsGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): salesPipelinesType
}

type AverageDaysLeadFollowUpByLawyer {
  groupedByCount: Int
  "Unique Identifier"
  id: Int!
  leadFollowUpAverage: [LeadFollowUpAverage]
  top10Average: Decimal
  totalAverage: Decimal
}

type LeadFollowUpAverage {
  "Unique Identifier"
  id: Int!
  staffName: String
  timeToRespond: Decimal
  totalCount: Int
}

type NewLeadsInLast12MonthsByGroup {
  groupedByCount: Int
  groupedLeadsForLastPeriod: [GroupedLeadsForLastPeriod]
  "Unique Identifier"
  id: Int!
  leadsPeriodTotalCount: LeadsPeriodTotalCount
}

type GroupedLeadsForLastPeriod {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  lastPeriodCount: Int
  lastPeriodRate: Int
  previousPeriodCount: Int
  previousPeriodRate: Int
}

type LeadsPeriodTotalCount {
  "Unique Identifier"
  id: Int!
  lastPeriodTotalCount: Int
  lastPeriodTotalRate: Int
  previousPeriodTotalCount: Int
  previousPeriodTotalRate: Int
}

enum NewLeadsGroupBy {
  SOURCE
  AREA_OF_LAW
  ASSIGNEE
  LOCATION
  QUALITY
  LIKELIHOOD_TO_PROCEED
  Source
  AreaOfLaw
  Assignee
  Location
  Quality
  LikelihoodToProceed
}

type NewLeadsInLast30DaysByGroup {
  groupedByCount: Int
  groupedLeadsForLast30Days: [GroupedLeadsForLast30Days]
  "Unique Identifier"
  id: Int!
  leads30DaysTotalCount: Leads30DaysTotalCount
}

type GroupedLeadsForLast30Days {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  last30DaysCount: Int
  previous30DaysCount: Int
}

type Leads30DaysTotalCount {
  "Unique Identifier"
  id: Int!
  last30DaysTotalCount: Int
  previous30DaysTotalCount: Int
}

type NewLeadsInLast7Days {
  "Unique Identifier"
  id: Int!
  newLeadsInLast7DaysByCreationDate: NewLeadsInLast7DaysByGroup
  newLeadsInLast7DaysByInitialDate: NewLeadsInLast7DaysByGroup
}

type NewLeadsInLast7DaysByGroup {
  groupedByCount: Int
  groupedLeadsForLast7Days: [GroupedLeadsForLast7Days]
  "Unique Identifier"
  id: Int!
  leads7DaysTotalCount: Leads7DaysTotalCount
}

type GroupedLeadsForLast7Days {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  last7DaysCount: Int
  previous7DaysCount: Int
}

type Leads7DaysTotalCount {
  "Unique Identifier"
  id: Int!
  last7DaysTotalCount: Int
  previous7DaysTotalCount: Int
}

type NewLeadsInLast90DaysByGroup {
  groupedByCount: Int
  groupedLeadsForLast90Days: [GroupedLeadsForLast90Days]
  "Unique Identifier"
  id: Int!
  leads90DaysTotalCount: Leads90DaysTotalCount
}

type GroupedLeadsForLast90Days {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  last90DaysCount: Int
  previous90DaysCount: Int
}

type Leads90DaysTotalCount {
  "Unique Identifier"
  id: Int!
  last90DaysTotalCount: Int
  previous90DaysTotalCount: Int
}

type NewLeadsInLast12Months {
  "Unique Identifier"
  id: Int!
  newLeadsInLast12MonthsByPeriod: NewLeadsInLast12MonthsByPeriod
}

type NewLeadsInLast12MonthsByPeriod {
  "Unique Identifier"
  id: Int!
  leadsPeriodCreationDateTotalCount: LeadsPeriodTotalCount
  leadsPeriodInitialDateTotalCount: LeadsPeriodTotalCount
  newLeads: [LeadsByMonth]
  trend: [LeadsByMonth]
}

type LeadsByMonth {
  createdDateCount: Float
  "Unique Identifier"
  id: Int!
  initialDateCount: Float
  month: String
}

type LeadsNotProceedingInLastPeriod {
  groupedByCount: Int
  groupedLeadsForLastPeriod: [GroupedLeadsForLastPeriod]
  "Unique Identifier"
  id: Int!
  leadsPeriodTotalCount: LeadsPeriodTotalCount
}

type LeadsConversionInLastPeriod {
  groupedByCount: Int
  groupedLeadsForLastPeriod: [GroupedLeadsForLastPeriod]
  "Unique Identifier"
  id: Int!
  leadsPeriodTotalCount: LeadsPeriodTotalCount
}

type salesPipelinesType {
  groupedSalesPipeline: salesPipelineType
  groupedSalesPipelineEstimatedFees: salesPipelineType
  "Unique Identifier"
  id: Int!
  openEnquiryCount: Int
}

type salesPipelineType {
  groupedSalesPipelines: [GroupedSalesPipelines]
  "Unique Identifier"
  id: Int!
  totalValue: Int
}

type GroupedSalesPipelines {
  enquiryCount: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
  value: Decimal
}

type enquiriesByGroupType {
  groupedEnquiries: [GroupedEnquiries]
  "Unique Identifier"
  id: Int!
  openEnquiriesCount: Int
  openEnquiryCountWithoutFeeEstimate: Int
}

type GroupedEnquiries {
  count: Int
  estimatedFees: Decimal
  "Unique Identifier"
  id: Int!
  rating: Int
}

type MatterBilling {
  "Unique Identifier"
  id: Int!
  matterBillingByAssignees: MatterBillingByAssignees
  matterBillingByLocation: matterBillingByLocation
  matterBillingBySource: MatterBillingBySource
  matterBillingTotalAll: MatterBillingTotal
  matterBillingTotalLast12Months: MatterBillingTotal
  matterBillingTotalLast3Months: MatterBillingTotal
  matterBillingTotalLast6Months: MatterBillingTotal
  mtterBillingByAreaOfLaw: MatterBillingByAreaOfLaw
}

type MatterBillingBySource {
  "Unique Identifier"
  id: Int!
  matterBillingBySourceAll: MatterBillingByPeriod
  matterBillingBySourceLast12Months: MatterBillingByPeriod
  matterBillingBySourceLast3Months: MatterBillingByPeriod
  matterBillingBySourceLast6Months: MatterBillingByPeriod
}

type MatterBillingByPeriod {
  "Unique Identifier"
  id: Int!
  matterBillingByGroup: [MatterBillingByGroup]
}

type MatterBillingByGroup {
  enquiriesCount: Int
  feesBilled: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type MatterBillingByAssignees {
  "Unique Identifier"
  id: Int!
  matterBillingByAssigneesAll: MatterBillingByPeriod
  matterBillingByAssigneesLast12Months: MatterBillingByPeriod
  matterBillingByAssigneesLast3Months: MatterBillingByPeriod
  matterBillingByAssigneesLast6Months: MatterBillingByPeriod
}

type matterBillingByLocation {
  "Unique Identifier"
  id: Int!
  matterBillingByLocationAll: MatterBillingByPeriod
  matterBillingByLocationLast12Months: MatterBillingByPeriod
  matterBillingByLocationLast3Months: MatterBillingByPeriod
  matterBillingByLocationLast6Months: MatterBillingByPeriod
}

type MatterBillingByAreaOfLaw {
  "Unique Identifier"
  id: Int!
  matterBillingByAreaOfLawAll: MatterBillingByPeriod
  matterBillingByAreaOfLawLast12Months: MatterBillingByPeriod
  matterBillingByAreaOfLawLast3Months: MatterBillingByPeriod
  matterBillingByAreaOfLawLast6Months: MatterBillingByPeriod
}

type MatterBillingTotal {
  enquiriesWonCount: Int
  "Unique Identifier"
  id: Int!
  totalBilling: Decimal
}

type invoice {
  "Unique Identifier"
  id: Int!
  invoiceFeesBilledInLast14Days(entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledInLast14Days
  invoiceFeesBilledInLastFinancialYear(entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledInLastFinancialYear
  invoiceFeesBilledInLastMonth(entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledInLastMonth
  invoiceFeesBilledInLastTwelveMonth(filter: String showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledInLastTwelveMonths
  invoiceFeesBilledInLastYear(groupBy: InvoiceGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledInLastYear
  invoiceFeesBilledMonthToDate(groupBy: InvoiceGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoiceFeesBilledMonthToDate
  invoicesInDraft(groupBy: InvoiceGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): InvoicesInDraft
}

type InvoiceFeesBilledInLastTwelveMonths {
  "Unique Identifier"
  id: Int!
  invoiceByMonth: [InvoiceByMonth]
  invoiceTwelveMonthsTotalCount: InvoiceTwelveMonthsTotalCount
  trend: [InvoiceByMonth]
}

type InvoiceByMonth {
  count: Float
  "Unique Identifier"
  id: Int!
  month: String
  year: String
}

type InvoiceFeesBilledInLastFinancialYear {
  "Unique Identifier"
  id: Int!
  invoiceByMonth: [InvoiceByMonth]
  invoiceFinancialYearTotalCount: InvoiceFinancialYearTotalCount
  trend: [InvoiceByMonth]
}

type InvoiceFinancialYearTotalCount {
  "Unique Identifier"
  id: Int!
  lastFinancialYearTotalCount: Decimal
  previousFinancialYearTotalCount: Decimal
}

type InvoiceFeesBilledInLast14Days {
  "Unique Identifier"
  id: Int!
  invoice14DaysTotalCount: Invoice14DaysTotalCount
  invoiceByDate: [InvoiceByDate]
  trend: [InvoiceByDate]
}

type InvoiceByDate {
  count: Float
  date: Date
  "Unique Identifier"
  id: Int!
}

type Invoice14DaysTotalCount {
  "Unique Identifier"
  id: Int!
  last14DaysTotalCount: Decimal
  previous14DaysTotalCount: Decimal
}

type InvoiceFeesBilledInLastMonth {
  "Unique Identifier"
  id: Int!
  invoiceByDate: [InvoiceByDate]
  invoiceMonthTotalCount: InvoiceMonthTotalCount
  previousInvoiceByDate: [InvoiceByDate]
  previousTrend: [InvoiceByDate]
  trend: [InvoiceByDate]
}

type InvoiceMonthTotalCount {
  currentMonthTotalCount: Decimal
  "Unique Identifier"
  id: Int!
  previousMonthTotalCount: Decimal
}

type InvoiceFeesBilledInLastYear {
  groupedByCount: Int
  groupedInvoiceForLastYear: [GroupedInvoiceForLastYear]
  "Unique Identifier"
  id: Int!
  invoiceYearTotalCount: InvoiceYearTotalCount
}

type GroupedInvoiceForLastYear {
  groupedBy: String
  "Unique Identifier"
  id: Int!
  lastYearCount: Decimal
  previousYearCount: Decimal
}

type InvoiceYearTotalCount {
  "Unique Identifier"
  id: Int!
  lastYearTotalCount: Decimal
  previousYearTotalCount: Decimal
}

enum InvoiceGroupBy {
  PERSON_ACTING
  PERSON_RESPONSIBLE
  MATTER_TYPE
  MATTER_CATEGORY
  PROPERTY_TYPE
  REPORTING_GROUP
  MatterCategory
  MatterType
  PersonActing
  PersonResponsible
  PropertyType
  ReportingGroup
}

type InvoiceFeesBilledMonthToDate {
  groupedByCount: Int
  groupedInvoiceForMonth: [groupedInvoiceForMonth]
  "Unique Identifier"
  id: Int!
  invoiceMonthToDateTotalCount: InvoiceMonthToDateTotalCount
  previousGroupedByCount: Int
  previousGroupedInvoiceForMonth: [groupedInvoiceForMonth]
  previousInvoiceMonthToDateTotalCount: InvoiceMonthToDateTotalCount
}

type groupedInvoiceForMonth {
  count: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type InvoiceMonthToDateTotalCount {
  "Unique Identifier"
  id: Int!
  totalCount: Decimal
}

type InvoicesInDraft {
  groupedByCount: Int
  groupedDraftInvoice: [groupedDraftInvoice]
  "Unique Identifier"
  id: Int!
  invoiceInDraftTotalCount: InvoiceInDraftTotalCount
}

type groupedDraftInvoice {
  count: Decimal
  groupedBy: String
  "Unique Identifier"
  id: Int!
}

type InvoiceInDraftTotalCount {
  "Unique Identifier"
  id: Int!
  totalCount: Decimal
}

type time {
  feesRecordedInPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedInPeriod
  feesRecordedWithBudgetInPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedWithBudgetInPeriod
  feesRecordedWithBudgetYearToDate(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedWithBudgetYearToDate
  feesRecordedWithBudgetYearToDateAggregate(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedWithBudgetYearToDate
  feesRecordedYearToDate(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedYearToDate
  feesRecordedYearToDateAggregate(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesRecordedYearToDate
  futureFees(entityType: Int entityGuid: String responsibility: Int include: Boolean): FutureFees
  hoursRecordedByStaffMembers(groupBy: MatterGroupBy showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): HoursRecordedByStaffMembers
  "Unique Identifier"
  id: Int!
  nonBillableTimesByActivity(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): NonBillableTimesByActivity
  nonBillableTimesByStaff(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): NonBillableTimesByStaff
  timeAndFeesRecordedInPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeAndFeesRecordedInPeriod
  timeRecordedInPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedInPeriod
  timeRecordedWithBudgetInPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedWithBudgetInPeriod
  timeRecordedWithBudgetYearToDate(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedWithBudgetYearToDate
  timeRecordedWithBudgetYearToDateAggregate(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedWithBudgetYearToDate
  timeRecordedYearToDate(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedYearToDate
  timeRecordedYearToDateAggregate(entityType: Int entityGuid: String responsibility: Int include: Boolean): TimeRecordedYearToDate
}

type FeesRecordedInPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: TimesheetInPeriod
  last14Days: TimesheetInPeriod
  last30Days: TimesheetInPeriod
  lastWeek: TimesheetInPeriod
}

type TimesheetInPeriod {
  financialYearToPreviousMonthSummary: TimesheetPeriodSummary
  "Unique Identifier"
  id: Int!
  summary: TimesheetPeriodSummary
  timesheetGrouping: [TimesheetGrouping]
}

type TimesheetPeriodSummary {
  budget: Decimal
  "Unique Identifier"
  id: Int!
  lastPeriodTotal: Decimal
  percentage: Decimal
  previousPeriodTotal: Decimal
  variance: Decimal
}

type TimesheetGrouping {
  group: String
  "Unique Identifier"
  id: Int!
  value: Decimal
}

type TimeRecordedInPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: TimesheetTimeInPeriod
  last14Days: TimesheetTimeInPeriod
  last30Days: TimesheetTimeInPeriod
  lastWeek: TimesheetTimeInPeriod
}

type TimesheetTimeInPeriod {
  financialYearToPreviousMonthSummary: TimesheetPeriodSummary
  "Unique Identifier"
  id: Int!
  lastPeriodTotals: TimesheetTimePeriodTotal
  summary: TimesheetPeriodSummary
  timesheetTimeGrouping: [TimesheetTimeGrouping]
}

type TimesheetTimeGrouping {
  billed: Decimal
  group: String
  "Unique Identifier"
  id: Int!
  unbilled: Decimal
  valueAmount: Decimal
}

type TimesheetTimePeriodTotal {
  billedTotal: Decimal
  "Unique Identifier"
  id: Int!
  periodTotal: Decimal
  unbilledTotal: Decimal
}

type FeesRecordedYearToDate {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: TimesheetInPeriod
  lastMonth: TimesheetInPeriod
  previousFinancialYear: TimesheetInPeriod
  previousMonth: TimesheetInPeriod
}

type TimeRecordedYearToDate {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: TimesheetTimeInPeriod
  lastMonth: TimesheetTimeInPeriod
  previousFinancialYear: TimesheetTimeInPeriod
  previousMonth: TimesheetTimeInPeriod
}

type FeesRecordedWithBudgetInPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: TimesheetWithBudgetInPeriod
  last14Days: TimesheetWithBudgetInPeriod
  last30Days: TimesheetWithBudgetInPeriod
  lastWeek: TimesheetWithBudgetInPeriod
}

type TimesheetWithBudgetInPeriod {
  financialYearToPreviousMonthSummary: TimesheetPeriodSummary
  "Unique Identifier"
  id: Int!
  summary: TimesheetPeriodSummary
  timesheetWithBudgetGrouping: [TimesheetWithBudgetGrouping]
}

type TimesheetWithBudgetGrouping {
  budget: Decimal
  group: String
  "Unique Identifier"
  id: Int!
  value: Decimal
}

type TimeRecordedWithBudgetInPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: TimesheetTimeWithBudgetInPeriod
  last14Days: TimesheetTimeWithBudgetInPeriod
  last30Days: TimesheetTimeWithBudgetInPeriod
  lastWeek: TimesheetTimeWithBudgetInPeriod
}

type TimesheetTimeWithBudgetInPeriod {
  financialYearToPreviousMonthSummary: TimesheetPeriodSummary
  "Unique Identifier"
  id: Int!
  summary: TimesheetPeriodSummary
  timesheetTimeWithBudgetGrouping: [TimesheetTimeWithBudgetGrouping]
}

type TimesheetTimeWithBudgetGrouping {
  billed: Decimal
  budget: Decimal
  group: String
  "Unique Identifier"
  id: Int!
  unbilled: Decimal
  valueAmount: Decimal
}

type FeesRecordedWithBudgetYearToDate {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: TimesheetWithBudgetInPeriod
  lastMonth: TimesheetWithBudgetInPeriod
  previousFinancialYear: TimesheetWithBudgetInPeriod
  previousMonth: TimesheetWithBudgetInPeriod
}

type TimeRecordedWithBudgetYearToDate {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: TimesheetTimeWithBudgetInPeriod
  lastMonth: TimesheetTimeWithBudgetInPeriod
  previousFinancialYear: TimesheetTimeWithBudgetInPeriod
  previousMonth: TimesheetTimeWithBudgetInPeriod
}

type TimeAndFeesRecordedInPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: TimeAndFeesInPeriod
  last14Days: TimeAndFeesInPeriod
  last30Days: TimeAndFeesInPeriod
  lastWeek: TimeAndFeesInPeriod
}

type TimeAndFeesInPeriod {
  "Unique Identifier"
  id: Int!
  previousPeriodSummary: TimeAndFeesPreviousPeriodSummaryType
  summary: TimeAndFeesSummary
  timeAndFeesPeriodItem: [TimeAndFeesPeriodItem]
}

type TimeAndFeesPeriodItem {
  billedTime: Decimal
  fees: Decimal
  group: String
  "Unique Identifier"
  id: Int!
  unbilledTime: Decimal
}

type TimeAndFeesSummary {
  billed: Decimal
  "Unique Identifier"
  id: Int!
  totalFees: Decimal
  totalTime: Decimal
  unbilled: Decimal
}

type TimeAndFeesPreviousPeriodSummaryType {
  "Unique Identifier"
  id: Int!
  previousTotalFees: Decimal
  previousTotalTime: Decimal
}

type HoursRecordedByStaffMembers {
  "Unique Identifier"
  id: Int!
  lastMonth: HoursRecordedByStaffMembersGrouping
  lastWeek: HoursRecordedByStaffMembersGrouping
  thisMonth: HoursRecordedByStaffMembersGrouping
  thisWeek: HoursRecordedByStaffMembersGrouping
  today: HoursRecordedByStaffMembersGrouping
  yesterday: HoursRecordedByStaffMembersGrouping
}

type HoursRecordedByStaffMembersGrouping {
  hoursRecorded: [HoursRecordedByStaffMember]
  "Unique Identifier"
  id: Int!
  summary: HoursRecordedByStaffMembersSummaryType
}

type HoursRecordedByStaffMember {
  format: String
  friday: Decimal
  grouping: String
  hours: Decimal
  "Unique Identifier"
  id: Int!
  monday: Decimal
  saturday: Decimal
  sunday: Decimal
  thursday: Decimal
  tuesday: Decimal
  valueAmount: Decimal
  wednesday: Decimal
}

type HoursRecordedByStaffMembersSummaryType {
  "Unique Identifier"
  id: Int!
  total: Decimal
  totalFees: Decimal
}

type NonBillableTimesByActivity {
  "Unique Identifier"
  id: Int!
  previousMonth: NonBillableTimesByCategory
  previousYear: NonBillableTimesByCategory
  thisMonth: NonBillableTimesByCategory
  thisYear: NonBillableTimesByCategory
}

type NonBillableTimesByCategory {
  financialYearToPreviousMonth: NonBillaTimesSummary
  "Unique Identifier"
  id: Int!
  summary: NonBillaTimesSummary
  times: [NonBillableTime]
}

type NonBillableTime {
  format: String
  grouping: String
  hours: Decimal
  "Unique Identifier"
  id: Int!
  timelines: Int
}

type NonBillaTimesSummary {
  "Unique Identifier"
  id: Int!
  lastPeriodTotal: Decimal
  previousPeriodTotal: Decimal
}

type NonBillableTimesByStaff {
  "Unique Identifier"
  id: Int!
  previousMonth: NonBillableTimesByCategory
  previousYear: NonBillableTimesByCategory
  thisMonth: NonBillableTimesByCategory
  thisYear: NonBillableTimesByCategory
}

type FutureFees {
  "Unique Identifier"
  id: Int!
  nextMonth: FutureFeesTimes
  nextSixMonths: FutureFeesTimes
  nextThreeYears: FutureFeesTimes
  nextTwelveMonths: FutureFeesTimes
  previousMonth: FutureFeesTimes
  thisMonth: FutureFeesTimes
  thisWeek: FutureFeesTimes
}

type FutureFeesTimes {
  fees: [FutureFee]
  "Unique Identifier"
  id: Int!
  summary: FutureFeesSummary
}

type FutureFee {
  fees: Decimal
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  timelines: Int
}

type FutureFeesSummary {
  "Unique Identifier"
  id: Int!
  totalFees: Decimal
  totalTimelines: Int
}

type Fees {
  billingRealisation(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): BillingRealisation
  clientBilling(showAllRecords: Boolean entityType: Int entityGuid: String responsibility: Int include: Boolean): ClientBilling
  collectionRate(entityType: Int entityGuid: String responsibility: Int include: Boolean): CollectionRate
  feesBilled(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilled
  feesBilledByPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledByPeriod
  feesBilledCumulative(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledCumulative
  feesBilledCumulativeVsBudget(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledCumulativeVsBudget
  feesBilledVsBudget(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledVsBudget
  feesBilledVsBudgetByFeeEarner(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledVsBudgetByFeeEarner
  feesBilledVsBudgetByPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesBilledVsBudgetByPeriod
  feesCollected(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollected
  feesCollectedByPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollectedByPeriod
  feesCollectedCumulative(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollectedCumulative
  feesCollectedCumulativeVsBudget(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollectedCumulativeVsBudget
  feesCollectedVsBudget(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollectedVsBudget
  feesCollectedVsBudgetByPeriod(entityType: Int entityGuid: String responsibility: Int include: Boolean): FeesCollectedVsBudgetByPeriod
  "Unique Identifier"
  id: Int!
  yearBudgets(entityType: Int entityGuid: String responsibility: Int include: Boolean): YearBudgets
}

type FeesBilledVsBudget {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesBilledInPeriod
  lastMonth: FeesBilledInPeriod
  previousFinancialYear: FeesBilledInPeriod
  previousMonth: FeesBilledInPeriod
}

type FeesBilledInPeriod {
  feesBilledVsBudgetGrouping: [FeesBilledVsBudgetGrouping]
  financialYearToPreviousMonthSummary: FeesBilledInPeriodSummary
  "Unique Identifier"
  id: Int!
  summary: FeesBilledInPeriodSummary
}

type FeesBilledInPeriodSummary {
  budget: Decimal
  "Unique Identifier"
  id: Int!
  lastPeriodTotal: Decimal
  percentage: Decimal
  previousPeriodTotal: Decimal
  variance: Decimal
}

type FeesBilledGrouping {
  group: String
  "Unique Identifier"
  id: Int!
  value: Decimal
}

type FeesBilledVsBudgetByPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: FeesBilledInPeriod
  last14Days: FeesBilledInPeriod
  last30Days: FeesBilledInPeriod
  lastWeek: FeesBilledInPeriod
}

type FeesBilled {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesBilledInPeriod
  lastMonth: FeesBilledInPeriod
  previousFinancialYear: FeesBilledInPeriod
  previousMonth: FeesBilledInPeriod
}

type FeesBilledCumulativeVsBudget {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesBilledInPeriod
  lastMonth: FeesBilledInPeriod
  previousFinancialYear: FeesBilledInPeriod
  previousMonth: FeesBilledInPeriod
}

type FeesBilledCumulative {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesBilledInPeriod
  lastMonth: FeesBilledInPeriod
  previousFinancialYear: FeesBilledInPeriod
  previousMonth: FeesBilledInPeriod
}

type FeesBilledByPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: FeesBilledInPeriod
  last14Days: FeesBilledInPeriod
  last30Days: FeesBilledInPeriod
  lastWeek: FeesBilledInPeriod
}

type FeesCollectedVsBudget {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesCollectedInPeriod
  lastMonth: FeesCollectedInPeriod
  previousFinancialYear: FeesCollectedInPeriod
  previousMonth: FeesCollectedInPeriod
}

type FeesCollectedInPeriod {
  feesBudgetGrouping: [FeesCollectedGrouping]
  feesCollectedGrouping: [FeesCollectedGrouping]
  financialYearToPreviousMonthSummary: FeesCollectedInPeriodSummary
  "Unique Identifier"
  id: Int!
  summary: FeesCollectedInPeriodSummary
}

type FeesCollectedInPeriodSummary {
  budget: Decimal
  "Unique Identifier"
  id: Int!
  lastPeriodTotal: Decimal
  percentage: Decimal
  previousPeriodTotal: Decimal
  variance: Decimal
}

type FeesCollectedGrouping {
  group: String
  "Unique Identifier"
  id: Int!
  value: Decimal
}

type FeesCollectedVsBudgetByPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: FeesCollectedInPeriod
  last14Days: FeesCollectedInPeriod
  last30Days: FeesCollectedInPeriod
  lastWeek: FeesCollectedInPeriod
}

type FeesCollected {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesCollectedInPeriod
  lastMonth: FeesCollectedInPeriod
  previousFinancialYear: FeesCollectedInPeriod
  previousMonth: FeesCollectedInPeriod
}

type FeesCollectedCumulativeVsBudget {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesCollectedInPeriod
  lastMonth: FeesCollectedInPeriod
  previousFinancialYear: FeesCollectedInPeriod
  previousMonth: FeesCollectedInPeriod
}

type FeesCollectedCumulative {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesCollectedInPeriod
  lastMonth: FeesCollectedInPeriod
  previousFinancialYear: FeesCollectedInPeriod
  previousMonth: FeesCollectedInPeriod
}

type FeesCollectedByPeriod {
  "Unique Identifier"
  id: Int!
  last12Months: FeesCollectedInPeriod
  last14Days: FeesCollectedInPeriod
  last30Days: FeesCollectedInPeriod
  lastWeek: FeesCollectedInPeriod
}

type BillingRealisation {
  currentFinancialYear: BillingRealisationInPeriod
  currentMonth: BillingRealisationInPeriod
  "Unique Identifier"
  id: Int!
  previousFinancialYear: BillingRealisationInPeriod
  previousMonth: BillingRealisationInPeriod
}

type BillingRealisationInPeriod {
  billingRealisationByStaff: [BillingRealisationByStaff]
  billingRealisationTotal: BillingRealisationTotal
  "Unique Identifier"
  id: Int!
}

type BillingRealisationTotal {
  "Unique Identifier"
  id: Int!
  totalFeesBilled: Decimal
  totalFeesRecorded: Decimal
  totalRealisation: Decimal
}

type BillingRealisationByStaff {
  feesBilled: Decimal
  feesRecorded: Decimal
  "Unique Identifier"
  id: Int!
  name: String
  realisation: Decimal
}

type CollectionRate {
  currentFinancialYear: CollectionRateInPeriod
  currentMonth: CollectionRateInPeriod
  "Unique Identifier"
  id: Int!
  previousFinancialYear: CollectionRateInPeriod
  previousMonth: CollectionRateInPeriod
}

type CollectionRateInPeriod {
  collectionRateByStaff: [CollectionRateByStaffType]
  collectionRateTotal: CollectionRateTotal
  "Unique Identifier"
  id: Int!
}

type CollectionRateTotal {
  "Unique Identifier"
  id: Int!
  totalCollectionRate: Decimal
  totalFeesBilled: Decimal
  totalFeesCollected: Decimal
}

type CollectionRateByStaffType {
  collectionRate: Decimal
  feesBilled: Decimal
  feesCollected: Decimal
  "Unique Identifier"
  id: Int!
  name: String
}

type ClientBilling {
  clientBillingAll: ClientBillingByPeriod
  clientBillingByLastNinetyDays: ClientBillingByPeriod
  clientBillingByLastTwelveMonths: ClientBillingByPeriod
  clientBillingByPreviousFinancialYear: ClientBillingByPeriod
  clientBillingByThisFinancialYear: ClientBillingByPeriod
  "Unique Identifier"
  id: Int!
}

type ClientBillingByPeriod {
  clientBillingByClient: [ClientBillingByClient]
  "Unique Identifier"
  id: Int!
  totalBilling: Decimal
}

type ClientBillingByClient {
  client: String
  feesBilled: Decimal
  "Unique Identifier"
  id: Int!
  invoicesCount: Int
  previousFeesBilled: Decimal
}

type YearBudgets {
  "Unique Identifier"
  id: Int!
  staffBudgets: [budget]
  summaries: summary
}

type budget {
  billableHours: Decimal
  feesBilled: Decimal
  feesCollected: Decimal
  feesRecorded: Decimal
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  nonBillableHours: Decimal
}

type summary {
  "Unique Identifier"
  id: Int!
  totalBillableHours: Decimal
  totalFeesBilled: Decimal
  totalFeesCollected: Decimal
  totalFeesRecorded: Decimal
  totalNonBillableHours: Decimal
}

type FeesBilledVsBudgetByFeeEarner {
  "Unique Identifier"
  id: Int!
  lastFinancialYear: FeesBilledInPeriod
  lastMonth: FeesBilledInPeriod
  previousFinancialYear: FeesBilledInPeriod
  previousMonth: FeesBilledInPeriod
}

type FeesBilledVsBudgetGrouping {
  billing: Decimal
  budget: Decimal
  "Unique Identifier"
  id: Int!
  name: String
}

type Tasks {
  "Unique Identifier"
  id: Int!
  taskQueue(groupBy: TaskGroupBy entityType: Int entityGuid: String responsibility: Int include: Boolean): TaskQueue
  taskQueueByCreationTimes(entityType: Int entityGuid: String responsibility: Int include: Boolean): TaskQueueByCreationTimes
}

type TaskQueue {
  "Unique Identifier"
  id: Int!
  taskQueueCombinedOrderByEffort: TaskQueueByStatus
  taskQueueCombinedOrderByTasks: TaskQueueByStatus
  taskQueueInProgressOrderByEffort: TaskQueueByStatus
  taskQueueInProgressOrderByTasks: TaskQueueByStatus
  taskQueueNotStartedOrderByEffort: TaskQueueByStatus
  taskQueueNotStartedOrderByTasks: TaskQueueByStatus
}

type TaskQueueByStatus {
  "Unique Identifier"
  id: Int!
  taskQueueByGroup: [TaskQueueByGroup]
  totalEffortCount: Int
  totalTaskCount: Int
}

type TaskQueueByGroup {
  estimatedEffortCount: Int
  groupedBy: String
  "Unique Identifier"
  id: Int!
  taskCount: String
}

enum TaskGroupBy {
  ASSIGNED_TO_NAME
  TASK_TYPE_DESCRIPTION
  AssignedToName
  TaskTypeDescription
}

type TaskQueueByCreationTimes {
  all: TaskQueueByCreationTimeGrouping
  "Unique Identifier"
  id: Int!
  lastSixMonths: TaskQueueByCreationTimeGrouping
  lastTwelveMonths: TaskQueueByCreationTimeGrouping
}

type TaskQueueByCreationTimeGrouping {
  "Unique Identifier"
  id: Int!
  summary: TaskQueueByCreationTimeSummary
  tasks: [TaskQueueByCreationTime]
}

type TaskQueueByCreationTime {
  effort: Decimal
  format: String
  grouping: String
  "Unique Identifier"
  id: Int!
  tasks: Int
}

type TaskQueueByCreationTimeSummary {
  "Unique Identifier"
  id: Int!
  totalTasks: Int
}

type MatterSummaryDrillDownListType {
  matters: [MatterSummaryDrillDown]
  recordCount: Int!
  rowCountWithoutFilters: Int
}

type MatterSummaryDrillDown {
  acting: String
  actingEmail: String
  actingID: Int
  actingPhone: String
  applicationNumber: String
  archivedDate: DateTime
  assisting: String
  assistingEmail: String
  assistingID: Int
  assistingPhone: String
  billed: Float
  billedFees: Float
  category: String
  categoryID: Int
  class: String
  client: String
  clientEmail: String
  clientPhone: String
  clientReference: String
  completionOrSettlmentDate: DateTime
  coolingOffDate: DateTime
  costAgreementReceivedDate: DateTime
  costAgreementRequired: Boolean
  country: String
  countryID: Int
  currentDebtorsBalanceIncTax: Decimal
  currentWIPBalanceExTax: Decimal
  debtors: Float
  department: String
  deposit: Decimal
  depositDueDate: DateTime
  depositPaidDate: DateTime
  earliestPriorityDate: DateTime
  estimatedCosts: Float
  exchangeDate: DateTime
  exposure: Float
  family: String
  fileLocation: String
  fileNumber: String
  fIRB: Boolean
  goodsAndServices: String
  grantNumber: String
  hearingDate: DateTime
  "Unique Identifier"
  id: Int!
  imageLocation: String
  injuryDate: DateTime
  inProgress: Boolean
  instructionDate: DateTime
  isVIP: Boolean
  lastUpdate: DateTime
  latestComment: String
  longTitle: String
  nextAction: String
  nextActionDate: DateTime
  nextDueDescription: String
  nextRenewalDate: DateTime
  ninetyDebtorsBalanceIncTax: Decimal
  ninetyWIPBalanceExTax: Decimal
  office: String
  otherSide: String
  overdueDate: DateTime
  owner: String
  percentageEstimate: Float
  price: Decimal
  proceedingsIssuedDate: DateTime
  property: String
  propertyLabel: String
  publicationDate: DateTime
  publicationNumber: String
  publishedDate: DateTime
  referrer: String
  reportingGroup: String
  responsible: String
  responsibleEmail: String
  responsibleID: Int
  responsiblePhone: String
  reviewDate: DateTime
  sixtyDebtorsBalanceIncTax: Decimal
  sixtyWIPBalanceExTax: Decimal
  stage: String
  state: String
  status: String
  subType: String
  subTypeID: Int
  sunsetOrLimitationDate: DateTime
  syncSystemID: Int
  team: String
  thirtyDebtorsBalanceIncTax: Decimal
  thirtyWIPBalanceExTax: Decimal
  title: String
  trustAccountBalance: Decimal
  trustBalance: Float
  type: String
  typeClassification: Int
  typeID: Int
  typeState: String
  unbilled: Float
  unbilledDisbursements: Float
  unbilledFees: Float
}

type MatterStatusListType {
  recordCount: Int!
  statuses: [MatterStatus]
}

type MatterStatus {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type FeatureLayoutListType {
  featureLayout: [FeatureLayout]
  recordCount: Int!
}

type FeatureLayout {
  description: String
  feature: String
  featureGuid: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  infoUrl: String
  sequence: String
  title: String
}

type FeatureLayoutConfigurationListType {
  featureLayoutConfiguration: [FeatureLayoutConfiguration]
  recordCount: Int!
}

type FeatureLayoutConfiguration {
  description: String
  feature: String
  featureGuid: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  infoUrl: String
  isHidden: Boolean
  sequence: String
  title: String
}

type FeatureSecurityListType {
  featureHierarchyJsonString: String
  featureSecurity: [FeatureSecurity]
  recordCount: Int!
}

type FeatureSecurity {
  feature: String
  featureGuid: ID
  hasAccess: Boolean
  "Unique Identifier"
  id: Int!
  isDisabled: Boolean
}

type FeatureLicenceListType {
  featureHierarchyJsonString: String
  featureLicence: [FeatureLicence]
  recordCount: Int!
}

type FeatureLicence {
  feature: String
  featureGuid: ID
  "Unique Identifier"
  id: Int!
  isDisabled: Boolean
  isLicenced: Boolean
}

type Task {
  categories("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean isKeyOpportunity: Boolean taskTypes: String clientList: String matterList: String): [TaskCategory]
  detail(guid: String): TaskDetails
  dueDates(isIncludeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean isKeyOpportunity: Boolean taskTypes: String): [DueDate]
  statuses(taskStatusType: TaskStatusEnum includeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean isKeyOpportunity: Boolean taskTypes: String clientList: String matterList: String isPersonalTask: Boolean): [TaskStatus]
  summaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String sortColumn: String sortDirection: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean taskTypes: String clientList: String matterList: String isPersonalTask: Boolean): TaskSummaryListType
  taskTypes("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean isKeyOpportunity: Boolean taskTypes: String clientList: String matterList: String): [TaskTypeEntity]
}

type TaskCategory {
  description: String
  guidId: ID
  hasTasks: Boolean
  "Unique Identifier"
  id: Int!
}

type TaskTypeEntity {
  description: String
  guidId: ID
  hasTasks: Boolean
  "Unique Identifier"
  id: Int!
  internalDescription: String
}

type TaskStatus {
  count: Int
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
  type: Int
}

enum TaskStatusEnum {
  INTERNAL
  USER
  SYSTEM
  Internal
  System
  User
}

union TaskDetails = GeneralTask | ClientTask | MatterTask | PhoneTask | FollowUpTask | ScrubEnquiryTask

type GeneralTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  "Unique Identifier"
  id: Int!
  isConfidential: Boolean
  isSystemTask: Boolean
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

enum TaskType {
  GENERAL
  CLIENT
  MATTER
  PHONE
  BOOKING
  FOLLOW_UP
  SCRUB_ENQUIRY
  General
  Client
  Matter
}

type EntityDocument {
  entityType: Int
  guidID: ID
  "Unique Identifier"
  id: Int!
  name: String
  url: String
}

type ActivityText {
  activityDate: DateTime
  createdByGuid: ID
  createdByName: String
  guidID: ID
  "Unique Identifier"
  id: Int!
  includeAssignee: Boolean
  includeOwnerOrAssignor: Boolean
  message: String
  messagedTo: String
  text: String
}

type TaskAllocationHistory {
  allocatedByName: String
  allocatedByUserID: ID
  allocatedTeamID: ID
  allocatedTeamName: String
  allocatedUserID: ID
  allocatedUserName: String
  createdDate: DateTime
  guidID: ID
  "Unique Identifier"
  id: Int!
}

interface TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  isConfidential: Boolean
  isSystemTask: Boolean
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

type ClientTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  clientDescription: String
  clientGuid: ID
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  "Unique Identifier"
  id: Int!
  isConfidential: Boolean
  isSystemTask: Boolean
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

type MatterTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  applyTrustAmount: Decimal
  archive: Boolean
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  billDisbursementsAmount: Decimal
  billFeesAmount: Decimal
  category: ID
  categoryDescription: String
  close: Boolean
  closeMatterAfterWriteOff: Boolean
  comments: String
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  "Unique Identifier"
  id: Int!
  invoiceToApply: String
  isConfidential: Boolean
  isSystemTask: Boolean
  matterDescription: String
  matterGuid: ID
  matterId: Int
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
  trustTransferAmount: Decimal
  writeOffDebtorsAmount: Decimal
  writeOffDisbursementsAmount: Decimal
  writeOffFeesAmount: Decimal
}

type PhoneTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  clientDescription: String
  clientGuid: ID
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  fromName: String
  fromNameGuid: String
  fromNameId: String
  guid: ID
  "Unique Identifier"
  id: Int!
  isConfidential: Boolean
  isPhoneCall: Boolean
  isReturnedCall: Boolean
  isSystemTask: Boolean
  isWillCallAgain: Boolean
  matterDescription: String
  matterGuid: ID
  matterId: Int
  notes: String
  organisation: String
  organisationGuid: String
  owner: ID
  ownerName: String
  phoneNumber: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

type FollowUpTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  "Unique Identifier"
  id: Int!
  isConfidential: Boolean
  isSystemTask: Boolean
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

type ScrubEnquiryTask implements TaskDetailTypeInterface {
  activityTexts: [ActivityText]
  allocatedToEntityType: Int
  allocationHistoryList: [TaskAllocationHistory]
  assignedBy: ID
  assignedByName: String
  assignedTo: ID
  assignedToName: String
  category: ID
  categoryDescription: String
  completionDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdByName: String
  createdDate: DateTime
  description: String
  dueDate: DateTime
  duration: String
  emailContent: String
  estimatedEffort: String
  files: [EntityDocument]
  guid: ID
  "Unique Identifier"
  id: Int!
  isConfidential: Boolean
  isSystemTask: Boolean
  notes: String
  owner: ID
  ownerName: String
  priority: ID
  priorityDescription: String
  reminderOffset: String
  staff: String
  startDate: DateTime
  taskStatus: String
  taskType: TaskType
  taskTypeDescription: String
  taskTypeGuid: ID
  taskTypeInternalDescription: String
}

type TaskSummaryListType {
  actualRowCountForSearch: Int
  recordCount: Int!
  tasks: [TaskSummary]
}

type TaskSummary {
  actionedDescription: String
  allocatedToEntityType: Int
  assignedByGuidID: ID
  assignedByName: String
  assignedDate: DateTime
  assignedToGuidID: ID
  assignedToName: String
  bookMeetingEndDate: DateTime
  bookMeetingEndDateUTC: DateTime
  bookMeetingStartDate: DateTime
  bookMeetingStartDateUTC: DateTime
  canAssignMeeting: Boolean
  ccEmailAddresses: String
  client: String
  completedDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdDate: DateTime
  dueDate: DateTime
  dueDateUTC: DateTime
  duration: String
  emailContent: String
  emailSubject: String
  emailTemplateName: String
  enquiryLinkedMatter: String
  entityDescription: String
  entityGuidID: ID
  entityType: Int
  estimatedEffort: String
  feeApplicable: Decimal
  firmOffice: String
  firmOfficeGuid: ID
  followUpAction: String
  followUpActionSystemName: String
  followUpNotes: String
  fromEmailAddress: String
  fromName: String
  fromNameGuid: String
  fromNameId: Int
  "Unique Identifier"
  id: Int!
  isAssignedToTeam: Boolean
  isConfidential: Boolean
  isIntegrationFailed: Boolean
  isKeyOpportunity: Boolean
  isPhoneCall: Boolean
  isReturnedCall: Boolean
  isSystemTask: Boolean
  isWillCallAgain: Boolean
  linkedMatterClient: String
  linkedMatterTitle: String
  matter: String
  matterDescription: String
  meetingNotes: String
  notes: String
  notProceedingNotes: String
  organisation: String
  organisationGuid: String
  outcome: String
  outcomeNotes: String
  ownerGuidID: ID
  ownerName: String
  phoneNumber: String
  priorityDescription: String
  priorityGuidID: ID
  priorityLevel: Int
  properties: String
  reason: String
  reasonGuid: ID
  referredToFirmGuid: ID
  referredToFirmName: String
  sendConfirmation: Boolean
  staff: String
  staffGuid: ID
  startDate: DateTime
  systemAction: String
  taskCategoryDescription: String
  taskCategoryGuidID: ID
  taskDescription: String
  taskGuidID: ID
  taskStatusDescription: String
  taskStatusGuidID: ID
  taskType: String
  taskTypeDescription: String
  taskTypeGuidID: ID
  taskTypeInternalDescription: String
  taskUpdateInProgress: Boolean
  timezone: String
  timezoneOffset: Float
  toEmailAddresses: String
  updatedDate: DateTime
}

type DueDate {
  count: Int
  description: String
  "Unique Identifier"
  id: Int!
}

type userTasks {
  "Unique Identifier"
  id: Int!
  taskTypeGroups(taskGroupTypeId: String): taskTypeGroups
  taskTypes: taskTypes
}

"Task Type"
type taskTypes {
  recordCount: Int!
  taskType: [taskType]
}

"Task Type"
type taskType {
  description: String
  estimatedEffort: String
  guidID: ID
  "Unique Identifier"
  id: Int!
}

"Task Type Groups"
type taskTypeGroups {
  recordCount: Int!
  taskTypeGroup: [taskTypeGroup]
}

"Task Type Group"
type taskTypeGroup {
  description: String
  guidID: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
  taskType: [taskType]
}

type Lookup {
  actionMessage: [ActionMessage]
  actionTypes: [ActionType]
  areaOfLaw: [AreaOfLaw]
  availableAreaOfLaw(emailType: EmailType areaOfLaw: String): [AvailableAreaOfLaw]
  businessType: [BusinessType]
  clientAndContactTagType(tagTypeId: String): [ClientAndContactTagType]
  correspondenceActivity: [CorrespondenceActivity]
  country(isApplyMatterAccess: Boolean): [Country]
  dashboardPanel(type: DashboardPanelUsedBy): [DashboardPanel]
  eventStatus: [EventStatus]
  eventType: [EventType]
  matterBrand(isApplyMatterAccess: Boolean): [MatterBrand]
  matterCategory(isApplyMatterAccess: Boolean): [MatterCategory]
  matterProperty(isApplyMatterAccess: Boolean): [MatterProperty]
  matterStatus(isApplyMatterAccess: Boolean): [MatterStatus]
  matterType(includeCategory: Boolean isApplyMatterAccess: Boolean): [MatterType]
  matterTypeState: [MatterTypeState]
  matterTypeTreeJson: String
  partyTitle: [PartyTitle]
  poBoxType: [PoBoxType]
  priority: [Priority]
  priorityCountry(isApplyMatterAccess: Boolean): [PriorityCountry]
  referrerSource: [ReferrerSource]
  referrerType: [ReferrerType]
  relationshipCategory: [RelationshipCategory]
  relationshipQuality: [RelationshipQuality]
  riskLevel: [RiskLevel]
  taskCategory: [TaskCategory]
  taskStatus(taskStatusType: TaskStatusEnum includeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidID: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isIncludeKeyOpportunity: Boolean isKeyOpportunity: Boolean taskTypes: String clientList: String matterList: String isPersonalTask: Boolean): [TaskStatus]
}

type ActionType {
  actionedDescription: String
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  notes: String
  sequence: Int
  systemAction: String
  systemName: String
}

type AreaOfLaw {
  description: String
  estimatedDisbursements: Decimal
  estimatedFees: Decimal
  guidId: ID
  "Unique Identifier"
  id: Int!
  isAvailableInAPI: Boolean
  isEstimatedDisbursementsIncludesTax: Boolean
  isEstimatedFeesIncludesTax: Boolean
  sequence: Int
}

type AvailableAreaOfLaw {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  isAvailableInAPI: Boolean
  sequence: Int
}

enum EmailType {
  MFA
  NEW_USER_CREATED
  LEAP_CONTACT_US
  PASSWORD_RESET
  LEAP_FIRM_PROVISIONING
  NEW_INTERNAL_USER_CREATED
  NEW_MATTER_MESSAGE_SENT
  NEW_DOCUMENT_UPLOADED
  NEW_LEAD_ASSIGNED
  OTHER
  WELCOME_EMAIL
  NEW_LEAD
  NEW_CLIENT
  NEW_MATTER_DOCUMENT
  ENQUIRY_MENTIONS
  TASK_ASSIGNED
  TASK_COMPLETED
  PHONE_MESSAGE
  NEW_ENQUIRY_RESPONSE
  MEETING_BOOKING
  EMAIL_RESPONSE
  FOLLOW_UP_ENQUIRY_REMINDER
  FOLLOW_UP_ENQUIRY_OVER_DUE_REMINDER
  NEW_TENANT_PROVISIONED
  TENANT_DE_PROVISIONED
  NEW_MEETING_NOTIFICATION
  RECORD_CREATED_CONFIRMATION
  RECORD_CREATION_FAILED
  TASK_MESSAGE
  TASK_REMINDER
  TASK_OVER_DUE_REMINDER
  INSTRUCT_MATTER
  MFA
  LeapContactUs
  LeapFirmProvisioning
  NewDocumentUploaded
  NewInternalUserCreated
  NewLeadAssigned
  NewMatterMessageSent
  NewUserCreated
  PasswordReset
  Other
  WelcomeEmail
  NewLead
  NewClient
  NewMatterDocument
  EnquiryMentions
  TaskAssigned
  TaskCompleted
  PhoneMessage
  NewEnquiryResponse
  MeetingBooking
  EmailResponse
  FollowUpEnquiryReminder
  FollowUpEnquiryOverDueReminder
  NewMeetingNotification
  RecordCreatedConfirmation
  RecordCreationFailed
  TaskMessage
  TaskReminder
  TaskOverDueReminder
  InstructMatter
}

type Priority {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  level: Int
  sequence: Int
}

type ReferrerType {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type ReferrerSource {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type RelationshipQuality {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  level: Int
  sequence: Int
}

type MatterType {
  categoryId: String
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  internalCode: String
  matterTypeId: String
  state: String
}

type MatterTypeState {
  "Unique Identifier"
  id: Int!
  state: String
}

type MatterCategory {
  categoryId: String
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  internalCode: String
}

type RelationshipCategory {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  internalCode: String
}

type BusinessType {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type ClientAndContactTagType {
  clientAndContactTag: [ClientAndContactTag]
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
  tagEntity: Int
  tagsCount: Int
}

type ClientAndContactTag {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
  tagTypeId: ID
}

type DashboardPanel {
  description: String
  guidId: ID
  hasLayouts: Boolean
  "Unique Identifier"
  id: Int!
  usedByClientDashboard: Boolean
  usedByEnquiryDashboard: Boolean
  usedByFeeEarnerDashboard: Boolean
  usedByFirmDashboard: Boolean
  usedByTaskDashboard: Boolean
}

enum DashboardPanelUsedBy {
  FIRM_DASHBOARD
  LEAD_DASHBOARD
  FEE_EARNER_DASHBOARD
  TASK_DASHBOARD
  CLIENT_DASHBOARD
  FirmDashboard
  FeeEarnerDashboard
  LeadDashboard
  TaskDashboard
  ClientDashboard
}

type ActionMessage {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
}

type PoBoxType {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
}

type PartyTitle {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type MatterProperty {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type PriorityCountry {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type MatterBrand {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type RiskLevel {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  level: Int
  sequence: Int
}

type EventStatus {
  description: String
  guid: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
}

type EventType {
  description: String
  guid: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  sequence: Int
}

type CorrespondenceActivity {
  description: String
  guid: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  isSystem: Boolean
  sequence: Int
}

type templates {
  emailDetail(enquiryGuid: String emailType: EmailType emailTemplateGuid: String isMeetingAssignedToTeam: Boolean meetingStaffGuid: String meetingStaffName: String meetingLocation: String meetingTimezone: String meetingStart: DateTime meetingEnd: DateTime isMeetingAllDay: Boolean meetingNotes: String meetingFeeApplicable: Decimal meetingStaffEmail: String): emailDetail
  emailTemplate(isInternalRole: Boolean roleId: String selectedUserId: String firmTeamId: String emailType: EmailType emailStyle: EmailStyle integrationTemplateId: String areaOfLaw: String emailTemplateGuid: String assigneeId: String location: String): emailTemplate
  emailTemplateCount(emailType: EmailType areaOfLaw: String): emailTemplateCount
  emailTemplateList(emailType: EmailType integrationTemplateId: String areaOfLaw: String isActive: Boolean): [emailTemplate]
  externalEmailTemplate(emailStyle: EmailStyle): [externalEmailTemplate]
  splashScreen(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String): splashScreen
  userDefinedHelp(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String): userDefinedHelp
}

type emailTemplate {
  ccAssistant: Boolean
  description: String
  emailStyle: Int
  emailTemplateGuid: ID
  emailType: Int
  "Unique Identifier"
  id: Int!
  integrationTemplateId: String
  integrationTemplateName: String
  isActive: Boolean
  isInternalRole: Boolean
  matchedPropertys: MatchedPropertys
  name: String
  roleGuid: ID
  subject: String
  template: String
  userGuid: ID
}

type MatchedPropertys {
  entity: String
  matchedProperty: [MatchedProperty]
  recordCount: Int!
}

type MatchedProperty {
  assignee: String
  assigneeDescription: String
  "Unique Identifier"
  id: Int!
  key: String
  keyDescription: String
  location: String
  locationDescription: String
  recipient: String
  recipientDescription: String
  scope: String
  scopeDescription: String
  source: String
  sourceDescription: String
}

enum EmailStyle {
  HTML
  ADAPTIVE_CARD
  VISION_SIX
  Html
  AdaptiveCard
  VisionSix
}

type externalEmailTemplate {
  description: String
  emailStyle: Int
  externalTemplateId: String
  "Unique Identifier"
  id: Int!
  templateName: String
}

type emailDetail {
  ccAddresses: String
  emailContent: String
  emailStyle: Int
  emailSubject: String
  emailTemplateGuid: ID
  emailType: Int
  fromAddress: String
  "Unique Identifier"
  id: Int!
  templateDescription: String
  templateName: String
  toAddresses: String
}

type emailTemplateCount {
  count: Int
  "Unique Identifier"
  id: Int!
}

type firm {
  departments(departmentGuidId: String isMyDepartmentOnly: Boolean): departments
  feeEarners("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isActive: Boolean isMyOfficeOnly: Boolean isMyDepartmentOnly: Boolean isMyTeamOnly: Boolean): feeEarners
  firmContact: firmContact
  firmGroupExists(onlyUsedByEnquiries: Boolean onlyUsedByTasks: Boolean onlyUsedByFinancials: Boolean): firmGroupExists
  firmOffices(officeGuidId: String isMyOfficeOnly: Boolean): firmOffices
  generalMaterials("Skip offset records" offset: Int "Return first number of records" first: Int isConvey: Boolean): generalMaterials
  "Unique Identifier"
  id: Int!
  materialDocument(documentName: String): materialDocument
  offices: offices
  personActingLabel: String
  personAssistingLabel: String
  personResponsibleLabel: String
  reportingGroups: reportingGroups
  teams(teamGuidId: String isIncludeTaskCount: Boolean isIncludeEnquiryCount: Boolean isIncludeCurrent: Boolean isIncludeClosed: Boolean sortColumn: String sortDirection: String followUpDue: String newEnquiry: String assignedTo: String areaOfLaw: String isMyEnquiriesOnly: Boolean isMyTeamOnly: Boolean enquiryQuality: String enquiryLikelihoodToProceed: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String entityGuidId: String completedFromDate: DateTime completedToDate: DateTime updatedFromDate: DateTime updatedToDate: DateTime priorityList: String statusList: String allocatedToList: String allocatedByList: String groupBy: String groupByValue: String taskStatus: Int isIncludeEnquiry: Boolean isMyTasksOnly: Boolean created: String due: String teamList: String isKeyOpportunity: Boolean isIncludeKeyOpportunity: Boolean taskTypes: String meetingWith: String onlyUsedByEnquiries: Boolean onlyUsedByTasks: Boolean onlyUsedByFinancials: Boolean isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): teams
  workObtainedList: workObtainedList
}

type materialDocument {
  "Unique Identifier"
  id: Int!
  url: String
}

type generalMaterials {
  generalMaterial("Skip offset records" offset: Int "Return first number of records" first: Int isConvey: Boolean): [generalMaterial]
  recordCount: Int!
}

type generalMaterial {
  convey: Boolean
  description: String
  fileName: String
  "Unique Identifier"
  id: Int!
  label: String
  sequence: Float
  type: String
  url: String
}

type firmContact {
  address: String
  email: String
  fax: String
  "Unique Identifier"
  id: Int!
  name: String
  phone: String
  website: String
}

type firmGroupExists {
  "Unique Identifier"
  id: Int!
  isDepartmentMemberExists: Boolean
  isMyDepartmentExists: Boolean
  isMyOfficeExists: Boolean
  isMyTeamExists: Boolean
  isOfficeMemberExists: Boolean
  isTeamMemberExists: Boolean
}

"Firm Locations"
type offices {
  office: [office]
  recordCount: Int!
}

"Firm Location"
type office {
  description: String
  guidID: ID
  "Unique Identifier"
  id: Int!
  isAvailableInAPI: Boolean
  sequence: Int
}

"Firm Departments"
type departments {
  availableMembers("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isNotExistsInDepartment: Boolean groupGuid: String): availableMembers
  department: [department]
  recordCount: Int!
}

type department {
  description: String!
  guidID: ID
  "Unique Identifier"
  id: Int!
  members: members
  staffCount: Int!
}

type members {
  member: [member]
  recordCount: Int!
}

type member {
  email: String
  friendlyName: String!
  groupGuidId: ID
  guidID: ID
  "Unique Identifier"
  id: Int!
  isActive: Boolean
  staffId: ID
  userId: ID
}

type availableMembers {
  availableMember: [availableMember]
  recordCount: Int!
}

type availableMember {
  emailAddress: String
  entityType: Int
  "Unique Identifier"
  id: Int!
  isActive: Boolean
  isRedViewUser: Boolean
  staffId: ID
  staffName: String
  staffRole: String
}

"Firm Offices"
type firmOffices {
  availableMembers("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isNotExistsInOffice: Boolean groupGuid: String): availableMembers
  firmOffice: [firmOffice]
  recordCount: Int!
}

"office"
type firmOffice {
  baseUtcOffset: Float
  description: String!
  guidID: ID
  "Unique Identifier"
  id: Int!
  members: members
  staffCount: Int!
  timezone: String
  timezoneDescription: String
}

"Firm Teams"
type teams {
  availableMembers("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isNotExistsInTeam: Boolean groupGuid: String): availableMembers
  recordCount: Int!
  team: [team]
}

type team {
  description: String!
  enquiryCount: Int!
  guidID: ID
  "Unique Identifier"
  id: Int!
  members: members
  staffCount: Int!
  taskCount: Int!
  usedByEnquiries: Boolean!
  usedByFinancials: Boolean!
  usedByTasks: Boolean!
}

type feeEarners {
  feeEarner: [feeEarner]
  recordCount: Int!
}

type feeEarner {
  emailAddress: String
  entityType: Int
  "Unique Identifier"
  id: Int!
  isActive: Boolean
  isRedViewUser: Boolean
  staffId: ID
  staffName: String
  staffRole: String
}

"Firm ReportingGroups"
type reportingGroups {
  recordCount: Int!
  reportingGroup: [reportingGroup]
}

"Firm Reporting Group"
type reportingGroup {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  reportingGroupSourceId: String
}

"Work Obtained List"
type workObtainedList {
  recordCount: Int!
  workObtained: [workObtained]
}

" Work Obtained"
type workObtained {
  description: String
  "Unique Identifier"
  id: Int!
}

type marketing {
  mailingExclusions(mailingListGuid: String): MailingListExclusions
  mailingParties("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String searchFilters: String exclusionList: String): MailingParties
  mailings("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String): MailingLists
}

type MailingLists {
  mailingList: [MailingList]
  recordCount: Int!
}

type MailingList {
  filters: String
  guid: ID
  "Unique Identifier"
  id: Int!
  name: String
}

type MailingParties {
  mailingParty: [MailingParty]
  recordCount: Int!
  recordCountWithoutFilter: Int
}

type MailingParty {
  address: String
  businessType: String
  city: String
  companyName: String
  country: String
  dateLastActive: String
  dateOfBirth: Date
  emailAddress: String
  entityGuid: ID
  entityType: Int
  firstName: String
  "Unique Identifier"
  id: Int!
  instructionDate: String
  lastName: String
  matterCategory: String
  matterType: String
  mobile: String
  name: String
  notes: String
  personActing: String
  personResponsible: String
  phone: String
  postcode: String
  referrerManager: String
  referrerType: String
  relationshipQuality: String
  state: String
  tags: String
}

type MailingListExclusions {
  mailingExclusion: [MailingExclusion]
  recordCount: Int!
}

type MailingExclusion {
  entityGuid: ID
  entityType: Int
  "Unique Identifier"
  id: Int!
  mailingListGuid: ID
}

type UserAssistants {
  recordCount: Int!
  userAssistants("Skip offset records" offset: Int "Return first number of records" first: Int): [UserAssistant]
}

type UserAssistant {
  email: String
  friendlyName: String
  guid: ID
  "Unique Identifier"
  id: Int!
  userGuid: ID
}

type InvoiceSummaryListType {
  actualRowCountForSearch: Int
  invoices: [InvoiceSummary]
  recordCount: Int!
}

type InvoiceSummary {
  acting: String
  client: String
  "Unique Identifier"
  id: Int!
  invoiceDate: DateTime
  invoiceGuid: ID
  invoiceMatterGuid: ID
  invoiceMonth: String
  invoiceNumber: String
  matterCategory: String
  matterFileNumber: String
  matterGuid: ID
  matterTitle: String
  matterType: String
  responsible: String
  status: String
  totalAdjustedFees: Decimal
  totalAmount: Decimal
  totalAmountIncludingTax: Decimal
  totalDisbursements: Decimal
  totalServiceFees: Decimal
  totalTax: Decimal
}

type TimesheetSummaryDrillDownListType {
  recordCount: Int!
  rowCountWithoutFilters: Int
  timesheets: [TimesheetDrillDown]
}

type TimesheetDrillDown {
  activityDescription: String
  activityID: Int
  amount: Decimal
  chargeLevelDescription: String
  chargeLevelID: Int
  chargeRate: Decimal
  client: String
  endTime: String
  fileNumber: String
  "Unique Identifier"
  id: Int!
  isIncomplete: Boolean
  isSynced: Boolean
  itemDate: DateTime
  matterCategory: String
  matterID: Int
  matterType: String
  note: String
  staff: String
  startTime: String
  status: String
  syncErrorDescription: String
  syncErrorID: Int
  timePeriodEntered: String
  timesheetNote: String
  title: String
  units: Int
}

type TaskSummaryDrillDownListType {
  recordCount: Int!
  rowCountWithoutFilters: Int
  tasks: [taskSummaryDrilldown]
}

type taskSummaryDrilldown {
  actionedDescription: String
  allocatedToEntityType: Int
  assignedByGuidID: ID
  assignedByName: String
  assignedDate: DateTime
  assignedToGuidID: ID
  assignedToName: String
  bookMeetingEndDate: DateTime
  bookMeetingEndDateUTC: DateTime
  bookMeetingStartDate: DateTime
  bookMeetingStartDateUTC: DateTime
  canAssignMeeting: Boolean
  ccEmailAddresses: String
  client: String
  completedDate: DateTime
  completionNotes: String
  completionNotesGuidID: ID
  createdDate: DateTime
  dueDate: DateTime
  dueDateUTC: DateTime
  duration: String
  emailContent: String
  emailSubject: String
  emailTemplateName: String
  enquiryLinkedMatter: String
  entityDescription: String
  entityGuidID: ID
  entityType: Int
  estimatedEffort: String
  feeApplicable: Decimal
  firmOffice: String
  firmOfficeGuid: ID
  followUpAction: String
  followUpActionSystemName: String
  followUpNotes: String
  fromEmailAddress: String
  fromName: String
  fromNameGuid: String
  fromNameId: Int
  "Unique Identifier"
  id: Int!
  isAssignedToTeam: Boolean
  isIntegrationFailed: Boolean
  isKeyOpportunity: Boolean
  isPhoneCall: Boolean
  isReturnedCall: Boolean
  isSystemTask: Boolean
  isWillCallAgain: Boolean
  linkedMatterClient: String
  linkedMatterTitle: String
  matter: String
  matterDescription: String
  meetingNotes: String
  notes: String
  notProceedingNotes: String
  organisation: String
  organisationGuid: String
  outcome: String
  outcomeNotes: String
  ownerGuidID: ID
  ownerName: String
  phoneNumber: String
  priorityDescription: String
  priorityGuidID: ID
  priorityLevel: Int
  properties: String
  reason: String
  reasonGuid: ID
  referredToFirmGuid: ID
  referredToFirmName: String
  sendConfirmation: Boolean
  staff: String
  staffGuid: ID
  startDate: DateTime
  systemAction: String
  taskCategoryDescription: String
  taskCategoryGuidID: ID
  taskDescription: String
  taskGuidID: ID
  taskStatusDescription: String
  taskStatusGuidID: ID
  taskType: String
  taskTypeDescription: String
  taskTypeGuidID: ID
  taskTypeInternalDescription: String
  taskUpdateInProgress: Boolean
  timezone: String
  timezoneOffset: Float
  toEmailAddresses: String
  updatedDate: DateTime
}

type staffBudget {
  financialYearList: financialYearList
  "Unique Identifier"
  id: Int!
  staffBillingSummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String sortColumn: String sortDirection: String searchCriteriasJson: String entityType: Int entityGuid: String responsibility: Int): staffBillingSummaryList
  staffDailyBudgets("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String staffGuid: String startDate: DateTime endDate: DateTime): staffDailyBudgets
  staffMonthlyBudgets("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String staffGuid: String startDate: DateTime endDate: DateTime): staffMonthlyBudgets
  staffWorkingDays(staffGuid: String financialYearStartDate: DateTime): StaffWorkingDays
}

"StaffBillingSummaryList"
type staffBillingSummaryList {
  actualRowCountForSearch: Int
  recordCount: Int!
  staffBillingSummary: [StaffBillingSummary]
}

type StaffBillingSummary {
  department: String
  email: String
  fullFinancialYearBillableHoursBgt: String
  fullFinancialYearFeesBilledBgt: Float
  fullFinancialYearFeesCollectedBgt: Float
  fullFinancialYearFeesRecordedBgt: Float
  fullFinancialYearNonBillableHoursBgt: String
  "Unique Identifier"
  id: Int!
  monthToDateBillableHours: String
  monthToDateBilled: Decimal
  monthToDateBudgetBilled: Decimal
  monthToDateBudgetBilledVariance: Decimal
  monthToDateBudgetChargeableHours: String
  monthToDateBudgetCollection: Decimal
  monthToDateBudgetCollectionVariance: Decimal
  monthToDateBudgetNonChargeableHours: String
  monthToDateBudgetProduced: Decimal
  monthToDateBudgetProducedVariance: Decimal
  monthToDateCollection: Float
  monthToDateDebtorWriteOff: Decimal
  monthToDateFeesCollected: Decimal
  monthToDateFeesProduced: Decimal
  monthToDateNonBillableHours: String
  monthToDateRealisation: Float
  monthToDateWriteOff: Decimal
  name: String
  office: String
  previousMonthToMonthToDateBillableHours: String
  previousMonthToMonthToDateBilled: Decimal
  previousMonthToMonthToDateBudgetBilled: Decimal
  previousMonthToMonthToDateBudgetBilledVariance: Decimal
  previousMonthToMonthToDateBudgetChargeableHours: String
  previousMonthToMonthToDateBudgetCollection: Decimal
  previousMonthToMonthToDateBudgetCollectionVariance: Decimal
  previousMonthToMonthToDateBudgetNonChargeableHours: String
  previousMonthToMonthToDateBudgetProduced: Decimal
  previousMonthToMonthToDateBudgetProducedVariance: Decimal
  previousMonthToMonthToDateDebtorWriteOff: Decimal
  previousMonthToMonthToDateFeesCollected: Decimal
  previousMonthToMonthToDateFeesProduced: Decimal
  previousMonthToMonthToDateNonBillableHours: String
  previousMonthToMonthToDateWriteOff: Decimal
  previousMonthYearToDateBillableHours: String
  previousMonthYearToDateBilled: Decimal
  previousMonthYearToDateBudgetBilled: Decimal
  previousMonthYearToDateBudgetBilledVariance: Decimal
  previousMonthYearToDateBudgetChargeableHours: String
  previousMonthYearToDateBudgetCollection: Decimal
  previousMonthYearToDateBudgetCollectionVariance: Decimal
  previousMonthYearToDateBudgetNonChargeableHours: String
  previousMonthYearToDateBudgetProduced: Decimal
  previousMonthYearToDateBudgetProducedVariance: Decimal
  previousMonthYearToDateDebtorWriteOff: Decimal
  previousMonthYearToDateFeesCollected: Decimal
  previousMonthYearToDateFeesProduced: Decimal
  previousMonthYearToDateNonBillableHours: String
  previousMonthYearToDateWriteOff: Decimal
  staffGuid: ID
  staffId: Int
  team: String
  weekToDateBillableHours: String
  weekToDateBilled: Decimal
  weekToDateBudgetBilled: Decimal
  weekToDateBudgetBilledVariance: Decimal
  weekToDateBudgetChargeableHours: String
  weekToDateBudgetCollection: Decimal
  weekToDateBudgetCollectionVariance: Decimal
  weekToDateBudgetNonChargeableHours: String
  weekToDateBudgetProduced: Decimal
  weekToDateBudgetProducedVariance: Decimal
  weekToDateDebtorWriteOff: Decimal
  weekToDateFeesCollected: Decimal
  weekToDateFeesProduced: Decimal
  weekToDateNonBillableHours: String
  weekToDateWriteOff: Decimal
  yearToDateBillableHours: String
  yearToDateBilled: Decimal
  yearToDateBudgetBilled: Decimal
  yearToDateBudgetBilledVariance: Decimal
  yearToDateBudgetChargeableHours: String
  yearToDateBudgetCollection: Decimal
  yearToDateBudgetCollectionVariance: Decimal
  yearToDateBudgetNonChargeableHours: String
  yearToDateBudgetProduced: Decimal
  yearToDateBudgetProducedVariance: Decimal
  yearToDateCollection: Float
  yearToDateDebtorWriteOff: Decimal
  yearToDateFeesCollected: Decimal
  yearToDateFeesProduced: Decimal
  yearToDateNonBillableHours: String
  yearToDateRealisation: Float
  yearToDateWriteOff: Decimal
}

type staffDailyBudgets {
  recordCount: Int!
  staffDailyBudget: [StaffDailyBudget]
  staffFinancialYearBudget: StaffFinancialYearBudget
}

type StaffDailyBudget {
  billableFees: Decimal
  billableHours: String
  budgetDate: Date
  feesBilled: Decimal
  feesCollected: Decimal
  "Unique Identifier"
  id: Int!
  nonBillableHours: String
  staffGuid: ID
  staffId: Int
}

type StaffFinancialYearBudget {
  billableFees: Decimal
  billableHours: String
  feesBilled: Decimal
  feesCollected: Decimal
  financialPeriodEndDate: Date
  financialPeriodStartDate: Date
  "Unique Identifier"
  id: Int!
  nonBillableHours: String
  staffGuid: ID
  staffId: Int
}

type staffMonthlyBudgets {
  recordCount: Int!
  staffMonthlyBudget: [StaffMonthlyBudget]
}

type StaffMonthlyBudget {
  billableFees: Decimal
  billableHours: String
  feesBilled: Decimal
  feesCollected: Decimal
  "Unique Identifier"
  id: Int!
  month: Int
  monthStartDate: Date
  nonBillableHours: String
  staffGuid: ID
  staffId: Int
}

"FinancialYearList"
type financialYearList {
  financialYear: [FinancialYear]
  recordCount: Int!
}

type FinancialYear {
  description: String
  endDate: DateTime
  "Unique Identifier"
  id: Int!
  isCurrent: Boolean
  startDate: DateTime
}

type StaffWorkingDays {
  financialYearStartDate: Date
  friday: Boolean
  "Unique Identifier"
  id: Int!
  monday: Boolean
  saturday: Boolean
  staffGuid: ID
  staffID: Int
  sunday: Boolean
  thursday: Boolean
  tuesday: Boolean
  wednesday: Boolean
}

type Settings {
  applications: Applications
  "Unique Identifier"
  id: Int!
  integrations: Integrations
  systems: Systems
}

type Applications {
  dataPublisherSettings: DataPublisherSettings
  documentPublisherSettings: DocumentPublisherSettings
  futureTimeSynchronization: FutureTimeSynchronization
  "Unique Identifier"
  id: Int!
  licencing: Licencing
  mobileSettings: MobileSettings
  settingNames: settingNames
  staffBudgetSettings: StaffBudgetSettings
}

"SettingNames"
type settingNames {
  recordCount: Int!
  settingName: [SettingName]
}

type SettingName {
  description: String
  guidID: ID
  "Unique Identifier"
  id: Int!
  internalName: String
  title: String
}

type MobileSettings {
  config: MobileSettingsConfig
  "Unique Identifier"
  id: Int!
}

type MobileSettingsConfig {
  "Unique Identifier"
  id: Int!
  showMatterSelection: Boolean
  showPhoneCallButton: Boolean
  showTimerButton: Boolean
}

type DataPublisherSettings {
  config: DataPublisherSettingsConfig
  "Unique Identifier"
  id: Int!
}

type DataPublisherSettingsConfig {
  "Unique Identifier"
  id: Int!
  publishFinancials: Boolean
  publishTimeline: Boolean
  timeOnly: Boolean
}

type DocumentPublisherSettings {
  config: DocumentPublisherSettingsConfig
  "Unique Identifier"
  id: Int!
}

type DocumentPublisherSettingsConfig {
  "Unique Identifier"
  id: Int!
  publishDocuments: Boolean
}

type Licencing {
  config: LicencingConfig
  "Unique Identifier"
  id: Int!
}

type LicencingConfig {
  "Unique Identifier"
  id: Int!
  internalRegisteredUsers: Int
}

type FutureTimeSynchronization {
  enableFutureTimeSynchronization: Boolean
  "Unique Identifier"
  id: Int!
}

type StaffBudgetSettings {
  config: StaffBudgetSettingsConfig
  "Unique Identifier"
  id: Int!
}

type StaffBudgetSettingsConfig {
  enableBudgetSync: Boolean
  "Unique Identifier"
  id: Int!
}

type Systems {
  applicationSecuritySettings: ApplicationSecuritySettings
  chartDefaults: EnquiryChartDefaultConfiguration
  connectSettings: ConnectSettings
  emailDefaults: EmailDefaults
  enquiryDefaults: EnquiryDefaultConfiguration
  firmDetails: FirmDetails
  "Unique Identifier"
  id: Int!
  inprotechSettings: InprotechSettings
  phoneMessageDefaults: PhoneMessageDefaultConfiguration
  regionSettings: RegionSettings
  settingNames: settingNames
  taskDefaults: TaskDefaultConfiguration
  timeRecordingDefaults: TimeRecordingDefaults
  timeRecordingSettings: TimeRecordingSettings
  timeRecordingWarnings: TimeRecordingWarnings
}

type EnquiryDefaultConfiguration {
  config: EnquiryDefaultConfig
  "Unique Identifier"
  id: Int!
}

type EnquiryDefaultConfig {
  addDays: Int
  addHours: Decimal
  defaultMeetingLength: String
  "Unique Identifier"
  id: Int!
  isCalculatedDays: Boolean
  isCalculatedHours: Boolean
  isLocationFieldMandatory: Boolean
  isManualEntry: Boolean
  isSendInvitationToAssignee: Boolean
  isSendInvitationToEnquirer: Boolean
  isSendReminderOnWeekend: Boolean
  isSendReminderOnWeekendForOverDueReminders: Boolean
  overdueReminder: String
  reminder: String
  timeOfDay: String
}

type TaskDefaultConfiguration {
  config: PhoneMessageDefaultConfig
  "Unique Identifier"
  id: Int!
}

type PhoneMessageDefaultConfig {
  "Unique Identifier"
  id: Int!
  isSendReminderOnWeekend: Boolean
  isSendReminderOnWeekendForOverDueReminders: Boolean
  overdueReminder: String
  reminder: String
}

type PhoneMessageDefaultConfiguration {
  config: PhoneMessageDefaultConfig
  "Unique Identifier"
  id: Int!
}

type EnquiryChartDefaultConfiguration {
  config: EnquiryChartDefaultConfig
  "Unique Identifier"
  id: Int!
}

type EnquiryChartDefaultConfig {
  "Unique Identifier"
  id: Int!
  minimumEnquiriesProcessed: Int
}

type EmailDefaults {
  config: EmailConfig
  "Unique Identifier"
  id: Int!
}

type EmailConfig {
  confirmationBcc: String
  fromName: String
  "Unique Identifier"
  id: Int!
  replyTo: String
  sendEmailOnBehalfOf: String
}

type FirmDetails {
  config: FirmDetailsConfig
  "Unique Identifier"
  id: Int!
}

type FirmDetailsConfig {
  firmAddress: String
  firmEmailContact: String
  firmHelpDeskContact: String
  firmName: String
  firmPhone: String
  firmWebsite: String
  "Unique Identifier"
  id: Int!
}

type RegionSettings {
  config: RegionSettingsConfig
  "Unique Identifier"
  id: Int!
}

type RegionSettingsConfig {
  baseUtcOffset: Float
  currencyCode: String
  currencySymbol: String
  financialYearStart: Date
  homeCountry: String
  "Unique Identifier"
  id: Int!
  taxLabel: String
  taxPercentage: Decimal
  timeZone: String
  timeZoneDescription: String
}

type ApplicationSecuritySettings {
  config: ApplicationSecuritySettingsConfig
  "Unique Identifier"
  id: Int!
}

type ApplicationSecuritySettingsConfig {
  "Unique Identifier"
  id: Int!
  mFA: Boolean
  passwordLength: Int
  passwordStrength: Int
}

type TimeRecordingSettings {
  config: TimeRecordingSettingsConfig
  "Unique Identifier"
  id: Int!
}

type TimeRecordingSettingsConfig {
  copyActivityAsNote: Boolean
  expectedHoursPerDay: Int
  "Unique Identifier"
  id: Int!
  standardHoursPerDay: Decimal
  unitsPerHour: Int
  useStartEndTime: Boolean
}

type TimeRecordingDefaults {
  config: TimeRecordingDefaultsConfig
  "Unique Identifier"
  id: Int!
}

type TimeRecordingDefaultsConfig {
  defaultDurationMinutes: Int
  defaultDurationUnits: Int
  emailActivity: String
  "Unique Identifier"
  id: Int!
  phoneCallActivity: String
  submissionType: String
  suggestCustomButtons: Boolean
  tenantTimeCaptureMode: String
  timeCaptureMode: String
  timeSelectionMinuteInterval: Int
  useSmartSettings: Boolean
}

type TimeRecordingWarnings {
  config: TimeRecordingWarningsConfig
  "Unique Identifier"
  id: Int!
}

type TimeRecordingWarningsConfig {
  "Unique Identifier"
  id: Int!
  warnIfNotToday: Boolean
  warnOnExceedingHours: Boolean
}

type ConnectSettings {
  config: ConnectSettingsConfig
  "Unique Identifier"
  id: Int!
}

type ConnectSettingsConfig {
  emailDocumentNotifications: Boolean
  emailMessageNotifications: Boolean
  "Unique Identifier"
  id: Int!
  pushDocumentNotifications: Boolean
  pushMessageNotifications: Boolean
  staffContactFilter: String
  welcomeMessage: String
}

type InprotechSettings {
  config: InprotechSettingsConfig
  "Unique Identifier"
  id: Int!
}

type InprotechSettingsConfig {
  applicationNumber: String
  clientNoteActivityCategory: Int
  clientNoteActivityType: Int
  completionDate: String
  externalImportanceLevel: Int
  fileNoteActivityCategory: Int
  fileNoteActivityType: Int
  grantNumber: String
  "Unique Identifier"
  id: Int!
  instructionDate: String
  internalImportanceLevel: Int
  publicationNumber: String
}

type Integrations {
  "Unique Identifier"
  id: Int!
  innography: InnographyIntegrations
  settingNames: settingNames
  vision6: Vision6Integrations
}

type Vision6Integrations {
  config: Vision6Config
  contactList: [Vision6ContactList]
  "Unique Identifier"
  id: Int!
}

type Vision6Config {
  contactListId: String
  contactListName: String
  "Unique Identifier"
  id: Int!
  isEnabled: Boolean
  sendEmailsViaVision6: Boolean
  token: String
}

type Vision6ContactList {
  "Unique Identifier"
  id: Int!
  listId: String
  name: String
}

type InnographyIntegrations {
  config: InnographyConfig
  "Unique Identifier"
  id: Int!
}

type InnographyConfig {
  "Unique Identifier"
  id: Int!
  isEnabled: Boolean
  url: String
}

type TimesheetScope {
  "Unique Identifier"
  id: Int!
  showFeeEarnerFilter: Boolean
  updateTimesheet: Boolean
  viewAll: Boolean
  viewMyDepartment: Boolean
  viewMyOffice: Boolean
  viewMyTeam: Boolean
}

type Provisioning {
  "Unique Identifier"
  id: Int!
  tenantSummaries("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String region: String backend: String tenantId: String): TenantSummaries
  validateUser(accessToken: String roles: String): ValidateUser
}

type ValidateUser {
  accessToken: String
  error: String
  "Unique Identifier"
  id: Int!
  statusCode: Int
}

type TenantSummaries {
  recordCount: Int!
  tenantSummary: [TenantSummary]
}

type TenantSummary {
  active: Boolean
  applicationUrl: String
  companyName: String
  contact: String
  creationDate: Date
  enabled: Boolean
  "Unique Identifier"
  id: Int!
  logo: String
  masterFirmName: String
  notificationOverride: String
  status: String
  tenantId: String
}

type recurringMatterTemplates {
  recordCount: Int!
  recurringMatterTemplates: [recurringMatterTemplate]
}

type recurringMatterTemplate {
  actingGuid: ID
  actingId: Int
  actingName: String
  assistingGuid: ID
  assistingId: Int
  assistingName: String
  costAgreementRequired: Boolean
  costsEstimate: Decimal
  creditGuid: ID
  creditId: Int
  creditName: String
  disbursementsEstimate: Decimal
  "Unique Identifier"
  id: Int!
  isEstimatedDisbursementsIncludesTax: Boolean
  isEstimatedFeesIncludesTax: Boolean
  matterTitle: String
  matterTypeId: String
  matterTypeName: String
  name: String
  recurringMatterId: ID
  referrerGuid: ID
  referrerId: Int
  referrerName: String
  reportingGroup: String
  reportingGroupGuid: ID
  responsibleGuid: ID
  responsibleId: Int
  responsibleName: String
  state: String
  workObtained: String
}

type TenantConfiguration {
  brands("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String sortColumn: String sortDirection: String): BrandSummaries
  "Unique Identifier"
  id: Int!
}

type BrandSummaries {
  brandSummary: [BrandSummary]
  recordCount: Int!
}

type BrandSummary {
  guid: ID
  "Unique Identifier"
  id: Int!
  logoID: String
  logoUrl: String
  name: String
  title: String
}

type GeneralMaterialList {
  generalMaterials: [GeneralMaterial]
  recordCount: Int!
}

type GeneralMaterial {
  description: String
  fileName: String
  "Unique Identifier"
  id: Int!
  isConvey: Boolean
  label: String
  matterCategory: String
  matterCategoryId: Int
  matterType: String
  matterTypeId: Int
  sequence: Int
  type: Int
  url: String
}

type AuthoriseLeapFirm {
  accessToken: String
  error: String
  matterGuid: String
  staffGuid: String
  statusCode: Int
}

enum LeapProduct {
  NOT_SET
  LEAP_ADD_IN
  LEAP_WORKPLACE
  BOTH
  LeapAddIn
  LeapWorkplace
}

type LeapCards {
  leapCard: [LeapCard]
  recordCount: Int!
}

"Leap Card Entity"
type LeapCard {
  cardGuid: ID
  email: String
  fullName: String!
  "Unique Identifier"
  id: Int!
  role: String
  userId: ID
}

type LeapMatterClients {
  leapMatterClient: [LeapMatterClient]
  recordCount: Int!
}

"Leap Matter Client Entity"
type LeapMatterClient {
  cardGuid: ID
  email: String
  fullName: String!
  "Unique Identifier"
  id: Int!
  isAssignedToMatter: Boolean!
}

type LeapPublishedMatters {
  leapPublishedMatter: [LeapPublishedMatter]
  recordCount: Int!
}

"Leap published Matter Entity"
type LeapPublishedMatter {
  fileNumber: String!
  "Unique Identifier"
  id: Int!
  isPublished: Boolean!
  matterId: ID
  title: String!
}

type LeapDocuments {
  leapDocument: [LeapDocument]
  recordCount: Int!
}

"Leap Document Entity"
type LeapDocument {
  documentDate: Date
  documentExtension: String
  documentId: ID
  documentName: String!
  "Unique Identifier"
  id: Int!
  leapRoleAccess: [LeapRoleAccess]
  matterId: ID
  publishStatus: Int!
  staffInitials: String
}

type LeapRoleAccess {
  hasAccess: Boolean!
  "Unique Identifier"
  id: Int!
  role: String!
  roleGuid: ID
}

type LeapMatterUserAccesses {
  leapMatterUserAccess: [LeapMatterUserAccess]
  recordCount: Int!
}

"Leap Matter User Access Entity"
type LeapMatterUserAccess {
  cardGuid: ID
  email: String
  friendlyName: String
  "Unique Identifier"
  id: Int!
  organisation: String
  roleId: ID
  roleName: String
  userId: ID
}

type LeapDocumentAccesses {
  leapDocumentAccess: [LeapDocumentAccess]
  recordCount: Int!
}

"Leap Document Access"
type LeapDocumentAccess {
  documentGuid: ID
  documentName: String!
  "Unique Identifier"
  id: Int!
  leapRoleAccess: [LeapRoleAccess]
}

type ReportCatalogs {
  recordCount: Int!
  reportCatalog: [ReportCatalog]
}

"Report Catalog"
type ReportCatalog {
  category: String
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  imageGuid: ID
  name: String
  reportName: String
  thumbnailGuid: ID
  title: String
  type: String
}

enum FetchOptions {
  ALL
  LICENSED
  UN_LICENSED
  All
  Licensed
  UnLicensed
}

"Report Information"
type ReportInfo {
  customFieldUsage: String
  customisation: String
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  imageUrl: String
  name: String
  otherInformation: String
  title: String
  usageNotes: String
}

type ReportCategorys {
  recordCount: Int!
  reportCategory: [ReportCategory]
}

"Report Category"
type ReportCategory {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  reportCount: Int
}

type LeadOptions {
  activityTypes: [ActivityType]
  leadSources: [LeadSource]
  outcomes: [Outcome]
  reason: [Reason]
}

type ActivityType {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type LeadSource {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  isEmailType: Boolean
  isReferrer: Boolean
  sequence: Boolean
}

type Reason {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  reasonType: Int
}

type Outcome {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  outcomeType: Int
}

type LeadSummaryListType {
  leads: [LeadSummary]
  leadSummaryCount: LeadSummaryCount
  recordCount: Int!
}

type LeadSummary {
  areaOfLaw: String
  assignedBy: ID
  assignedByEmailAddress: String
  assignedByName: String
  assignedTo: ID
  assignedToEmailAddress: String
  assignedToName: String
  createdDate: DateTime
  dateAssigned: DateTime
  email: String
  enquiryQuality: Int
  estimatedDisbursements: Decimal
  estimatedFees: Decimal
  firstName: String
  followUpAction: String
  followUpActionGuidID: ID
  followUpCompletedDate: DateTime
  followUpDueDate: DateTime
  followUpNotes: String
  gender: String
  "Unique Identifier"
  id: Int!
  initialEnquiryDate: DateTime
  internalNotes: String
  isClosed: Boolean
  isConflictCheckPerformed: Boolean
  isEstimatedDisbursementsIncludesTax: Boolean
  isEstimatedFeesIncludesTax: Boolean
  isIdentityCheckPerformed: Boolean
  isMarketingConsent: Boolean
  isNoConflict: Boolean
  isPrivacyStatementProvided: Boolean
  isTermsAndConditionsApproved: Boolean
  lastName: String
  lastUpdated: DateTime
  leadGuid: ID
  leadStatus: String
  likelihoodToProceed: Int
  matterCreatedDate: DateTime
  meetingLocation: String
  mobile: String
  name: String
  natureOfEnquiry: String
  office: String
  officeGuidID: ID
  organisation: String
  outcome: String
  outcomeDate: DateTime
  outcomeGuidID: ID
  phone: String
  positionAtOrganisation: String
  practiceAreaGuidID: ID
  properties: String
  reason: ID
  reasonGuidID: ID
  source: String
  sourceGuidID: ID
  sourceNotes: String
}

type LeadSummaryCount {
  calculatedRowCount: Int
  "Unique Identifier"
  id: Int!
  rowCountWithoutFilters: Int
}

type LeadDetails {
  areaOfLaw: String
  assignedBy: ID
  assignedByEmailAddress: String
  assignedByName: String
  assignedTo: ID
  assignedToEmailAddress: String
  assignedToName: String
  createdDate: DateTime
  dateAssigned: DateTime
  email: String
  firstName: String
  followUpAction: String
  followUpActionGuidID: ID
  followUpDate: DateTime
  followUpDueDate: DateTime
  followUpNotes: String
  gender: String
  "Unique Identifier"
  id: Int!
  initialEnquiryDate: DateTime
  isClosed: Boolean
  lastName: String
  lastUpdated: DateTime
  leadGuid: ID
  mobile: String
  natureOfEnquiry: String
  office: String
  officeGuidID: ID
  organisation: String
  outcome: String
  outcomeDate: DateTime
  outcomeGuidID: ID
  phone: String
  positionAtOrganisation: String
  practiceAreaGuidID: ID
  reason: ID
  reasonGuidID: ID
  source: String
  sourceGuidID: ID
  sourceNotes: String
}

type Enquiry {
  actions(guid: String): Actions
  activities: [EnquiryActivity]
  detail(guid: String): EnquiryDetail
  dueDates(isIncludeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCurrent: Boolean isIncludeClosed: Boolean sortColumn: String sortDirection: String groupBy: String groupByValue: String followUpDue: String newEnquiry: String assignedTo: String areaOfLaw: String isMyEnquiriesOnly: Boolean teamList: String isKeyOpportunity: Boolean enquiryQuality: String enquiryLikelihoodToProceed: String meetingWith: String isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): [DueDate]
  meetingInvitees(isIncludeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCurrent: Boolean isIncludeClosed: Boolean sortColumn: String sortDirection: String groupBy: String groupByValue: String followUpDue: String newEnquiry: String assignedTo: String areaOfLaw: String isMyEnquiriesOnly: Boolean teamList: String isKeyOpportunity: Boolean enquiryQuality: String enquiryLikelihoodToProceed: String meetingWith: String isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): [MeetingInvitee]
  outcomes: [EnquiryOutcome]
  reasons: [EnquiryOutcomeReason]
  scope: Scope
  sources: [EnquirySource]
  statuses(isIncludeCount: Boolean "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCurrent: Boolean isIncludeClosed: Boolean sortColumn: String sortDirection: String groupBy: String groupByValue: String followUpDue: String newEnquiry: String assignedTo: String areaOfLaw: String isMyEnquiriesOnly: Boolean teamList: String isKeyOpportunity: Boolean enquiryQuality: String enquiryLikelihoodToProceed: String meetingWith: String isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): [EnquiryStatus]
  summaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isIncludeCurrent: Boolean isIncludeClosed: Boolean sortColumn: String sortDirection: String groupBy: String groupByValue: String followUpDue: String newEnquiry: String assignedTo: String areaOfLaw: String isMyEnquiriesOnly: Boolean teamList: String isKeyOpportunity: Boolean enquiryQuality: String enquiryLikelihoodToProceed: String meetingWith: String isMeetingWithAdvancedFilter: Boolean status: String sourceList: String): EnquirySummaryList
}

type EnquiryActivity {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
}

type EnquirySource {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  isAvailableInAPI: Boolean
  isEmailType: Boolean
  isReferrer: Boolean
  sequence: Int
}

type EnquiryOutcomeReason {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  isReferrer: Boolean
  reasonType: Int
}

type EnquiryOutcome {
  description: String
  guidId: ID
  "Unique Identifier"
  id: Int!
  outcomeType: Int
}

type EnquiryStatus {
  count: Int
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
}

type EnquiryDetail {
  addressName: String
  areaOfLaw: String
  assignedBy: ID
  assignedByEmailAddress: String
  assignedByName: String
  assignedTo: ID
  assignedToEmailAddress: String
  assignedToIsStaff: Boolean
  assignedToName: String
  assignedToStaffGuid: ID
  assignedToStaffName: String
  assignmentReminderOffset: String
  clientAddressStreet2: String
  clientFirstName: String
  clientLastName: String
  clientRelationshipToEnquirer: String
  country: String
  createdByGuid: ID
  createdByName: String
  createdDate: DateTime
  dateAssigned: DateTime
  dOB: Date
  email: String
  enquiryNotes: String
  enquiryQuality: Int
  estimatedDisbursements: Decimal
  estimatedFees: Decimal
  files: [EntityDocument]
  firstName: String
  floor: String
  followUpAction: String
  followUpActionGuidID: ID
  followUpDate: DateTime
  followUpDueDate: DateTime
  followUpNotes: String
  gender: String
  guid: ID
  "Unique Identifier"
  id: Int!
  initialEnquiryDate: DateTime
  integrationClientId: String
  integrationContactId: String
  integrationMatterDocumentId: String
  integrationMatterId: String
  integrationOtherPartyId: String
  integrationSecondClientId: String
  integrationSecondContactId: String
  internalNotes: String
  internalNotesGuidID: ID
  isClosed: Boolean
  isConflictCheckPerformed: Boolean
  isEstimatedDisbursementsIncludesTax: Boolean
  isEstimatedFeesIncludesTax: Boolean
  isIdentityCheckPerformed: Boolean
  isKeyOpportunity: Boolean
  isMarketingConsent: Boolean
  isNoConflict: Boolean
  isPrivacyStatementProvided: Boolean
  isRiskAssessed: Boolean
  isSourceReferrer: Boolean
  isTermsAndConditionsApproved: Boolean
  lastName: String
  lastUpdated: DateTime
  likelihoodToProceed: Int
  matterFileNumber: String
  matterGuid: ID
  matterId: Int
  matterTitle: String
  mobile: String
  name: String
  nameGuid: ID
  nameTitle: String
  natureOfEnquiry: String
  number: String
  office: String
  officeGuidID: ID
  organisation: String
  organisationGuid: ID
  otherPartyAddressName: String
  otherPartyCountry: String
  otherPartyDOB: Date
  otherPartyEmail: String
  otherPartyFirstName: String
  otherPartyFloor: String
  otherPartyLastName: String
  otherPartyMobile: String
  otherPartyNameGuid: ID
  otherPartyNotes: String
  otherPartyNumber: String
  otherPartyOrganisation: String
  otherPartyOrganisationGuid: ID
  otherPartyPhone: String
  otherPartyPOBox: String
  otherPartyPOBoxType: String
  otherPartyPostalCountry: String
  otherPartyPostalPostCode: String
  otherPartyPostalState: String
  otherPartyPostalSuburb: String
  otherPartyPostcode: String
  otherPartyState: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  outcome: String
  outcomeDate: DateTime
  outcomeGuidID: ID
  phone: String
  pOBox: String
  pOBoxType: String
  positionAtOrganisation: String
  postalCountry: String
  postalPostCode: String
  postalState: String
  postalSuburb: String
  postcode: String
  practiceAreaGuidID: ID
  reason: ID
  reasonGuidID: ID
  referrerGuid: ID
  referrerName: String
  riskLevel: String
  riskLevelGuid: ID
  riskNotes: String
  secondClientAddressName: String
  secondClientCountry: String
  secondClientDOB: Date
  secondClientFirstName: String
  secondClientFloor: String
  secondClientGender: String
  secondClientGuid: ID
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsMarketingConsent: Boolean
  secondClientIsNoConflict: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientLastName: String
  secondClientNumber: String
  secondClientPOBox: String
  secondClientPOBoxType: String
  secondClientPostalCountry: String
  secondClientPostalPostCode: String
  secondClientPostalState: String
  secondClientPostalSuburb: String
  secondClientPostCode: String
  secondClientRelationshipToEnquirer: String
  secondClientState: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  source: String
  sourceGuidID: ID
  sourceNotes: String
  state: String
  status: String
  street: String
  suburb: String
}

type EnquirySummaryList {
  actualRowCountForSearch: Int
  recordCount: Int!
  summaries: [EnquirySummary]
}

type EnquirySummary {
  areaOfLaw: String
  assignedBy: ID
  assignedByEmailAddress: String
  assignedByName: String
  assignedTo: ID
  assignedToEmailAddress: String
  assignedToName: String
  assignedToTeam: String
  bookingStaffName: String
  createdByName: String
  createdDate: DateTime
  dateAssigned: DateTime
  daysTakenToFirstFollowUp: Int
  daysTakenToWonOrLoss: Int
  email: String
  enquiryNotes: String
  enquiryQuality: Int
  estimatedDisbursements: Decimal
  estimatedFees: Decimal
  files: [EntityDocument]
  firstName: String
  followUpAction: String
  followUpActionGuidID: ID
  followUpCompletedDate: DateTime
  followUpDueDate: DateTime
  followUpNotes: String
  gender: String
  guid: ID
  hadMeetingDate: DateTime
  "Unique Identifier"
  id: Int!
  initialEnquiryDate: DateTime
  internalNotes: String
  internalNotesGuidID: ID
  isClosed: Boolean
  isConflictCheckPerformed: Boolean
  isIdentityCheckPerformed: Boolean
  isKeyOpportunity: Boolean
  isMarketingConsent: Boolean
  isNoConflict: Boolean
  isPrivacyStatementProvided: Boolean
  isRiskAssessed: Boolean
  isTermsAndConditionsApproved: Boolean
  lastName: String
  lastUpdated: DateTime
  likelihoodToProceed: Int
  mainAddressPostCode: String
  mainAddressState: String
  mainAddressSuburb: String
  matterClientFirstName: String
  matterClientLastName: String
  matterCreatedDate: DateTime
  matterFeesBilled: Decimal
  matterFileNumber: String
  matterId: Int
  meetingBookingDate: DateTime
  meetingLocation: String
  meetingStartDate: DateTime
  mobile: String
  monthOfEnquiry: String
  name: String
  nameGuid: ID
  natureOfEnquiry: String
  notProceedingNotes: String
  office: String
  officeGuidID: ID
  organisation: String
  organisationGuid: ID
  otherPartyEmail: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyMobile: String
  otherPartyPhone: String
  outcome: String
  outcomeDate: DateTime
  outcomeGuidID: ID
  outcomeNotes: String
  phone: String
  positionAtOrganisation: String
  practiceAreaGuidID: ID
  reason: String
  reasonGuidID: ID
  referredToFirmName: String
  referrerGuid: ID
  referrerName: String
  relationshipToTheEnquirer: String
  riskLevel: String
  riskNotes: String
  secondClientAddressName: String
  secondClientCountry: String
  secondClientDOB: Date
  secondClientFirstName: String
  secondClientFloor: String
  secondClientGender: String
  secondClientGuid: ID
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsMarketingConsent: Boolean
  secondClientIsNoConflict: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientLastName: String
  secondClientNumber: String
  secondClientPOBox: String
  secondClientPOBoxType: String
  secondClientPostalCountry: String
  secondClientPostalPostCode: String
  secondClientPostalState: String
  secondClientPostalSuburb: String
  secondClientPostCode: String
  secondClientRelationshipToEnquirer: String
  secondClientState: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  source: String
  sourceGuidID: ID
  sourceNotes: String
  status: String
}

type Scope {
  "Unique Identifier"
  id: Int!
  myEnquiriesOnlySelected: Boolean
  showMyEnquiriesOnly: Boolean
}

type MeetingInvitee {
  emailAddress: String
  entityType: Int
  "Unique Identifier"
  id: Int!
  inviteeGuid: ID
  inviteeName: String
  isActive: Boolean
  isRedViewUser: Boolean
}

type EventAndCampaignType {
  attendeeSummaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isConvey: Boolean): EventAndCampaignAttendeeSummaryList
  summaryList("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String isConvey: Boolean): EventAndCampaignSummaryList
}

type EventAndCampaignSummaryList {
  actualRowCountForSearch: Int
  eventAndCampaignSummaries: [EventAndCampaignSummary]
  recordCount: Int!
}

type EventAndCampaignSummary {
  attended: String
  availableSeats: Int
  category: Int
  date: DateTime
  guid: ID
  "Unique Identifier"
  id: Int!
  name: String
  negativeResponse: Int
  noResponse: Int
  positiveResponse: Int
  status: String
  type: String
  venue: String
}

type EventAndCampaignAttendeeSummaryList {
  actualRowCountForSearch: Int
  eventAndCampaignAttendeeSummaries: [EventAndCampaignAttendeeSummary]
  recordCount: Int!
}

type EventAndCampaignAttendeeSummary {
  attendanceNotes: String
  guid: ID
  "Unique Identifier"
  id: Int!
  isAttended: Boolean
  isNegativeResponse: Boolean
  isPositiveResponse: Boolean
  name: ID
  organisation: String
  specialRequirments: String
}

"Red View GraphQL mutation schema definitons"
type Mutation {
  addFirmDepartmentMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  addFirmOfficeMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  addFirmTeamMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  addNewTimeslip(matterId: Int activityId: Int activityString: String chargeLevelId: Int itemDate: DateTime! timeWorkedMinutes: Int! startTimeSeconds: Int endTimeSeconds: Int billingNote: String timeslipNote: String timeUnits: Int! valueAmount: Decimal shouldSubmit: Boolean! shouldPost: Boolean chargeRate: Decimal timesheetId: Int source: String feeEarnerId: String): TimeslipCommandResultsType
  addTaskTypeToGroup(guidId: String groupId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  addTimeslipRange(startDate: DateTime! endDate: DateTime! matterId: Int! activityId: Int activityString: String! chargeLevelId: Int timeWorkedMinutes: Int! startTimeSeconds: Int endTimeSeconds: Int billingNote: String timeUnits: Int! valueAmount: Decimal shouldSubmit: Boolean!): TimeslipCommandResultsType
  addUserMatterAccessActivity(matterId: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  addUserPartyAccessActivity(nameId: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  applicationSettings: ApplicationSettingsMutation
  applySchemaToTenant(tenants: [String] applyUpdatesToDatabase: Boolean backupDatabase: Boolean ignoreVersion: Boolean generateScript: Boolean configName: String executeNightlyJobAfterUpdate: Boolean isProvisioning: Boolean sourceSystem: SourceSystems processId: String dateTime: DateTime): Boolean
  archiveMatterRequest(batchGuidID: String taskRequestGuid: String matterGuid: String archive: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  assignStaffToEnquiry(input: AssignStaffToEnquiryInput isKeyOpportunity: Boolean isGenerateMaterialisedView: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  assignStaffToLead(guidID: String leadGuid: String dateAssigned: DateTime assignedTo: String assignedBy: String isLeadOperation: Boolean updatedVales: String followUpDueDate: DateTime processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  autoSignIn("Encrypted Token" token: String): AutoSignInResults
  billMatterRequest(batchGuidID: String taskRequestGuid: String matterGuid: String billFeesAmount: Decimal billDisbursementsAmount: Decimal applyTrustAmount: Decimal writeOffFeesAmount: Decimal writeOffDisbursementsAmount: Decimal comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  changePassword(oldPassword: String newPassword: String isForcedPasswordChange: Boolean userName: String tenantIdForForcedPasswordChange: String): ChangePassword
  changeTaskAllocation(assignedTo: String assignedBy: String allocatedToEntityType: Int guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  changeTaskCategory(category: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  changeTaskOwner(owner: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  changeTaskPriority(priority: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  changeTaskStatus(assignedTo: String assignedBy: String startDate: DateTime dueDate: DateTime completionDate: DateTime estimatedEffort: String duration: String completionNotes: String changedStatus: String owner: String allocatedToEntityType: Int guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  closeMatterRequest(batchGuidID: String taskRequestGuid: String matterGuid: String close: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  completeCreateClient(input: CompleteCreateClientInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  completeTask(startDate: DateTime dueDate: DateTime completionDate: DateTime duration: String completionNotes: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createActionMessage(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createClientAndContact(input: CreateClientAndContactInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createClientAndContactNameTag(guidId: String nameGuidId: String tagGuidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createClientAndContactTag(tagTypeId: String sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createClientAndContactTagType(tagEntity: Int sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createClientContact(input: CreateClientContactInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createClientTask(clientGuid: String input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createContact(input: CreateContactInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createCorrespondenceActivity(sequence: Int isSystem: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createDashboardPanel(usedByFirmDashboard: Boolean usedByFeeEarnerDashboard: Boolean usedByEnquiryDashboard: Boolean usedByTaskDashboard: Boolean usedByClientDashboard: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createEnquiry(input: CreateEnquiryInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createEventStatus(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createEventType(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createFirmDepartment(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createFirmOffice(timezone: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createFirmTeam(usedByTasks: Boolean usedByFinancials: Boolean usedByEnquiries: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createGeneralMaterial(input: CreateGeneralMaterialInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createGeneralTask(input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createLead(leadGuid: String createdDate: DateTime lastUpdated: DateTime firstName: String lastName: String email: String gender: String initialEnquiryDate: DateTime phone: String mobile: String source: String office: String sourceNotes: String organisation: String positionAtOrganisation: String natureOfEnquiry: String areaOfLaw: String dateAssigned: DateTime assignedTo: String assignedBy: String followUpDueDate: DateTime followUpAction: String followUpDate: DateTime followUpNotes: String outcome: String outcomeDate: DateTime reason: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createLeadFollowUpAction(systemName: String systemAction: String notes: String sequence: Int actionedDescription: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createLeadReason(isReferrer: Boolean type: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createLeadSource(isReferrer: Boolean isEmailType: Boolean sequence: Int isAvailableInAPI: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createLocation(sequence: Int isAvailableInAPI: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createMatterTask(matterGuid: String input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createMeetingBooking(input: BookMeetingInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createNewRole(name: String description: String isExternal: Boolean matterSummaryViewTemplateId: Int leadSummaryViewTemplateId: Int matterManagementSummaryViewTemplateId: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createNewUser(friendlyName: String userName: String email: String password: String role: String isActive: Boolean organisation: String brand: Int changePasswordOnLogin: Boolean isAdministrator: Boolean allAccess: Boolean personResponsible: Boolean personActing: Boolean personAssisting: Boolean isProvisioning: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createPendingComment("Message subject" subject: String "Message body" comment: String! "Message posted by. Uses logged in user if empty" postedBy: String "Message internal indicator" isInternal: Boolean = true "Message post time. Uses system time if empty" postedTime: DateTime "Matter Details Identifier" matterId: Int!): Boolean
  createPendingPartyComment("Message subject" subject: String "Message body" comment: String! "Message post time. Uses system time if empty" postedTime: DateTime "Matter Details ID" matterId: Int "Reference" reference: String "Matter Details Identifier" nameId: Int!): Boolean
  createPhoneTask(clientGuid: String matterGuid: String fromNameGuid: String fromName: String phoneNumber: String organisation: String organisationGuid: String isPhoneCall: Boolean isReturnedCall: Boolean isWillCallAgain: Boolean input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  createPoBoxType(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createPracticeArea(sequence: Int isAvailableInAPI: Boolean estimatedFees: Decimal isEstimatedFeesIncludesTax: Boolean estimatedDisbursements: Decimal isEstimatedDisbursementsIncludesTax: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createPriority(sequence: Int level: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createReferrerSource(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createReferrerType(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createRelationshipQuality(sequence: Int qualityLevel: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createRiskLevel(level: Int sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createTaskCategory(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createTaskType(estimatedEffort: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createTaskTypeGroup(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createTimer(timerGuid: String createdDate: DateTime timeWorkedMinutes: Int matterId: Int activityId: Int chargeRateId: Int chargeRate: Int timesheetNote: String billingNote: String timeUnits: Int isRunning: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  createUserAssistant(input: CreateUserAssistantInputType processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  customizeColumnConfig("Unique Id of the SummaryColumnConfig" configId: Int "Name of the template" name: String "True if it is a security configuration" isSecurity: Boolean = false "True if it is a private template for the user only" isPrivate: Boolean = false "True if it is a default view for the user" isDefault: Boolean = false "True if it is a default for the Tenant" isTenantDefault: Boolean = false "Enum for Configuration Types. Pass 1 for MatterSummaryView" configType: Int "Column configuration" columnConfigJson: String "True if it is suppose to be deleted" isDelete: Boolean = false "True if it is suppose to be New Matter Summary View Enabled" isNewMatterSummary: Boolean = false): Boolean
  deleteActionMessage(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteClientAndContactNameTag(guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteClientAndContactTag(tagTypeId: String sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteClientAndContactTagType(tagEntity: Int sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteCorrespondenceActivity(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteDashboardPanel(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteEmailTemplate(emailTemplateGuid: String emailType: EmailType isInternalRole: Boolean roleId: String selectedUserId: String firmTeamId: String emailStyle: EmailStyle integrationTemplateId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteEnquiry(guid: String isKeyOpportunity: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  deleteEventStatus(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteEventType(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFeatureAccessConfiguration(isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFeatureLayoutConfiguration(layoutId: Int isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean dashboardPanelId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFeatureLicenceConfiguration(isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFirmDepartment(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFirmOffice(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteFirmTeam(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteGeneralMaterial(generalMaterialId: Int processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  deleteLeadFollowUpAction(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteLeadReason(type: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteLeadSource(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteLocation(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deletePoBoxType(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deletePracticeArea(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deletePriority(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteReferrerSource(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteReferrerType(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteRelationshipQuality(sequence: Int qualityLevel: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteRiskLevel(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteRole(roleGuid: String name: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteSplashScreen(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTask(guid: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTaskCategory(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTaskType(estimatedEffort: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTaskTypeGroup(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTimer(timerGuid: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteTimeslip(timesheetId: Int source: String feeEarnerId: String): TimeslipCommandResultsType
  deleteUser(userGuid: String userName: String forceDelete: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deleteUserAssistant(guid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  deleteUserDefinedHelp(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  deRegisterPushNotifications(notificationChannel: NotificationChannel deviceHandle: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  dueTask(startDate: DateTime dueDate: DateTime estimatedEffort: String reminderOffset: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  eventsAndCampaign: EventsAndCampaignMutation
  finaliseTaskBatchRequest(batchGuidID: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  followUpEnquiry(input: FollowUpEnquiryInput isKeyOpportunity: Boolean isGenerateMaterialisedView: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  followUpLead(guidID: String leadGuid: String followUpAction: String followUpDate: DateTime followUpNotes: String outcome: String outcomeDate: DateTime reason: String isLeadOperation: Boolean updatedValues: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  generateRandomPassword: String
  grantLeapDocumentAccess(matterGuid: String documentGuids: [String] roleGuids: [String] processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  grantLeapMatterAccess(matterGuid: String cardGuid: String name: String email: String roleGuid: String role: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  initiateDashboardChartProjections(userId: String processId: String dateTime: DateTime tenantId: String): Boolean
  initiateEnquiryReplication(sourceTenantId: String enquiryGuid: String processId: String dateTime: DateTime tenantId: String): MutationResponse
  initiateInvoiceDashboardChartProjections(userId: String processId: String dateTime: DateTime tenantId: String): Boolean
  initiateInvoiceSummaryProjections(startEventStoreId: RedViewLongGraphType endEventStoreId: RedViewLongGraphType invoiceGuid: String processId: String dateTime: DateTime tenantId: String): Boolean
  initiateLeadDashboardChartProjections(leadGuid: String userId: String processId: String dateTime: DateTime tenantId: String): Boolean
  initiateLeapTableFieldsSync(processId: String dateTime: DateTime tenantId: String): MutationResponse
  initiateProjections(projectionsToExecute: [ProjectionsToExecute] userGuid: String startEventStoreId: RedViewLongGraphType endEventStoreId: RedViewLongGraphType force: Boolean processId: String dateTime: DateTime tenantId: String): Boolean
  integrations: IntegrationMutation
  leapApiDataProcessor(isPublishAction: Boolean matterGuid: String sagaToExecute: [SagaToExecute] initialSync: Boolean resyncGuid: String mapMissingMatters: Boolean processId: String dateTime: DateTime tenantId: String): MutationResponse
  leapApiDataResync(matterGuid: String entityToSync: [EntityToSync] sagaToExecute: [SagaToExecute] tenants: String operationToPerform: ResyncOperation forceReMapping: Boolean reMapDocumentsPerMatter: Boolean forceReSync: Boolean processId: String dateTime: DateTime): MutationResponse
  leapApiDataSync(isPublishAction: Boolean matterGuid: String forceResync: Boolean resyncGuid: String matterGuids: String initiateMapping: Boolean entityToSync: [EntityToSync] processId: String dateTime: DateTime tenantId: String): MutationResponse
  leapApiSyncMissingMatters(entityToSync: [EntityToSync] matterGuids: String processId: String dateTime: DateTime tenantId: String): MutationResponse
  leapContactUs(name: String email: String firm: String page: String selection: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  leapFirmResetAccess(authenticationCode: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  leapMatterFinancialsSync(atDate: DateTime matterGuid: String financialToSync: [FinancialToSync] operationToPerform: ResyncOperation fetchLastMonthData: Boolean processId: String dateTime: DateTime tenantId: String): MutationResponse
  linkMatterToEnquiry(input: LinkMatterToEnquiryInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  login(tenantId: String userName: String password: String): LoginResults
  logTaskActivity(activityText: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  matter: MatterMutation
  mergeDocuments(matterId: String fileNumber: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  messageTask(includeOwnerOrAssignor: Boolean includeAssignee: Boolean message: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  notifyUserViaPushNotifications(notificationChannel: NotificationChannel messageTemplateProperties: String recipientUser: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  otp(tenantId: String otp: String token: String): LoginResults
  pauseTimer(timerGuid: String pauseDateTime: DateTime processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  provisioning: ProvisioningMutation
  provisionLeapFirm(authenticationCode: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  reconcileSubscriptionRules(processId: String dateTime: DateTime): Boolean
  refreshToken("Tenant Identifier name" tenantId: String! "Refresh Token string" refreshToken: String!): RefreshToken
  registerForPushNotifications(notificationChannel: NotificationChannel deviceHandle: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  removeFirmDepartmentMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  removeFirmOfficeMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  removeFirmTeamMember(guidId: String groupId: String staffIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  removeLeapMatterAccess(matterGuid: String cardGuid: String roleGuid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  removeTaskTypeFromGroup(guidId: String groupId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  requestNewPassword(email: String tenantId: String processId: String dateTime: DateTime userId: String): Boolean
  reSendEmailNotification(emailType: EmailType entityGuid: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  resendOtp(tenantId: String token: String): LoginResults
  resendUserRegistrationEmail(userGuid: String userName: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  resetUser(userGuid: String userName: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  revokeLeapDocumentAccess(matterGuid: String documentGuid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  scrubEnquiryData(processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  scrubEnquiryDataByEnquiry(enquiryGuids: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  sendEmail(to: String cc: String bcc: String subject: String templateParamsJson: String retrieveSubject: Boolean emailType: EmailType sendSeparateEmailToEachRecipient: Boolean attachments: [EmailAttachment] redirectUrl: RedirectUrl entityGuid: String areaOfLaw: String body: String fromEmail: String fromName: String overrideFrom: Boolean deleteTempDocuments: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  sendLeapMatterMessage(matterGuid: String staffGuid: String message: String postedTime: DateTime key: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  sendTaskReminder(taskGuid: String isOverDue: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  setPassword(tenantId: String userId: String code: String newPassword: String): SetPassword
  settings: SystemMutation
  startTask(startDate: DateTime dueDate: DateTime estimatedEffort: String changedStatus: String reminderOffset: String guidId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  startTimer(timerGuid: String startDateTime: DateTime processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  stopAllJobs(processId: String dateTime: DateTime): Boolean
  submitExistingTimeslip(timesheetId: Int source: String feeEarnerId: String): TimeslipCommandResultsType
  submitMultipleTimeslips(timesheetIds: [Int]! feeEarnerId: String): Boolean
  submitTimer(timerGuid: String isSubmitAndSync: Boolean timeWorkedMinutes: Int matterId: Int activityId: Int chargeRateId: Int chargeRate: Int timesheetNote: String billingNote: String timeUnits: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  tenant: TenantsMutation
  timelineDelete("Timesheet Ids List" timesheetIds: [Int]!): Boolean
  transferMatterTrustToInvoiceRequest(batchGuidID: String taskRequestGuid: String matterGuid: String trustTransferAmount: Decimal invoiceToApply: String comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateActionMessage(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateActionMessageSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateActivityAsFavourite(activityId: Int activityName: String shouldFavourite: Boolean! feeEarnerId: String): Boolean
  updateArchiveMatterRequest(taskRequestGuid: String matterGuid: String archive: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateBillMatterRequest(taskRequestGuid: String matterGuid: String billFeesAmount: Decimal billDisbursementsAmount: Decimal applyTrustAmount: Decimal writeOffFeesAmount: Decimal writeOffDisbursementsAmount: Decimal comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateClientAndContactTag(tagTypeId: String sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateClientAndContactTagSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateClientAndContactTagType(tagEntity: Int sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateClientAndContactTagTypeSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateClientTask(clientGuid: String input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateCloseMatterRequest(taskRequestGuid: String matterGuid: String close: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateConnectMenuButtons(menuButtonsJson: String): Boolean
  updateCorrespondenceActivity(sequence: Int isSystem: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateCorrespondenceActivitySequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateCrmMenuButtons(menuButtonsJson: String): Boolean
  updateDashboardPanel(usedByFirmDashboard: Boolean usedByFeeEarnerDashboard: Boolean usedByEnquiryDashboard: Boolean usedByTaskDashboard: Boolean usedByClientDashboard: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateEmailTemplate(emailTemplateGuid: String isInternalRole: Boolean roleId: String selectedUserId: String template: String subject: String emailType: EmailType firmTeamId: String matchedProperties: MatchedPropertiesInput ccAssistant: Boolean emailStyle: EmailStyle integrationTemplateId: String name: String description: String isActive: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateEnquiry(input: UpdateEnquiryInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateEnquiryLikelihood(guid: String likelihoodToProceed: Int isKeyOpportunity: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateEnquiryQuality(guid: String enquiryQuality: Int isKeyOpportunity: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateEventStatus(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateEventStatusSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateEventType(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateEventTypeSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFeatureAccessConfiguration(featureList: [String] isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFeatureLayoutConfiguration(featureLayoutConfigurationList: [FeatureLayoutConfigurationInput] layoutId: Int isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean dashboardPanelId: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFeatureLicenceConfiguration(featureList: [String] isInternalRole: Boolean isAdministrator: Boolean roleId: String userEmail: String isPersonal: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFirmDepartment(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFirmOffice(timezone: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateFirmTeam(usedByTasks: Boolean usedByFinancials: Boolean usedByEnquiries: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateGeneralMaterial(input: UpdateGeneralMaterialInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateGeneralMaterialSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateGeneralTask(input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateLead(leadGuid: String lastUpdated: DateTime updatedValues: String firstName: String lastName: String email: String gender: String initialEnquiryDate: DateTime phone: String mobile: String source: String office: String sourceNotes: String organisation: String positionAtOrganisation: String natureOfEnquiry: String areaOfLaw: String dateAssigned: DateTime assignedTo: String assignedBy: String followUpDueDate: DateTime followUpAction: String followUpDate: DateTime followUpNotes: String outcome: String outcomeDate: DateTime reason: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateLeadFollowUpAction(systemName: String systemAction: String notes: String sequence: Int actionedDescription: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLeadFollowUpActionSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLeadReason(type: Int isReferrer: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLeadSource(isReferrer: Boolean isEmailType: Boolean sequence: Int isAvailableInAPI: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLeadSourceSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLocalSettings(appType: String! settingsJson: String!): Boolean
  updateLocation(sequence: Int isAvailableInAPI: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateLocationSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateMailingList(guid: String name: String filters: String exclusionNameIdList: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateMatterAsFavourite(shouldFavourite: Boolean = true feeEarnerId: String "Matter Details Identifier" matterId: Int!): Boolean
  updateMatterTask(matterGuid: String input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateMobileMenuButtons(menuButtonsJson: String): Boolean
  updateName(input: UpdateNameInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updatePartyAsFavourite(shouldFavourite: Boolean = true "Matter Details Identifier" nameId: Int!): Boolean
  updatePhoneTask(clientGuid: String matterGuid: String fromName: String fromNameGuid: String phoneNumber: String organisation: String organisationGuid: String isPhoneCall: Boolean isReturnedCall: Boolean isWillCallAgain: Boolean input: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updatePoBoxType(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updatePoBoxTypeSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updatePracticeArea(sequence: Int isAvailableInAPI: Boolean estimatedFees: Decimal isEstimatedFeesIncludesTax: Boolean estimatedDisbursements: Decimal isEstimatedDisbursementsIncludesTax: Boolean guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updatePracticeAreaSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updatePriority(sequence: Int level: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateReferrer(input: UpdateReferrerInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateReferrerSource(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateReferrerType(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateRelationshipQuality(sequence: Int qualityLevel: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateRiskLevel(level: Int sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateRiskLevelSequence(lookupSequences: [LookupSequence] processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateRole(roleGuid: String name: String description: String isExternal: Boolean matterSummaryViewTemplateId: Int leadSummaryViewTemplateId: Int matterManagementSummaryViewTemplateId: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateSplashScreen(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String template: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateStaff(title: String salutation: String initials: String firstName: String middleName: String lastName: String dateOfBirth: DateTime staffRole: String isActive: Boolean staffCode: String comments: String startDate: DateTime endDate: DateTime updateFromRedView: Boolean partyGuid: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateStaffDailyBudget(input: UpdateStaffDailyBudgetInput staffWorkingDaysInput: StaffWorkingDaysInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateStaffMonthlyBudget(staffGuid: String staffMonthlyBudgetInput: UpdateStaffMonthlyBudgetInput staffWorkingDaysInput: StaffWorkingDaysInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateTaskCategory(guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateTaskType(estimatedEffort: String guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateTaskTypeGroup(sequence: Int guidId: String description: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateTimeMenuButtons(activityButtonsJson: String): Boolean
  updateTimer(timerGuid: String endDate: DateTime timeWorkedMinutes: Int matterId: Int activityId: Int chargeRateId: Int chargeRate: Int timesheetNote: String billingNote: String timeUnits: Int processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateTimeslip(matterId: Int activityId: Int activityString: String chargeLevelId: Int itemDate: DateTime! timeWorkedMinutes: Int! startTimeSeconds: Int endTimeSeconds: Int billingNote: String timeslipNote: String timeUnits: Int! valueAmount: Decimal shouldSubmit: Boolean! shouldPost: Boolean chargeRate: Decimal timesheetId: Int source: String feeEarnerId: String): TimeslipCommandResultsType
  updateTransferMatterTrustToInvoiceRequest(taskRequestGuid: String matterGuid: String trustTransferAmount: Decimal invoiceToApply: String comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateUser(userGuid: String friendlyName: String userName: String email: String password: String role: String isActive: Boolean organisation: String brand: Int changePasswordOnLogin: Boolean isAdministrator: Boolean allAccess: Boolean personResponsible: Boolean personActing: Boolean personAssisting: Boolean processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateUserAssistant(input: UpdateUserAssistantInputType processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateUserDefinedHelp(templateType: Boolean isInternalRole: Boolean roleId: String selectedUserId: String template: String processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateWriteOffMatterDebtorsRequest(taskRequestGuid: String matterGuid: String writeOffDebtorsAmount: Decimal closeMatterAfterWriteOff: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  updateWriteOffMatterWIPRequest(taskRequestGuid: String matterGuid: String writeOffFeesAmount: Decimal writeOffDisbursementsAmount: Decimal closeMatterAfterWriteOff: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  uploadMatterDocument(input: MatterDocumentUploadInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  writeOffMatterDebtorsRequest(batchGuidID: String taskRequestGuid: String matterGuid: String writeOffDebtorsAmount: Decimal closeMatterAfterWriteOff: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
  writeOffMatterWIPRequest(batchGuidID: String taskRequestGuid: String matterGuid: String writeOffFeesAmount: Decimal writeOffDisbursementsAmount: Decimal closeMatterAfterWriteOff: Boolean comments: String taskInput: TaskInput processId: String dateTime: DateTime tenantId: String userId: String): Boolean
}

type LoginResults {
  accessToken: String
  authenticationMethod: String
  error: String
  errorDescription: String
  expiresIn: Int!
  forceChangePassword: Boolean!
  isError: Boolean!
  refreshToken: String
  statusCode: Int
  tenantOptions: TenantOptions
}

type RefreshToken {
  accessToken: String
  authenticationMethod: String
  error: String
  errorDescription: String
  expiresIn: Int!
  forceChangePassword: Boolean!
  isError: Boolean!
  refreshToken: String
  statusCode: Int
  tenantOptions: TenantOptions
}

type AutoSignInResults {
  accessToken: String
  error: String
  errorDescription: String
  expiresIn: Int!
  isError: Boolean!
  redirectUrl: String
  refreshToken: String
  statusCode: Int
}

type ChangePassword {
  accessToken: String
  expiresIn: Int
  isError: Boolean
  message: String!
  refreshToken: String
  statusCode: Int
}

type SetPassword {
  message: String!
  statusCode: Int
}

input EmailAttachment {
  data: RedViewByteGraphType
  name: String
}

scalar RedViewByteGraphType

input RedirectUrl {
  paramsJson: String
}

enum NotificationChannel {
  I_OS
  WEB
  ANDROID
  WIN_8
  EMAIL
  iOS
  Android
  Web
  Email
  Win8
}

input FeatureLayoutConfigurationInput {
  featureGuid: String
  isHidden: Boolean
  sequence: Int
}

input MatchedPropertiesInput {
  entity: String
  properties: [MatchedPropertyInput]
}

input MatchedPropertyInput {
  key: String
  source: String
  scope: String
  recipient: String
  location: String
  assignee: String
}

enum ProjectionsToExecute {
  MATTER_SUMMARY
  USER_MATTER_ACCESS
  ENQUIRY
  REFERRER
  PARTY_SUMMARY
  INVOICE_SUMMARY
  UserMatterAccess
  MatterSummary
  Enquiry
  Referrer
  InvoiceSummary
}

scalar RedViewLongGraphType

enum SourceSystems {
  LEAP
  IN_PROTECH
  FILE_PRO
  OPEN_PRACTICE
  ADERANT
  IMPORT
  INFINITY
  PRACTICE_EVOLVE
  COYOTE
  LAW_MASTER
  Leap
  InProtech
  FilePro
  OpenPractice
  Aderant
  Import
  Infinity
  PracticeEvolve
  Coyote
  LawMaster
}

type TimeslipCommandResultsType {
  error: String!
  success: Boolean
}

input TaskInput {
  guid: ID
  description: String!
  notes: String
  assignedTo: ID
  allocatedToEntityType: Int
  assignedBy: ID
  priority: String
  category: String
  dueDate: DateTime
  estimatedEffort: String
  duration: String
  startDate: DateTime
  completionDate: DateTime
  completionNotes: String
  owner: ID
  userDefinedTaskType: String
  activityText: String
  reminderOffset: String
  isConfidential: Boolean
  files: [UploadFile]
}

input UploadFile {
  name: String
  tempFileName: String
  guidID: ID
  status: Int
  file: Upload
}

"A meta type that represents a file upload."
scalar Upload

input LookupSequence {
  guidId: ID
  sequence: Int
}

type MutationResponse {
  error: String
  status: Boolean
}

input UpdateReferrerInput {
  nameGuid: ID
  referrerTypeGuid: ID
  qualityOfRelationshipGuid: ID
  sourceGuid: ID
  relationshipManagerGuid: ID
}

input UpdateNameInput {
  hasMarketingConsent: Boolean!
  nameGuid: ID
  tags: [String]
}

input MatterDocumentUploadInput {
  matterGuid: ID
  notes: String
  files: [UploadFile]
}

input UpdateStaffDailyBudgetInput {
  staffDailyBudgetsInput: [StaffDailyBudgetInput]
}

input StaffDailyBudgetInput {
  staffId: ID
  budgetDate: String
  chargeableHours: Float
  nonChargeableHours: Float
  feesRecorded: Decimal
  feesBilled: Decimal
  feesCollected: Decimal
}

input StaffWorkingDaysInput {
  financialYearStartDate: Date
  sunday: Boolean
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
}

input UpdateStaffMonthlyBudgetInput {
  staffMonthlyBudgetsInput: [StaffMonthlyBudgetInput]
}

input StaffMonthlyBudgetInput {
  monthStartDate: String
  chargeableHours: Float
  nonChargeableHours: Float
  feesRecorded: Decimal
  feesBilled: Decimal
  feesCollected: Decimal
}

input CreateGeneralMaterialInput {
  type: Int
  sequence: Int
  label: String
  url: String
  convery: Boolean
  description: String
  matterCategoryId: Int
  matterTypeId: Int
  file: UploadFile
}

input UpdateGeneralMaterialInput {
  type: Int
  sequence: Int
  label: String
  url: String
  convery: Boolean
  description: String
  matterCategoryId: Int
  matterTypeId: Int
  generalMaterialId: Int
  file: UploadFile
}

type IntegrationMutation {
  innography: InnographyMutation
  vision6: Vision6Mutation
}

type Vision6Mutation {
  authenticate(token: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  update(token: String contactListId: String contactListName: String sendEmailsViaVision6: Boolean isEnabled: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type InnographyMutation {
  update(url: String isEnabled: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type SystemMutation {
  applicationSecuritySettings: ApplicationSecuritySettingsMutation
  chartDefaultConfig: ChartDefaultConfigMutation
  connectSettings: ConnectSettingsMutation
  emailConfig: EmailConfigMutation
  enquiryDefaultConfig: EnquiryDefaultConfigMutation
  firmDetails: FirmDetailsMutation
  inprotechSettings: InprotechSettingsMutation
  phoneMessageDefaultConfig: PhoneMessageDefaultConfigMutation
  regionSettings: RegionSettingsMutation
  staffBudgetConfig: StaffBudgetConfigMutation
  taskDefaultConfig: TaskDefaultConfigMutation
  timeRecordingDefaults: TimeRecordingDefaultsMutation
  timeRecordingSettings: TimeRecordingSettingsMutation
  timeRecordingWarnings: TimeRecordingWarningsMutation
}

type EnquiryDefaultConfigMutation {
  update(isManualEntry: Boolean isCalculatedDays: Boolean isCalculatedHours: Boolean timeOfDay: String addDays: Int addHours: Decimal defaultMeetingLength: String reminder: String overdueReminder: String isSendReminderOnWeekend: Boolean isSendReminderOnWeekendForOverDueReminders: Boolean isSendInvitationToEnquirer: Boolean isSendInvitationToAssignee: Boolean isLocationFieldMandatory: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type TaskDefaultConfigMutation {
  update(reminder: String overdueReminder: String isSendReminderOnWeekend: Boolean isSendReminderOnWeekendForOverDueReminders: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type PhoneMessageDefaultConfigMutation {
  update(reminder: String overdueReminder: String isSendReminderOnWeekend: Boolean isSendReminderOnWeekendForOverDueReminders: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type EmailConfigMutation {
  update(sendEmailOnBehalfOf: String fromName: String replyTo: String confirmationBcc: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type FirmDetailsMutation {
  update(firmName: String firmAddress: String firmPhone: String firmWebsite: String firmEmailContact: String firmHelpDeskContact: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type ApplicationSecuritySettingsMutation {
  update(mFA: Boolean passwordStrength: Int passwordLength: Int processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type ConnectSettingsMutation {
  update(staffContactFilter: String welcomeMessage: String emailDocumentNotifications: Boolean emailMessageNotifications: Boolean pushDocumentNotifications: Boolean pushMessageNotifications: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type InprotechSettingsMutation {
  update(filingDate: String registrationDate: String internalImportanceLevel: Int externalImportanceLevel: Int clientNoteActivityCategory: Int clientNoteActivityType: Int fileNoteActivityCategory: Int fileNoteActivityType: Int applicationNumber: String grantNumber: String publicationNumber: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type RegionSettingsMutation {
  update(homeCountry: String timeZone: String currencyCode: String currencySymbol: String financialYearStart: DateTime taxLabel: String taxPercentage: Decimal processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type TimeRecordingDefaultsMutation {
  update(tenantTimeCaptureMode: String submissionType: String defaultDurationUnits: Int defaultDurationMinutes: Int phoneCallActivity: String emailActivity: String suggestCustomButtons: Boolean useSmartSettings: Boolean timeCaptureMode: String timeSelectionMinuteInterval: Int processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type TimeRecordingSettingsMutation {
  update(unitsPerHour: Int standardHoursPerDay: Decimal expectedHoursPerDay: Int useStartEndTime: Boolean copyActivityAsNote: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type TimeRecordingWarningsMutation {
  update(warnOnExceedingHours: Boolean warnIfNotToday: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type StaffBudgetConfigMutation {
  update(enableBudgetSync: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type ChartDefaultConfigMutation {
  update(minimumEnquiriesProcessed: Int processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type ProvisioningMutation {
  publisher: PublisherMutation
  tenant: TenantMutation
}

type TenantMutation {
  create(input: TenantInput processId: String dateTime: DateTime): MutationResponse
  delete(id: String processId: String dateTime: DateTime): MutationResponse
  update(input: TenantInput processId: String dateTime: DateTime): MutationResponse
}

input TenantInput {
  id: String!
  name: String!
  title: String!
  contactEmail: String!
  notificationOverride: String
  applicationUrl: String!
  internalUserLicenses: Int!
  logo: UploadFile
  backend: SourceSystems
  enabled: Boolean!
  leapLicence: LeapLicence
  region: Region
  size: DatabaseSize
}

enum LeapLicence {
  NOT_SET
  LEAP_ADD_IN
  LEAP_WORKPLACE
  BOTH
  LeapAddIn
  LeapWorkplace
  Both
}

enum Region {
  AU
  UK
  US
  AU
  UK
  US
}

enum DatabaseSize {
  SMALL
  MEDIUM
  LARGE
  Small
  Medium
  Large
}

type PublisherMutation {
  create(id: String processId: String dateTime: DateTime): MutationResponse
  dataPublisherCommand(route: String action: String tenant: String processId: String dateTime: DateTime): MutationResponse
  delete(id: String processId: String dateTime: DateTime): MutationResponse
  documentPublisherCommand(route: String action: String tenant: String processId: String dateTime: DateTime): MutationResponse
  reset(id: String processId: String dateTime: DateTime): MutationResponse
}

type ApplicationSettingsMutation {
  aPIUser: CreateApiUserMutation
  dataPublisherSettings: DataPublisherSettingsMutation
  documentPublisherSettings: DocumentPublisherSettingsMutation
  futureTimeSynchronization: FutureTimeSynchronizationMutation
  licencing: LicencingMutation
  mobileSettings: MobileSettingsMutation
}

type MobileSettingsMutation {
  update(showMatterSelection: Boolean showPhoneCallButton: Boolean showTimerButton: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type DataPublisherSettingsMutation {
  update(publishFinancials: Boolean publishTimeline: Boolean timeOnly: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type DocumentPublisherSettingsMutation {
  update(publishDocuments: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type LicencingMutation {
  update(internalRegisteredUsers: Int processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type CreateApiUserMutation {
  update(clientKey: String clientSecret: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type FutureTimeSynchronizationMutation {
  update(enableFutureTimeSynchronization: Boolean processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

type MatterMutation {
  instructMatter: CreateInstructMatterMutation
  pendingMatter: CreatePendingMatterMutation
}

type CreatePendingMatterMutation {
  create(input: CreatePendingMatterInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

input CreatePendingMatterInput {
  debtDetail: DebtDetailInput
  partyDetails: [PartyDetailInput]
  files: [UploadFile]
}

input DebtDetailInput {
  originalDebtAmount: Decimal
  dateOfDebt: DateTime
  endDateOfDebt: DateTime
  invoiceNumber: String
  originalInterestAmount: Decimal
  collectionCost: Decimal
  accountManager: String
  instructions: String
}

input PartyDetailInput {
  partyType: String
  partyCategory: String
  name: String
  email: String
  dateOfBirth: DateTime
  tradingName: String
  contactName: String
  companyNumber: String
  businessPhoneNumber: String
  homePhoneNumber: String
  mobilePhoneNumber: String
  faxNumber: String
  addressName: String
  floor: String
  number: String
  street: String
  suburb: String
  state: String
  postcode: String
  country: String
  legalAddressName: String
  legalFloor: String
  legalNumber: String
  legalStreet: String
  legalSuburb: String
  legalState: String
  legalPostcode: String
  legalCountry: String
  pOBoxType: String
  pOBox: String
  postalState: String
  postalSuburb: String
  postalPostCode: String
  postalCountry: String
}

type CreateInstructMatterMutation {
  create(input: CreateInstructMatterInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

input CreateInstructMatterInput {
  instruction: String
  areaOfLaw: String
  areaOfLawGuid: ID
  files: [UploadFile]
}

type TenantsMutation {
  brands: BrandsMutation
}

type BrandsMutation {
  create(input: BrandInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  delete(brandGuid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  update(input: BrandInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

input BrandInput {
  guid: ID
  name: String
  title: String
  file: UploadFile
}

type EventsAndCampaignMutation {
  attachEntitiesToEventsAndCampaign(input: AttachEntitiesToEventAndCampaignInput searchFilters: String exclusionList: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  create(input: CreateEventAndCampaignInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  delete(guid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  removeAttendees(guid: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  update(input: UpdateEventAndCampaignInput processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
  updateAttendeeResponse(guid: String eventAndCampaignGuid: String isPositiveResponse: Boolean isNegativeResponse: Boolean specialRequirments: String isAttended: Boolean attendanceNotes: String processId: String dateTime: DateTime tenantId: String userId: String): MutationResponse
}

input CreateEventAndCampaignInput {
  category: Int!
  name: String!
  eventAndCampaignTypeGuid: ID
  eventStatusGuid: ID
  responsibleGuid: ID
  startDate: DateTime
  endDate: DateTime
  rsvpDueDate: DateTime
  availableSeats: Int
  attendeeCost: Decimal
  notes: String
  venue: String
}

input UpdateEventAndCampaignInput {
  guid: ID
  category: Int
  name: String
  eventAndCampaignTypeGuid: ID
  eventStatusGuid: ID
  responsibleGuid: ID
  startDate: DateTime
  endDate: DateTime
  rsvpDueDate: DateTime
  availableSeats: Int
  attendeeCost: Decimal
  notes: String
  venue: String
}

input AttachEntitiesToEventAndCampaignInput {
  guid: ID
  eventAndCampaignGuid: ID
  entityTypeId: Int
  entityGuid: ID
  isPositiveResponse: Boolean
  isNegativeResponse: Boolean
  specialRequirments: String
  isAttended: Boolean
  attendanceNotes: String
}

enum EntityToSync {
  MATTER_TYPE
  CARD
  PERSON
  STAFF
  MATTER
  MATTER_FINANCIAL
  MATTER_TOPIC
  MATTER_DATES
  CORRESPONDENCE
  MATTER_CUSTOM_FIELD
  MATTER_REPORTING_GROUP
  MATTER_GENERIC_DATA
  MATTER_LAST_UPDATE
  MATTER_FOLDERS
  MATTER_TASKS
  RECURRING_MATTER_TEMPLATE
  Card
  Person
  Staff
  Matter
  MatterFinancial
  MatterTopic
  MatterDates
  Correspondence
  Staff
  MatterCustomField
  MatterReportingGroup
  MatterGenericData
  MatterLastUpdate
  MatterFolders
  MatterTasks
  RecurringMatterTemplate
}

enum SagaToExecute {
  MATTER_CATEGORY
  MATTER_TYPE
  MATTER_TYPE_RELATIONSHIP
  VALID_MATTER_TYPE_TOPIC
  MATTER
  MATTER_FINANCIAL
  MATTER_TOPIC
  MATTER_DATES
  CORRESPONDENCE
  MATTER_CORRESPONDENCE
  CARDS
  STAFF
  CARD_ADDRESS
  CARD_PHONE
  CARD_WEB_ADDRESS
  LINK_CARD_ADDRESS
  ASSOCIATE_CARD_TO_MATTER
  REMOVE_CARD_FROM_MATTER
  STAFF_EMAIL
  RELATED_NAMES
  STAFF_PHONE
  COMMENTS
  INITIAL_DATA
  REPORTING_GROUP
  MATTER_FOLDER
  RECURRING_MATTER_TEMPLATE
  MatterType
  AssociateCardToMatter
  CardAddress
  CardPhone
  CardWebAddress
  Cards
  Correspondence
  LinkCardAddress
  Matter
  MatterCategory
  MatterCorrespondence
  RemoveCardFromMatter
  MatterDates
  MatterFinancial
  MatterTopic
  MatterTypeRelationship
  ValidMatterTypeTopic
  Staff
  StaffEmail
  RelatedNames
  StaffPhone
  Comments
  ReportingGroup
  MatterFolder
  RecurringMatterTemplate
}

enum ResyncOperation {
  ALL
  SYNC
  MAP
  All
  Sync
  Map
}

enum FinancialToSync {
  FINANCIAL
  TIMESHEET
  INVOICE
  STAFF_BUDGETS
  STAFF_INVOICE_FUNDS
  STAFF_RECEIPTED_FUNDS
  STAFF_PRODUCTION
  STAFF_BILLING
  STAFF_COLLECTION
  INVOICE_ADJUSTMENTS
  Financial
  Timesheet
  Invoice
  StaffBudgets
  StaffInvoiceFunds
  StaffReceiptedFunds
  StaffProduction
  StaffBilling
  StaffCollection
  InvoiceAdjustments
}

input CreateEnquiryInput {
  guid: ID
  firstName: String
  lastName: String
  email: String
  gender: String
  initialEnquiryDate: DateTime
  phone: String
  mobile: String
  source: String
  office: String
  sourceNotes: String
  organisation: String
  positionAtOrganisation: String
  natureOfEnquiry: String
  areaOfLaw: String
  internalNotes: String
  files: [UploadFile]
  createdDate: DateTime
  dateAssigned: DateTime
  assignedTo: ID
  followUpDueDate: DateTime
  assignedBy: ID
  followUpAction: String
  followUpActionSystemName: String
  followUpDate: DateTime
  followUpNotes: String
  outcome: String
  outcomeDate: DateTime
  outcomeNotes: String
  reason: String
  reasonGuid: ID
  sendNotification: Boolean
  isKeyOpportunity: Boolean
  reminderOffset: String
  updateFollowUpDueForInternalNote: Boolean
  referredToFirmName: String
  referredToFirmGuid: ID
  notProceedingNotes: String
  referrerGuid: ID
  nameGuid: ID
  organisationGuid: ID
  isUpdateContacts: Boolean
  isSendEnquiryResponse: Boolean
  isMarketingConsent: Boolean
  isTermsAndConditionsApproved: Boolean
  isPrivacyStatementProvided: Boolean
  isConflictCheckPerformed: Boolean
  isIdentityCheckPerformed: Boolean
  isNoConflict: Boolean
  estimatedFees: Decimal
  isEstimatedFeesIncludesTax: Boolean
  estimatedDisbursements: Decimal
  isEstimatedDisbursementsIncludesTax: Boolean
  enquiryQuality: Int
  likelihoodToProceed: Int
  dOB: DateTime
  clientFirstName: String
  clientLastName: String
  addressName: String
  floor: String
  number: String
  street: String
  suburb: String
  state: String
  postcode: String
  country: String
  pOBoxType: String
  pOBox: String
  postalSuburb: String
  postalState: String
  postalPostCode: String
  postalCountry: String
  clientAddressStreet2: String
  clientRelationshipToEnquirer: String
  enquiryNotes: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyNotes: String
  otherPartyOrganisation: String
  otherPartyEmail: String
  otherPartyPhone: String
  otherPartyMobile: String
  otherPartyDOB: DateTime
  otherPartyAddressName: String
  otherPartyFloor: String
  otherPartyNumber: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  otherPartyState: String
  otherPartyPostcode: String
  otherPartyCountry: String
  otherPartyPOBoxType: String
  otherPartyPOBox: String
  otherPartyPostalSuburb: String
  otherPartyPostalState: String
  otherPartyPostalPostCode: String
  otherPartyPostalCountry: String
  isImport: Boolean
  isRiskAssessed: Boolean
  riskLevel: String
  riskNotes: String
  otherPartyGuid: ID
  otherPartyOrganisationGuid: ID
  secondClientFirstName: String
  secondClientLastName: String
  secondClientGuid: ID
  secondClientRelationshipToEnquirer: String
  secondClientDOB: DateTime
  secondClientGender: String
  secondClientIsMarketingConsent: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsNoConflict: Boolean
  secondClientAddressName: String
  secondClientFloor: String
  secondClientNumber: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  secondClientState: String
  secondClientPostCode: String
  secondClientCountry: String
  secondClientPOBoxType: String
  secondClientPOBox: String
  secondClientPostalSuburb: String
  secondClientPostalState: String
  secondClientPostalPostCode: String
  secondClientPostalCountry: String
}

input UpdateEnquiryInput {
  guid: ID
  lastUpdated: DateTime
  updatedValues: String
  firstName: String
  lastName: String
  email: String
  gender: String
  initialEnquiryDate: DateTime
  phone: String
  mobile: String
  source: String
  office: String
  sourceNotes: String
  organisation: String
  positionAtOrganisation: String
  natureOfEnquiry: String
  areaOfLaw: String
  internalNotes: String
  files: [UploadFile]
  dateAssigned: DateTime
  assignedTo: ID
  followUpDueDate: DateTime
  assignedBy: ID
  followUpAction: String
  followUpActionSystemName: String
  followUpDate: DateTime
  followUpNotes: String
  outcome: String
  outcomeDate: DateTime
  outcomeNotes: String
  reason: String
  reasonGuid: ID
  isKeyOpportunity: Boolean
  sendNotification: Boolean
  referrerGuid: ID
  nameGuid: ID
  organisationGuid: ID
  isUpdateContacts: Boolean
  isSendEnquiryResponse: Boolean
  reminderOffset: String
  updateFollowUpDueForInternalNote: Boolean
  isMarketingConsent: Boolean
  isTermsAndConditionsApproved: Boolean
  isPrivacyStatementProvided: Boolean
  isConflictCheckPerformed: Boolean
  isIdentityCheckPerformed: Boolean
  isNoConflict: Boolean
  estimatedFees: Decimal
  isEstimatedFeesIncludesTax: Boolean
  estimatedDisbursements: Decimal
  isEstimatedDisbursementsIncludesTax: Boolean
  enquiryQuality: Int
  likelihoodToProceed: Int
  dOB: DateTime
  clientFirstName: String
  clientLastName: String
  addressName: String
  floor: String
  number: String
  street: String
  suburb: String
  state: String
  postcode: String
  country: String
  pOBoxType: String
  pOBox: String
  postalSuburb: String
  postalState: String
  postalPostCode: String
  postalCountry: String
  clientAddressStreet2: String
  clientRelationshipToEnquirer: String
  enquiryNotes: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyNotes: String
  otherPartyOrganisation: String
  otherPartyEmail: String
  otherPartyPhone: String
  otherPartyMobile: String
  otherPartyDOB: DateTime
  otherPartyAddressName: String
  otherPartyFloor: String
  otherPartyNumber: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  otherPartyState: String
  otherPartyPostcode: String
  otherPartyCountry: String
  otherPartyPOBoxType: String
  otherPartyPOBox: String
  otherPartyPostalSuburb: String
  otherPartyPostalState: String
  otherPartyPostalPostCode: String
  otherPartyPostalCountry: String
  isImport: Boolean
  isRiskAssessed: Boolean
  riskLevel: String
  riskNotes: String
  otherPartyGuid: ID
  otherPartyOrganisationGuid: ID
  secondClientFirstName: String
  secondClientLastName: String
  secondClientGuid: ID
  secondClientRelationshipToEnquirer: String
  secondClientDOB: DateTime
  secondClientGender: String
  secondClientIsMarketingConsent: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsNoConflict: Boolean
  secondClientAddressName: String
  secondClientFloor: String
  secondClientNumber: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  secondClientState: String
  secondClientPostCode: String
  secondClientCountry: String
  secondClientPOBoxType: String
  secondClientPOBox: String
  secondClientPostalSuburb: String
  secondClientPostalState: String
  secondClientPostalPostCode: String
  secondClientPostalCountry: String
}

input AssignStaffToEnquiryInput {
  guid: ID
  enquiryGuid: ID
  dateAssigned: DateTime
  assignedTo: ID
  followUpDueDate: DateTime
  assignedBy: ID
  isEnquiryOperation: Boolean
  updatedVales: String
  reminderOffset: String
  isImport: Boolean
}

input FollowUpEnquiryInput {
  guid: ID
  enquiryGuid: ID
  followUpAction: String
  followUpActionSystemName: String
  followUpDate: DateTime
  followUpNotes: String
  outcome: String
  outcomeDate: DateTime
  outcomeNotes: String
  reason: String
  reasonGuid: ID
  isEnquiryOperation: Boolean
  updatedValues: String
  sendEmailResponse: Boolean
  emailContent: String
  emailSubject: String
  fromEmailAddress: String
  toEmailAddresses: String
  ccEmailAddresses: String
  emailTemplateName: String
  reminderOffset: String
  updateFollowUpDueForInternalNote: Boolean
  messageAssignee: Boolean
  files: [UploadFile]
  referredToFirmName: String
  referredToFirmGuid: ID
  notProceedingNotes: String
  isImport: Boolean
}

input BookMeetingInput {
  guid: ID
  enquiryGuid: ID
  assignedTo: ID
  followUpAction: String
  followUpActionSystemName: String
  startDate: DateTime
  endDate: DateTime
  isAllDay: Boolean
  location: String
  feeApplicable: Decimal
  sendConfirmation: Boolean
  staff: ID
  staffEntityType: Int
  meetingNotes: String
  timezone: String
  emailContent: String
  emailSubject: String
  fromEmailAddress: String
  toEmailAddresses: String
  ccEmailAddresses: String
  files: [UploadFile]
}

input CreateClientAndContactInput {
  enquiryGuid: ID
  companyName: String
  orgAddressBuildingName: String
  orgAddressLevel: String
  orgAddressNumber: String
  orgAddressStreet1: String
  orgAddressStreet2: String
  orgAddressSuburb: String
  orgAddressState: String
  orgAddressPostCode: String
  orgAddressCountry: String
  orgPostalPoBoxType: String
  orgPostalPoBox: String
  orgPostalSuburb: String
  orgPostalState: String
  orgPostalPostCode: String
  orgPostalCountry: String
  title: String
  firstName: String
  lastName: String
  email: String
  mobile: String
  phone: String
  generalNotes: String
  isMarketingConsent: Boolean
  recurringMatterTemplateId: ID
  matterTypeId: String
  matterTypeState: String
  personResponsible: ID
  personActing: ID
  personAssisting: ID
  personCredit: ID
  matterTitle: String
  referrerGuid: ID
  workObtained: String
  reportingGroupGuid: ID
  isCreditAgreementRequired: Boolean
  estimatedFees: Decimal
  isEstimatedFeesIncludesTax: Boolean
  estimatedDisb: Decimal
  isEstimatedDisbIncludeTax: Boolean
  birthDate: DateTime
  gender: String
  clientRelationshipToEnquirer: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyNotes: String
  otherPartyOrganisation: String
  otherPartyEmail: String
  otherPartyPhone: String
  otherPartyMobile: String
  historyFile: UploadFile
  companyGuid: ID
  nameGuid: ID
  otherPartyDOB: DateTime
  otherPartyAddressName: String
  otherPartyFloor: String
  otherPartyNumber: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  otherPartyState: String
  otherPartyPostcode: String
  otherPartyCountry: String
  otherPartyPOBoxType: String
  otherPartyPOBox: String
  otherPartyPostalSuburb: String
  otherPartyPostalState: String
  otherPartyPostalPostCode: String
  otherPartyPostalCountry: String
  otherPartyCompanyGuid: ID
  otherPartyNameGuid: ID
  secondClientFirstName: String
  secondClientLastName: String
  secondClientGuid: ID
  secondClientRelationshipToEnquirer: String
  secondClientDOB: DateTime
  secondClientGender: String
  secondClientIsMarketingConsent: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsNoConflict: Boolean
  secondClientAddressName: String
  secondClientFloor: String
  secondClientNumber: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  secondClientState: String
  secondClientPostCode: String
  secondClientCountry: String
  secondClientPOBoxType: String
  secondClientPOBox: String
  secondClientPostalSuburb: String
  secondClientPostalState: String
  secondClientPostalPostCode: String
  secondClientPhone: String
  secondClientEmail: String
  secondClientTitle: String
  secondClientMobile: String
  secondClientPostalCountry: String
}

input CreateClientContactInput {
  enquiryGuid: ID
  companyGuid: ID
  title: String
  firstName: String
  lastName: String
  email: String
  mobile: String
  phone: String
  generalNotes: String
  isMarketingConsent: Boolean
  recurringMatterTemplateId: ID
  matterTypeId: String
  matterTypeState: String
  personResponsible: ID
  personActing: ID
  personAssisting: ID
  personCredit: ID
  matterTitle: String
  referrerGuid: ID
  workObtained: String
  reportingGroupGuid: ID
  isCreditAgreementRequired: Boolean
  estimatedFees: Decimal
  isEstimatedFeesIncludesTax: Boolean
  estimatedDisb: Decimal
  isEstimatedDisbIncludeTax: Boolean
  gender: String
  birthDate: DateTime
  clientRelationshipToEnquirer: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyNotes: String
  otherPartyOrganisation: String
  otherPartyEmail: String
  otherPartyPhone: String
  otherPartyMobile: String
  historyFile: UploadFile
  nameGuid: ID
  otherPartyDOB: DateTime
  otherPartyAddressName: String
  otherPartyFloor: String
  otherPartyNumber: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  otherPartyState: String
  otherPartyPostcode: String
  otherPartyCountry: String
  otherPartyPOBoxType: String
  otherPartyPOBox: String
  otherPartyPostalSuburb: String
  otherPartyPostalState: String
  otherPartyPostalPostCode: String
  otherPartyPostalCountry: String
  otherPartyCompanyGuid: ID
  otherPartyNameGuid: ID
  secondClientFirstName: String
  secondClientLastName: String
  secondClientGuid: ID
  secondClientRelationshipToEnquirer: String
  secondClientDOB: DateTime
  secondClientGender: String
  secondClientIsMarketingConsent: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsNoConflict: Boolean
  secondClientAddressName: String
  secondClientFloor: String
  secondClientNumber: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  secondClientState: String
  secondClientPostCode: String
  secondClientCountry: String
  secondClientPOBoxType: String
  secondClientPOBox: String
  secondClientPostalSuburb: String
  secondClientPostalState: String
  secondClientPostalPostCode: String
  secondClientPostalCountry: String
  secondClientPhone: String
  secondClientEmail: String
  secondClientTitle: String
  secondClientMobile: String
}

input CreateContactInput {
  enquiryGuid: ID
  title: String
  firstName: String
  lastName: String
  email: String
  mobile: String
  phone: String
  generalNotes: String
  personAddressBuildingName: String
  personAddressLevel: String
  personAddressNumber: String
  personAddressStreet1: String
  personAddressStreet2: String
  personAddressSuburb: String
  personAddressState: String
  personAddressPostCode: String
  personAddressCountry: String
  personPostalPoBoxType: String
  personPostalPoBox: String
  personPostalSuburb: String
  personPostalState: String
  personPostalPostCode: String
  personPostalCountry: String
  isMarketingConsent: Boolean
  recurringMatterTemplateId: ID
  matterTypeId: String
  matterTypeState: String
  personResponsible: ID
  personActing: ID
  personAssisting: ID
  personCredit: ID
  matterTitle: String
  referrerGuid: ID
  workObtained: String
  reportingGroupGuid: ID
  isCreditAgreementRequired: Boolean
  estimatedFees: Decimal
  isEstimatedFeesIncludesTax: Boolean
  estimatedDisb: Decimal
  isEstimatedDisbIncludeTax: Boolean
  gender: String
  birthDate: DateTime
  clientRelationshipToEnquirer: String
  otherPartyFirstName: String
  otherPartyLastName: String
  otherPartyNotes: String
  otherPartyOrganisation: String
  otherPartyEmail: String
  otherPartyPhone: String
  otherPartyMobile: String
  historyFile: UploadFile
  nameGuid: ID
  otherPartyDOB: DateTime
  otherPartyAddressName: String
  otherPartyFloor: String
  otherPartyNumber: String
  otherPartyStreet: String
  otherPartyStreet2: String
  otherPartySuburb: String
  otherPartyState: String
  otherPartyPostcode: String
  otherPartyCountry: String
  otherPartyPOBoxType: String
  otherPartyPOBox: String
  otherPartyPostalSuburb: String
  otherPartyPostalState: String
  otherPartyPostalPostCode: String
  otherPartyPostalCountry: String
  otherPartyCompanyGuid: ID
  otherPartyNameGuid: ID
  secondClientFirstName: String
  secondClientLastName: String
  secondClientGuid: ID
  secondClientRelationshipToEnquirer: String
  secondClientDOB: DateTime
  secondClientGender: String
  secondClientIsMarketingConsent: Boolean
  secondClientIsTermsAndConditionsApproved: Boolean
  secondClientIsPrivacyStatementProvided: Boolean
  secondClientIsConflictCheckPerformed: Boolean
  secondClientIsIdentityCheckPerformed: Boolean
  secondClientIsNoConflict: Boolean
  secondClientAddressName: String
  secondClientFloor: String
  secondClientNumber: String
  secondClientStreet1: String
  secondClientStreet2: String
  secondClientSuburb: String
  secondClientState: String
  secondClientPostCode: String
  secondClientCountry: String
  secondClientPOBoxType: String
  secondClientPOBox: String
  secondClientPostalSuburb: String
  secondClientPostalState: String
  secondClientPostalPostCode: String
  secondClientPostalCountry: String
  secondClientPhone: String
  secondClientEmail: String
  secondClientTitle: String
  secondClientMobile: String
}

input CompleteCreateClientInput {
  enquiryGuid: ID
  matterGuid: ID
}

input LinkMatterToEnquiryInput {
  enquiryGuid: ID
  matterGuid: ID
}

input CreateUserAssistantInputType {
  guid: ID
  userToAssistId: ID
  assistantId: ID
}

input UpdateUserAssistantInputType {
  guid: ID
  userToAssistId: ID
  assistantId: ID
}

"RedView Server GraphQL subscription schema definitions"
type Subscription {
  assignEnquiryToStaffNotification: AssignEnquiryToStaffNotification
  assignLeadToStaffNotification: AssignLeadToStaffNotification
  attachEntitiesToEventAndCampaignNotification: attachEntitiesToEventAndCampaignNotification
  completeCreateClientNotification: completeCreateClientNotification
  createBrandNotification: createBrandNotification
  createClientAndContactNotification: createClientAndContactNotification
  createClientContactNotification: createClientContactNotification
  createContactNotification: createContactNotification
  createEnquiryNotification: CreateEnquiryNotification
  createEventAndCampaignNotification: createEventAndCampaignNotification
  createGeneralMaterialNotification: createGeneralMaterialNotification
  createInstructMatterNotifications: createInstructMatterNotifications
  createLeadNotification: CreateLeadNotification
  createPendingMatterNotification: createPendingMatterNotification
  createRoleNotification: CreateRoleNotification
  createTenantNotification: CreateTenantNotification
  createUserNotification: CreateUserNotification
  dataPublisherNotification: DataPublisherNotification
  deleteAttendeeEventAndCampaignNotification: deleteAttendeeEventAndCampaignNotification
  deleteBrandNotification: deleteBrandNotification
  deleteEnquiryNotification: DeleteEnquiryNotification
  deleteEventAndCampaignNotification: deleteEventAndCampaignNotification
  deleteGeneralMaterialNotification: deleteGeneralMaterialNotification
  deleteRoleNotification: DeleteRoleNotification
  deleteTenantNotification: DeleteTenantNotification
  deleteUserNotification: DeleteUserNotification
  documentMergeNotification(fileNumber: String matterId: String): documentMergeNotification
  emailTemplateNotification: emailTemplateNotification
  enquiryScrubbingCompleteNotification: EnquiryScrubbingCompleteNotification
  enquiryScrubbingInProgressNotification: EnquiryScrubbingInProgressNotification
  featureAccessConfigurationNotification: featureAccessConfigurationNotification
  featureLayoutConfigurationNotification: featureLayoutConfigurationNotification
  featureLicenceConfigurationNotification: featureLicenceConfigurationNotification
  followUpEnquiryNotification: FollowUpEnquiryNotification
  followUpLeadNotification: FollowUpLeadNotification
  grantLeapDocumentAccessNotification("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean documentId: String): grantLeapDocumentAccessNotification
  grantLeapMatterAccessNotification("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean cardId: String): grantLeapMatterAccessNotification
  leapFirmResetAccessNotification: leapFirmResetAccessNotification
  lookupNotification: LookupNotification
  mailingListNotification: mailingListNotification
  matterManagementTaskNotification: matterManagementTaskNotification
  provisionLeapFirmNotification: provisionLeapFirmNotification
  removeLeapMatterAccessNotification("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean cardId: String): removeLeapMatterAccessNotification
  reportDataFetchedNotification: reportDataFetchedNotification
  resendUserRegistrationEmailNotification: ResendUserRegistrationEmailNotification
  resetUserNotification: ResetUserNotification
  revokeLeapDocumentAccessNotification("Pass unique identity Id of the Leap's Matter Id" matterId: String "Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass true, if you wanted to fetch the records of user role details" includeRoleDetails: Boolean documentId: String): revokeLeapDocumentAccessNotification
  sendMessageNotification("Skip offset records" offset: Int "Return first number of records" first: Int "Search filter string" filter: String "Pass the Guid value of Matter Id to return the record" matterId: String messageId: Int): sendMessageNotification
  settingNotification: SettingNotification
  splashScreenNotification: splashScreenNotification
  summaryViewConfigNotification: summaryViewConfigNotification
  taskNotification: taskNotification
  taskTypeGroupNotification: taskTypeGroupNotification
  taskTypeNotification: taskTypeNotification
  timelineDeleteNotification: timelineDeleteNotification
  timerNotification: timerNotification
  updateAttendeesEventAndCampaignNotification: updateAttendeesEventAndCampaignNotification
  updateBrandNotification: updateBrandNotification
  updateEnquiryLikelihoodNotification: updateEnquiryLikelihoodNotification
  updateEnquiryNotification: UpdateEnquiryNotification
  updateEnquiryQualityNotification: UpdateEnquiryQualityNotification
  updateEventAndCampaignNotification: updateEventAndCampaignNotification
  updateGeneralMaterialNotification: updateGeneralMaterialNotification
  updateGeneralMaterialSequenceNotification: UpdateGeneralMaterialSequenceNotification
  updateLeadNotification: UpdateLeadNotification
  updateNameNotesNotification: updateNameNotesNotification
  updateNameNotification: updateNameNotification
  updateReferrerNotification: updateReferrerNotification
  updateRoleNotification: UpdateRoleNotification
  updateStaffDailyBudgetNotification: updateStaffDailyBudgetNotification
  updateStaffMonthlyBudgetNotification: updateStaffMonthlyBudgetNotification
  updateStaffNotification: updateStaffNotification
  updateTenantNotification: UpdateTenantNotification
  updateUserNotification: UpdateUserNotification
  uploadMatterDocumentNotification: uploadMatterDocumentNotification
  userAssistantNotification: userAssistantNotification
  userDefinedHelpNotification: userDefinedHelpNotification
}

type CreateRoleNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  roleGuid: ID
  status: Boolean!
}

type UpdateRoleNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  roleGuid: ID
  status: Boolean!
}

type DeleteRoleNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  roleGuid: ID
  status: Boolean!
}

type CreateUserNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  user: User
}

type UpdateUserNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  user: User
}

type DeleteUserNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  userGuid: ID
}

type ResetUserNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  user: User
}

type ResendUserRegistrationEmailNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  userGuid: ID
}

type summaryViewConfigNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type timelineDeleteNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  timesheetIds: String
}

type featureLayoutConfigurationNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type featureAccessConfigurationNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type featureLicenceConfigurationNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type splashScreenNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type userDefinedHelpNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type emailTemplateNotification {
  description: String
  emailType: Int
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type matterManagementTaskNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type LookupNotification {
  description: String
  groupId: ID
  guidId: ID
  "Unique Identifier"
  id: Int!
  lookupDescription: String
  message: String
  status: Boolean!
}

type taskNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type taskTypeNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type taskTypeGroupNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateReferrerNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateNameNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateNameNotesNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateStaffNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type mailingListNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type uploadMatterDocumentNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type userAssistantNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateStaffDailyBudgetNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateStaffMonthlyBudgetNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type SettingNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type DataPublisherNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type CreateTenantNotification {
  description: String
  "Unique Identifier"
  id: Int!
  isComplete: Boolean
  message: String
  provisioningStep: ProvisioningStep
  status: Boolean!
}

enum ProvisioningStep {
  CREATE_DATABASE
  CREATE_ALERTS
  CREATE_SUBSCRIPTION
  UPLOAD_LOGO
  APPLY_LATEST_SCHEMA_NEW_CONFIG
  APPLY_LATEST_SCHEMA
  POST_PROVISIONING_TASK
  CREATE_ADMIN_USER
  CREATE_CONTACT_USER
  TENANT_PROVISIONED
  CreateDatabase
  CreateAlerts
  CreateSubscription
  UploadLogo
  ApplyLatestSchemaNewConfig
  ApplyLatestSchema
  PostProvisioningTask
  CreateAdminUser
  CreateContactUser
  TenantProvisioned
}

type UpdateTenantNotification {
  description: String
  "Unique Identifier"
  id: Int!
  isComplete: Boolean
  message: String
  status: Boolean!
  tenantUpdateStep: TenantUpdateStep
}

enum TenantUpdateStep {
  UPDATE_SUBSCRIPTION
  UPLOAD_LOGO
  POST_UPDATE_TASK
  TENANT_UPDATED
  UpdateSubscription
  UploadLogo
  PostUpdateTask
  TenantUpdated
}

type DeleteTenantNotification {
  deProvisioningStep: DeProvisioningStep
  description: String
  "Unique Identifier"
  id: Int!
  isComplete: Boolean
  message: String
  status: Boolean!
}

enum DeProvisioningStep {
  DELETE_DATABASE
  DELETE_ALERTS
  DELETE_LOGO
  DELETE_SUBSCRIPTION
  POST_DE_PROVISIONING_TASK
  TENANT_DE_PROVISIONED
  DeleteDatabase
  DeleteAlerts
  DeleteLogo
  DeleteSubscription
  PostDeProvisioningTask
  TenantDeProvisioned
}

type EnquiryScrubbingCompleteNotification {
  description: String
  "Unique Identifier"
  id: Int!
  isComplete: Boolean
  message: String
  status: Boolean!
}

type EnquiryScrubbingInProgressNotification {
  description: String
  enquiriesScrubbed: Int
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  totalEnquiries: Int
}

type createPendingMatterNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createInstructMatterNotifications {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createBrandNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateBrandNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type deleteBrandNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type timerNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
  timerGuid: ID
}

type createGeneralMaterialNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateGeneralMaterialNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type deleteGeneralMaterialNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type UpdateGeneralMaterialSequenceNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type deleteEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type attachEntitiesToEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateAttendeesEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type deleteAttendeeEventAndCampaignNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type grantLeapMatterAccessNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leapMatterUserAccess: LeapMatterUserAccess
  message: String
  status: Boolean!
}

type grantLeapDocumentAccessNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leapDocument: LeapDocument
  message: String
  status: Boolean!
}

type removeLeapMatterAccessNotification {
  cardId: String!
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type revokeLeapDocumentAccessNotification {
  description: String
  documentId: String!
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type sendMessageNotification {
  description: String
  "Unique Identifier"
  id: Int!
  key: String!
  leapMessage: message
  message: String
  status: Boolean!
}

type provisionLeapFirmNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leapProvisioningStatus: LeapProvisioningStatus
  message: String
  status: Boolean!
}

type leapFirmResetAccessNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type reportDataFetchedNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  progress: Int!
  status: Boolean!
}

type documentMergeNotification {
  currentDocIndex: Int!
  description: String
  documentUrl: String!
  failedDocs: failedDocuments
  failedDocumentListUrl: String!
  fileNumber: String!
  "Unique Identifier"
  id: Int!
  inProgress: Boolean!
  message: String
  status: Boolean!
  successDocs: [String!]!
  totalDocs: Int!
}

type failedDocuments {
  failedDocument: [FailedDocument]
  recordCount: Int!
}

type FailedDocument {
  "Unique Identifier"
  id: Int!
  name: String!
  reason: String!
}

type CreateLeadNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leadDetails: LeadDetails
  message: String
  status: Boolean!
}

type UpdateLeadNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leadDetails: LeadDetails
  message: String
  status: Boolean!
}

type AssignLeadToStaffNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leadDetails: LeadDetails
  message: String
  status: Boolean!
}

type FollowUpLeadNotification {
  description: String
  "Unique Identifier"
  id: Int!
  leadDetails: LeadDetails
  message: String
  status: Boolean!
}

type CreateEnquiryNotification {
  description: String
  enquiryDetail: EnquiryDetail
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type UpdateEnquiryNotification {
  description: String
  enquiryDetail: EnquiryDetail
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type AssignEnquiryToStaffNotification {
  description: String
  enquiryDetail: EnquiryDetail
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type FollowUpEnquiryNotification {
  description: String
  enquiryDetail: EnquiryDetail
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createClientAndContactNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createClientContactNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type createContactNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type DeleteEnquiryNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type UpdateEnquiryQualityNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type updateEnquiryLikelihoodNotification {
  description: String
  guid: ID
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}

type completeCreateClientNotification {
  description: String
  "Unique Identifier"
  id: Int!
  message: String
  status: Boolean!
}